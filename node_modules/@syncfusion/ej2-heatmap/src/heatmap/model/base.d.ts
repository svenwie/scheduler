import { ChildProperty } from '@syncfusion/ej2-base';
import { Alignment, TextOverflow } from '../utils/enum';
import { FontModel } from './base-model';
/**
 * Configures the fonts in heat map.
 */
export declare class Font extends ChildProperty<Font> {
    /**
     * Font size for the text.
     * @default '16px'
     */
    size: string;
    /**
     * Color for the text.
     * @default ''
     */
    color: string;
    /**
     * FontFamily for the text.
     */
    fontFamily: string;
    /**
     * FontWeight for the text.
     * @default 'Normal'
     */
    fontWeight: string;
    /**
     * FontStyle for the text.
     * @default 'Normal'
     */
    fontStyle: string;
    /**
     * text alignment
     * @default 'Center'
     */
    textAlignment: Alignment;
    /**
     * Specifies the heat map text overflow
     * @default 'Trim'
     */
    textOverflow: TextOverflow;
}
/**
 * Configures the heat map margins.
 */
export declare class Margin extends ChildProperty<Margin> {
    /**
     * Left margin in pixels.
     * @default 10
     */
    left: number;
    /**
     * Right margin in pixels.
     * @default 10
     */
    right: number;
    /**
     * Top margin in pixels.
     * @default 10
     */
    top: number;
    /**
     * Bottom margin in pixels.
     * @default 10
     */
    bottom: number;
}
/**
 * Configures the borders in the heat map.
 */
export declare class Border extends ChildProperty<Border> {
    /**
     * The color of the border that accepts value in hex and rgba as a valid CSS color string.
     * @default ''
     */
    color: string;
    /**
     * The width of the border in pixels.
     * @default 1
     */
    width: number;
    /**
     * The radius of the border in pixels.
     * @default ''
     */
    radius: number;
}
/**
 * Configures the mapping name for size and color in SizeAndColor type.
 */
export declare class BubbleData extends ChildProperty<BubbleData> {
    /**
     * Mapping property to set size.
     * @default null
     */
    size: string;
    /**
     * Mapping property to set color.
     * @default null
     */
    color: string;
}
/**
 * class used to maintain Title styles.
 */
export declare class Title extends ChildProperty<Title> {
    /**
     * Title text
     * @default ''
     */
    text: string;
    /**
     * Options for customizing the title.
     */
    textStyle: FontModel;
}
/**
 * class used to maintain palette information.
 */
export declare class PaletteCollection extends ChildProperty<PaletteCollection> {
    /**
     * Palette color value
     * @default null
     */
    value: number;
    /**
     * Palette color text
     * @default ''
     */
    color: string;
    /**
     * Palette color label
     * @default ''
     */
    label: string;
}
/**
 * Internal class used to maintain colorcollection.
 */
export declare class ColorCollection {
    value: number;
    color: string;
    label: string;
    constructor(value: number, color: string, label: string);
}
/**
 * class used to maintain color and value collection.
 */
export declare class BubbleTooltipData {
    mappingName: string;
    bubbleData: number;
    valueType: string;
    constructor(mappingName: string, bubbleData: number, valueType: string);
}
/**
 * Internal class used to maintain legend colorcollection.
 */
export declare class LegendColorCollection {
    value: number;
    color: string;
    label: string;
    isHidden: boolean;
    constructor(value: number, color: string, label: string, isHidden: boolean);
}
