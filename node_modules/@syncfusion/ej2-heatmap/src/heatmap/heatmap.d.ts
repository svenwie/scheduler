/**
 * Heat Map Component
 */
import { Component, Internationalization } from '@syncfusion/ej2-base';
import { ModuleDeclaration, EmitType } from '@syncfusion/ej2-base';
import { INotifyPropertyChanged, SvgRenderer, CanvasRenderer } from '@syncfusion/ej2-base';
import { Size, Rect } from './utils/helper';
import { CanvasTooltip } from './utils/helper';
import { HeatMapModel } from './heatmap-model';
import { MarginModel, TitleModel } from './model/base-model';
import { ColorCollection, LegendColorCollection } from './model/base';
import { IThemeStyle, ILoadedEventArgs, ICellClickEventArgs, ITooltipEventArgs } from './model/interface';
import { DrawType, HeatMapTheme } from './utils/enum';
import { Axis } from './axis/axis';
import { AxisModel } from './axis/axis-model';
import { AxisHelper } from './axis/axis-helpers';
import { Series } from './series/series';
import { CellSettingsModel } from './series/series-model';
import { PaletteSettingsModel } from './utils/colorMapping-model';
import { Tooltip } from './utils/tooltip';
import { LegendSettingsModel } from '../heatmap/legend/legend-model';
import { Legend } from '../heatmap/legend/legend';
import { Adaptor } from './datasource/adaptor';
import { DataModel } from './datasource/adaptor-model';
export declare class HeatMap extends Component<HTMLElement> implements INotifyPropertyChanged {
    /**
     * The width of the heatmap as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, heatmap renders to the full width of its parent element.
     * @default null
     */
    width: string;
    /**
     * The height of the heatmap as a string accepts input as both like '100px' or '100%'.
     * If specified as '100%, heatmap renders to the full height of its parent element.
     * @default null
     */
    height: string;
    /**
     * Enable or disable the tool tip for heatmap
     * @default true
     */
    showTooltip: boolean;
    /**
     * Triggers when click the heat map cell.
     * @event
     */
    tooltipRender: EmitType<ITooltipEventArgs>;
    /**
     * Specifies the rendering mode of heat map.
     * * SVG - Heat map is render using SVG draw mode.
     * * Canvas - Heat map is render using Canvas draw mode.
     * * Auto - Automatically switch the draw mode based on number of records in data source.
     * @default SVG
     */
    renderingMode: DrawType;
    /**
     * Specifies the datasource for the heat map.
     * @default null
     */
    dataSource: Object | DataModel;
    /**
     *  Specifies the theme for heatmap.
     * @default 'Material'
     */
    theme: HeatMapTheme;
    /**
     * Options to customize left, right, top and bottom margins of the heat map.
     */
    margin: MarginModel;
    /**
     * Title of heat map
     * @default ''
     */
    titleSettings: TitleModel;
    /**
     * Options to configure the horizontal axis.
     */
    xAxis: AxisModel;
    /**
     * Options for customizing the legend of the heat map
     * @default ''
     */
    legendSettings: LegendSettingsModel;
    /**
     * Options for customizing the cell color of the heat map
     */
    paletteSettings: PaletteSettingsModel;
    /**
     * Options to configure the vertical axis.
     */
    yAxis: AxisModel;
    /**
     * Options to customize the heat map cell
     */
    cellSettings: CellSettingsModel;
    /**
     * Triggers after heat map rendered.
     * @event
     */
    created: EmitType<ILoadedEventArgs>;
    /**
     * Triggers before heat map load.
     * @event
     */
    load: EmitType<ILoadedEventArgs>;
    /**
     * Triggers when click the heat map cell.
     * @event
     */
    cellClick: EmitType<ICellClickEventArgs>;
    /** @private */
    enableCanvasRendering: boolean;
    /** @private */
    renderer: SvgRenderer;
    /** @private */
    canvasRenderer: CanvasRenderer;
    /** @private */
    svgObject: Element;
    /** @private */
    availableSize: Size;
    /** @private */
    private elementSize;
    /** @private */
    themeStyle: IThemeStyle;
    /** @private */
    initialClipRect: Rect;
    heatMapAxis: AxisHelper;
    heatMapSeries: Series;
    private drawSvgCanvas;
    private twoDimensional;
    private cellColor;
    /** @private */
    colorCollection: ColorCollection[];
    /** @private */
    legendColorCollection: LegendColorCollection[];
    /** @private */
    tempRectHoverClass: string;
    /** @private */
    legendVisibilityByCellType: boolean;
    /** @private */
    bubbleSizeWithColor: boolean;
    /** @private */
    tempTooltipRectId: string;
    /** @private */
    clonedDataSource: any[];
    /** @private */
    completeAdaptDataSource: Object;
    /** @private */
    xLength: number;
    /** @private */
    yLength: number;
    /** @private */
    dataSourceMinValue: number;
    /** @private */
    dataSourceMaxValue: number;
    /** @private */
    minColorValue: number;
    /** @private */
    maxColorValue: number;
    /** @private */
    isColorValueExist: boolean;
    /** @private */
    tooltipTimer: number;
    /** @private */
    gradientTimer: number;
    /** @private */
    legendTooltipTimer: number;
    /** @private */
    resizeTimer: number;
    /** @private */
    emptyPointColor: string;
    /** @private */
    horizontalGradient: boolean;
    /**
     * @private
     */
    tooltipCollection: CanvasTooltip[];
    /**
     * @private
     */
    isTouch: boolean;
    /**
     * @private
     */
    private border;
    /**
     * Gets the axis of the HeatMap.
     * @hidden
     */
    axisCollections: Axis[];
    /**
     * @private
     */
    intl: Internationalization;
    /**
     * @private
     */
    isCellData: boolean;
    private titleCollection;
    /**
     * @private
     */
    mouseX: number;
    /**
     * @private
     */
    mouseY: number;
    /**
     * The `legendModule` is used to display the legend.
     * @private
     */
    legendModule: Legend;
    /**
     * The `tooltipModule` is used to manipulate Tooltip item from base of heatmap.
     * @private
     */
    tooltipModule: Tooltip;
    /**
     * The `adaptorModule` is used to manipulate Adaptor item from base of heatmap.
     * @private
     */
    adaptorModule: Adaptor;
    protected preRender(): void;
    private initPrivateVariable();
    /**
     * Method to set culture for heatmap
     */
    private setCulture();
    protected render(): void;
    /**
     * To re-calculate the datasource while changing datasource property dynamically.
     * @private
     */
    private reRenderDatasource();
    /**
     * To process datasource property.
     * @private
     */
    private processInitData();
    /**
     * To set render mode of heatmap as SVG or Canvas.
     * @private
     */
    private setRenderMode();
    /**
     * To set bubble helper private property.
     * @private
     */
    private updateBubbleHelperProperty();
    private renderElements();
    /**
     * Get component name
     */
    getModuleName(): string;
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    getPersistData(): string;
    onPropertyChanged(newProp: HeatMapModel, oldProp: HeatMapModel): void;
    private createSvg();
    /**
     *  To Remove the SVG.
     */
    removeSvg(): void;
    private renderSecondaryElement();
    /**
     * To provide the array of modules needed for control rendering
     * @return{ModuleDeclaration[]}
     * @private
     */
    requiredModules(): ModuleDeclaration[];
    /**
     * To destroy the widget
     * @method destroy
     * @return {void}.
     * @member of Heatmap
     */
    destroy(): void;
    private renderBorder();
    private calculateSize();
    private renderTitle();
    private titleTooltip(event, x, y, isTouch?);
    private axisTooltip(event, x, y, isTouch?);
    private isHeatmapRect(x, y);
    private setTheme();
    private calculateBounds();
    private refreshBound();
    private initAxis();
    /**
     * Method to bind events for HeatMap
     */
    private wireEvents();
    /**
     * Applying styles for heatmap element
     */
    private setStyle(element);
    /**
     * Method to unbind events for HeatMap
     */
    private unWireEvents();
    /**
     * Handles the heatmap resize.
     * @return {boolean}
     * @private
     */
    heatMapResize(e: Event): boolean;
    /**
     * Get the maximum length of data source for both horizontal and vertical
     * @private
     */
    private calculateMaxLength();
    /**
     * To find mouse x, y for aligned heatmap element svg position
     */
    private setMouseXY(pageX, pageY);
    heatMapMouseClick(e: PointerEvent): boolean;
    /**
     * Handles the mouse Move.
     * @return {boolean}
     * @private
     */
    heatMapMouseMove(e: PointerEvent): boolean;
    /**
     * Handles the mouse end.
     * @return {boolean}
     * @private
     */
    heatMapMouseLeave(e: PointerEvent): boolean;
}
