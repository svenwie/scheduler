import { Schedule } from '../base/schedule';
import { TdData } from '../base/interface';
import { ResourcesModel } from '../models/resources-model';
export declare class ResourceBase {
    private parent;
    resourceCollection: ResourcesModel[];
    lastResourceLevel: TdData[];
    private colorIndex;
    private resourceTreeLevel;
    private treeViewObj;
    private treePopup;
    private popupOverlay;
    private leftPixel;
    constructor(parent: Schedule);
    renderResourceHeaderIndent(tr: Element): void;
    hideResourceRows(tBody: Element): void;
    createResourceColumn(): Element;
    getContentRows(resData: TdData[]): Element[];
    private setMargin(element, value);
    private countCalculation(parentCollection, wholeCollection);
    onTreeIconClick(e: Event): void;
    renderResourceHeader(): void;
    renderResourceTree(): void;
    private generateTreeData(isTimeLine?);
    private renderResourceHeaderText();
    private menuClick(event);
    private resourceClick(event);
    private documentClick(args);
    bindResourcesData(isSetModel: boolean): void;
    private dataManagerSuccess(e, isSetModel);
    setResourceCollection(): void;
    generateResourceLevels(innerDates: TdData[], isTimeLine?: boolean): TdData[][];
    generateCustomHours(renderDates: TdData[], startHour: string, endHour: string, groupOrder?: string[]): TdData[];
    private generateHeaderLevels(resTreeGroup, lastColumnDates, headerDates);
    setResourceValues(eventObj: {
        [key: string]: Object;
    }, isCrud: boolean): void;
    getResourceColor(eventObj: {
        [key: string]: Object;
    }, groupOrder?: string[]): string;
    getCssClass(eventObj: {
        [key: string]: Object;
    }): string;
    private filterData(dataSource, field, operator, value);
    private dataManagerFailure(e);
    getResourceData(eventObj: {
        [key: string]: Object;
    }, index: number, groupEditIndex: number[]): void;
    addResource(resources: Object, name: string, index: number): void;
    removeResource(resourceId: string | number, name: string): void;
    destroy(): void;
}
