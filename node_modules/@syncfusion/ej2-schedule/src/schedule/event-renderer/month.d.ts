import { EventFieldsMapping, TdData } from '../base/interface';
import { Schedule } from '../base/schedule';
import { EventBase } from './event-base';
/**
 * Month view events render
 */
export declare class MonthEvent extends EventBase {
    element: HTMLElement;
    fields: EventFieldsMapping;
    dateRender: Date[];
    renderedEvents: Object[];
    eventHeight: number;
    private monthHeaderHeight;
    workCells: HTMLElement[];
    cellWidth: number;
    cellHeight: number;
    moreIndicatorHeight: number;
    /**
     * Constructor for month events
     */
    constructor(parent: Schedule);
    renderAppointments(): void;
    renderEventsHandler(dateRender: Date[], workDays: number[], resData?: TdData): void;
    updateIndicatorIcon(event: {
        [key: string]: Object;
    }): void;
    renderResourceEvents(): void;
    getSlotDates(workDays?: number[]): void;
    private getElementHeightFromClass(container, elementClass);
    createAppointmentElement(record: {
        [key: string]: Object;
    }, resIndex: number): HTMLElement;
    private appendEventIcons(record, appointmentDetails);
    renderEvents(event: {
        [key: string]: Object;
    }, resIndex: number): void;
    getFilteredEvents(startDate: Date, endDate: Date, groupIndex: string): Object[];
    getOverlapEvents(date: Date, appointments: {
        [key: string]: Object;
    }[]): Object[];
    getIndex(date: Date): number;
    moreIndicatorClick(event: Event): void;
    renderEventElement(event: {
        [key: string]: Object;
    }, appointmentElement: HTMLElement, cellTd: Element): void;
    renderElement(cellTd: HTMLElement | Element, element: HTMLElement): void;
    getMoreIndicatorElement(count: number, startDate: Date, endDate: Date): HTMLElement;
}
