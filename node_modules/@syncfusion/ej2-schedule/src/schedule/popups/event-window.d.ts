import { Dialog } from '@syncfusion/ej2-popups';
import { Schedule } from '../base/schedule';
import { CurrentAction } from '../base/type';
import { RecurrenceEditor } from '../../recurrence-editor/recurrence-editor';
/**
 * Event editor window
 */
export declare class EventWindow {
    private parent;
    dialogObject: Dialog;
    private element;
    private fields;
    private l10n;
    private eventData;
    private fieldValidator;
    private recurrenceEditor;
    private repeatDialogObject;
    private repeatTempRule;
    private repeatRule;
    private repeatStatus;
    private buttonObj;
    private repeatStartDate;
    private cellClickAction;
    private timezone;
    private duration;
    /**
     * Constructor for event window
     */
    constructor(parent: Schedule);
    private renderEventWindow();
    refresh(): void;
    openEditor(data: Object, type: CurrentAction): void;
    setDialogContent(): void;
    private onBeforeOpen(args);
    private onBeforeClose();
    private getEventWindowContent();
    private getDefaultEventWindowContent();
    private createRecurrenceEditor(parentDiv);
    private createDivElement(className?);
    private createInputElement(className, fieldName, type?);
    private getSlotDuration();
    private renderDateTimePicker(value, changeEvent?);
    refreshDateTimePicker(duration?: number): void;
    private onTimeChange();
    private renderMultiSelect(index);
    private renderDropDown(value);
    private onMultiselectResourceChange(args);
    private createInstance(index);
    private onDropdownResourceChange(args);
    private filterDatasource(index, groupId);
    private onTimezoneChange();
    private renderCheckBox(value);
    private renderTextBox(value);
    private getFieldName(name);
    private getFieldLabel(fieldName);
    private onChange(args);
    private renderRepeatDialog();
    private loadRecurrenceEditor();
    private onRepeatChange(state);
    private repeatSaveDialog();
    private closeRepeatDialog();
    private repeatCancelDialog();
    private repeatOpenDialog();
    private onCellDetailsUpdate(event);
    private applyFormValidation();
    private showDetails(eventData);
    private getColumnName(element);
    private onAllDayChange(allDayStatus);
    private updateDateTime(allDayStatus, startObj, endObj);
    private getFormat(formatType);
    private onEventDetailsUpdate(eventObj);
    private renderRecurrenceEditor();
    private updateRepeatLabel(repeatRule);
    private dialogClose();
    private timezoneChangeStyle(value);
    private resetFormFields();
    eventSave(alert?: string): void;
    getObjectFromFormData(className: string): {
        [key: string]: Object;
    };
    private recurrenceValidation(startDate, endDate, alert);
    private getRecurrenceIndex(recColl, event);
    private editOccurrenceValidation(eventId, eventObj);
    private resourceSaveEvent(eventObj, action?, currentAction?);
    private getEventIdFromForm();
    private getFormElements(className);
    private getValueFromElement(element);
    private setValueToElement(element, value);
    private setDefaultValueToElement(element);
    private getInstance(className);
    private eventDelete();
    getRecurrenceEditorInstance(): RecurrenceEditor;
    private destroyComponents();
    /**
     * To destroy the event window.
     * @return {void}
     * @private
     */
    destroy(): void;
}
