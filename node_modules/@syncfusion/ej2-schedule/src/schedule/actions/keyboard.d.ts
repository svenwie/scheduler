import { Schedule } from '../base/schedule';
/**
 * Keyboard interaction
 */
export declare class KeyboardInteraction {
    /**
     * Constructor
     */
    private parent;
    private initialTarget;
    private selectedCells;
    private keyConfigs;
    private keyboardModule;
    constructor(parent: Schedule);
    private keyActionHandler(e);
    private addEventListener();
    private removeEventListener();
    private onCellMouseDown(e);
    onMouseSelection(e: Event): void;
    private getClosestCell(e);
    onAppointmentSelection(e: Event): void;
    private onMoveup(e);
    private processEnter(e);
    private getCells(isInverseTable, start, end);
    private focusFirstCell();
    private isInverseTableSelect();
    /** @hidden */
    selectCells(isMultiple: boolean, target: HTMLTableCellElement): void;
    private selectAppointment(isReverse, target);
    private selectAppointmentElementFromWorkCell(isReverse, target);
    private getAllDayCells(cells);
    private getAppointmentElements();
    private getAppointmentElementsByGuid(guid);
    private getUniqueAppointmentElements();
    private getWorkCellFromAppointmentElement(target);
    private processViewNavigation(e);
    private processUp(e, isMultiple);
    private processDown(e, isMultiple);
    private processLeftRight(target);
    private getQuickPopupElement();
    private isCancelLeftRightAction(e, isMultiple);
    private processRight(e, isMultiple);
    private processLeft(e, isMultiple);
    private calculateNextPrevDate(currentCell, target, type);
    private getFocusableElements(container);
    private processTabOnPopup(e, popupElement);
    private processTab(e, isReverse);
    private processDelete(e);
    private processEscape();
    private isPreventAction(e);
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the keyboard module.
     * @return {void}
     * @private
     */
    destroy(): void;
}
