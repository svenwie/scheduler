import { Underline, HighlightColor, BaselineAlignment, Strikethrough } from '../../base/types';
import { WUniqueFormat } from '../../base/unique-format';
import { WStyle } from './style';
/**
 * @private
 */
export declare class WCharacterFormat {
    uniqueCharacterFormat: WUniqueFormat;
    private static uniqueCharacterFormats;
    private static uniqueFormatType;
    ownerBase: Object;
    baseCharStyle: WStyle;
    bold: boolean;
    italic: boolean;
    fontSize: number;
    fontFamily: string;
    underline: Underline;
    strikethrough: Strikethrough;
    baselineAlignment: BaselineAlignment;
    highlightColor: HighlightColor;
    fontColor: string;
    constructor(node?: Object);
    getPropertyValue(property: string): Object;
    private getDefaultValue(property);
    private documentCharacterFormat();
    private checkBaseStyle(property);
    private checkCharacterStyle(property);
    private setPropertyValue(property, value);
    private initializeUniqueCharacterFormat(property, propValue);
    private addUniqueCharacterFormat(property, modifiedProperty, propValue, uniqueCharFormatTemp);
    private static getPropertyDefaultValue(property);
    isEqualFormat(format: WCharacterFormat): boolean;
    isSameFormat(format: WCharacterFormat): boolean;
    cloneFormat(): WCharacterFormat;
    private hasValue(property);
    clearFormat(): void;
    destroy(): void;
    copyFormat(format: WCharacterFormat): void;
    updateUniqueCharacterFormat(format: WCharacterFormat): void;
    static clear(): void;
    ApplyStyle(baseCharStyle: WStyle): void;
    /**
     * For internal use
     * @private
     */
    getValue(property: string): Object;
    /**
     * For internal use
     * @private
     */
    mergeFormat(format: WCharacterFormat): void;
}
