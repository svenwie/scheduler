import { FindOption } from '../../base/types';
import { TextSearchResult } from './text-search-result';
import { TextSearchResults } from './text-search-results';
import { DocumentEditor } from '../../document-editor';
import { LayoutViewer } from '../index';
/**
 * @private
 */
export declare class TextSearch {
    private wordBefore;
    private wordAfter;
    private owner;
    private isHeader;
    private isFooter;
    readonly viewer: LayoutViewer;
    constructor(owner: DocumentEditor);
    find(pattern: string | RegExp, findOption?: FindOption): TextSearchResult;
    findNext(pattern: string | RegExp, findOption?: FindOption, hierarchicalPosition?: string): TextSearchResult;
    stringToRegex(textToFind: string, option: FindOption): RegExp;
    isPatternEmpty(pattern: RegExp): boolean;
    findAll(pattern: string | RegExp, findOption?: FindOption, hierarchicalPosition?: string): TextSearchResults;
    private findDocument(results, pattern, isFirstMatch, findOption?, hierachicalPosition?);
    private findInlineText(section, pattern, findOption, isFirstMatch, results, selectionEnd);
    private findInline(inlineElement, pattern, option, indexInInline, isFirstMatch, results, selectionEnd);
    private getTextPosition(lineWidget, hierarchicalIndex);
}
/**
 * @private
 */
export declare class SearchWidgetInfo {
    private leftInternal;
    private widthInternal;
    left: number;
    width: number;
    constructor(left: number, width: number);
}
