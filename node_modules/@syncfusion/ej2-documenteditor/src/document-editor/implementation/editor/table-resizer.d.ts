import { TableWidget, TableCellWidget, TableRowWidget } from '../index';
import { DocumentEditor } from '../../document-editor';
import { Point } from './editor-helper';
import { LayoutViewer } from '../index';
import { TableHistoryInfo } from '../index';
/**
 * @private
 */
export declare class TableResizer {
    owner: DocumentEditor;
    resizeNode: number;
    resizerPosition: number;
    currentResizingTable: TableWidget;
    startingPoint: Point;
    /**
     * @private
     */
    readonly viewer: LayoutViewer;
    /**
     * @private
     */
    constructor(node: DocumentEditor);
    /**
     * Gets module name.
     */
    private getModuleName();
    /**
     * @private
     */
    updateResizingHistory(touchPoint: Point): void;
    handleResize(point: Point): void;
    /**
     * @private
     */
    isInRowResizerArea(touchPoint: Point): boolean;
    isInCellResizerArea(touchPoint: Point): boolean;
    /**
     * Gets cell resizer position.
     * @param {Point} point
     * @private
     */
    getCellReSizerPosition(touchPoint: Point): number;
    /**
     * Gets cell resizer position.
     * @param {TableCellWidget} cellWidget
     * @param {Point} touchPoint
     */
    private getCellReSizerPositionInternal(cellWidget, touchPoint);
    private getRowReSizerPosition(widget, touchPoint);
    /**
     * To handle Table Row and cell resize
     * @param touchPoint
     * @private
     */
    handleResizing(touchPoint: Point): void;
    resizeTableRow(dragValue: number): void;
    /**
     * Gets the table widget from given cursor point
     * @param cursorPoint
     */
    private getTableWidget(cursorPoint);
    private getTableWidgetFromWidget(point, widget);
    /**
     * Return the table cell widget from the given cursor point
     * @param cursorPoint
     * @private
     */
    getTableCellWidget(cursorPoint: Point): TableCellWidget;
    updateRowHeight(row: TableRowWidget, dragValue: number): void;
    resizeTableCellColumn(dragValue: number): void;
    /**
     * Resize Selected Cells
     */
    private resizeColumnWithSelection(selection, table, dragValue);
    /**
     * Resize selected cells at resizer position 0
     */
    private resizeColumnAtStart(table, dragValue, selectedCells);
    private updateWidthForCells(table, selectedCells, dragValue);
    /**
     * Resize selected cells at last column
     */
    private resizeColumnAtLastColumnIndex(table, dragValue, containerWidth);
    /**
     *  Resize selected cells at middle column
     */
    private resizeCellAtMiddle(table, dragValue);
    updateGridValue(table: TableWidget, isUpdate: boolean, dragValue?: number): void;
    private getColumnCells(table, columnIndex, isLeftSideCollection);
    private updateGridBefore(row, offset);
    private getLeastGridBefore(table, ignoreRow);
    private increaseOrDecreaseWidth(cell, dragValue, isIncrease);
    private changeWidthOfCells(table, leftColumnCollection, rightColumnCollection, dragValue, isSelection);
    private updateRowsGridAfterWidth(table);
    private getRowWidth(row, toUpdateGridAfter);
    private getMaxRowWidth(table, toUpdateGridAfter);
    private isColumnSelected(table, columnIndex);
    applyProperties(table: TableWidget, tableHistoryInfo: TableHistoryInfo): void;
    /**
     * Return table row width
     */
    private getActualWidth(row);
    setPreferredWidth(table: TableWidget): void;
    private updateCellPreferredWidths(table);
    /**
     * Update grid before width value
     */
    private updateGridBeforeWidth(width, row);
    /**
     * Update grid after width value
     */
    updateGridAfterWidth(width: number, row: TableRowWidget): void;
}
