import { WStyles } from '../format/index';
import { LayoutViewer } from './viewer';
import { Widget, BodyWidget, BlockWidget, HeaderFooters } from './page';
/**
 * @private
 */
export declare class SfdtReader {
    private viewer;
    private fieldSeparator;
    private readonly isPasting;
    constructor(viewer: LayoutViewer);
    /**
     * @private
     * @param json
     */
    convertJsonToDocument(json: string): BodyWidget[];
    private parseStyles(data, styles);
    parseStyle(data: any, style: any, styles: WStyles): void;
    private getStyle(name, data);
    private parseAbstractList(data, abstractLists);
    private parseListLevel(data, owner);
    private parseList(data, listCollection);
    private parseLevelOverride(data, list);
    private parseSections(data, sections);
    /**
     * @private
     */
    parseHeaderFooter(data: any, headersFooters: any): HeaderFooters;
    private parseTextBody(data, section);
    parseBody(data: any, blocks: BlockWidget[], container?: Widget): void;
    private parseTable(block, blocks, index, section);
    private parseRowGridValues(data, rowFormat);
    private parseParagraph(data, paragraph, writeInlineFormat?);
    private parseTableFormat(sourceFormat, tableFormat);
    private parseCellFormat(sourceFormat, cellFormat);
    private parseCellMargin(sourceFormat, cellFormat);
    private parseRowFormat(sourceFormat, rowFormat);
    private parseBorders(sourceBorders, destBorder);
    private parseBorder(sourceBorder, destBorder);
    private parseShading(sourceShading, destShading);
    private parseCharacterFormat(sourceFormat, characterFormat, writeInlineFormat?);
    private getColor(color);
    private parseParagraphFormat(sourceFormat, paragraphFormat);
    private parseListFormat(block, listFormat);
    private parseSectionFormat(data, sectionFormat);
    private parseTabStop(wTabs, tabs);
}
