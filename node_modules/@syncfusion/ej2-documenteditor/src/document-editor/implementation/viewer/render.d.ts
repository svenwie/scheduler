import { Page, TableRowWidget, TableWidget } from './page';
import { LayoutViewer } from './viewer';
/**
 * @private
 */
export declare class Renderer {
    isPrinting: boolean;
    private pageLeft;
    private pageTop;
    private viewer;
    private pageCanvasIn;
    private isFieldCode;
    /**
     * Gets page canvas.
     * @private
     */
    readonly pageCanvas: HTMLCanvasElement;
    /**
     * Gets selection canvas.
     */
    private readonly selectionCanvas;
    /**
     * Gets page context.
     */
    private readonly pageContext;
    /**
     * Gets selection context.
     */
    private readonly selectionContext;
    constructor(viewer: LayoutViewer);
    /**
     * Gets the color.
     */
    private getColor(color);
    /**
     * Renders widgets.
     * @param {Page} page
     * @param {number} left
     * @param {number} top
     * @param {number} width
     * @param {number} height
     * @private
     */
    renderWidgets(page: Page, left: number, top: number, width: number, height: number): void;
    /**
     * Sets page size.
     * @param {Page} page
     */
    private setPageSize(page);
    /**
     * Renders header footer widget.
     * @param {Page} page
     * @param {HeaderFooterWidget} headFootWidget
     */
    private renderHFWidgets(page, widget, width, isHeader);
    private renderHeaderSeparator(page, left, top, widget);
    private getHeaderFooterType(page, isHeader);
    private renderDashLine(ctx, x, y, width);
    private renderHeaderFooterMark(ctx, x, y, w, h);
    private renderHeaderFooterMarkText(ctx, content, x, y);
    /**
     * Renders body widget.
     * @param {Page} page
     * @param {BodyWidget} bodyWidget
     */
    private render(page, bodyWidget);
    /**
     * Renders block widget.
     * @param {Page} page
     * @param {Widget} widget
     */
    private renderWidget(page, widget);
    /**
     * Renders header.
     * @param {Page} page
     * @param {TableWidget} widget
     * @param {WRow} header
     * @private
     */
    renderHeader(page: Page, widget: TableWidget, header: TableRowWidget): void;
    /**
     * Renders paragraph widget.
     * @param {Page} page
     * @param {ParagraphWidget} paraWidget
     */
    private renderParagraphWidget(page, paraWidget);
    /**
     * Renders table widget.
     * @param {Page} page
     * @param {TableWidget} tableWidget
     */
    private renderTableWidget(page, tableWidget);
    /**
     * Renders table row widget.
     * @param {Page} page
     * @param {Widget} rowWidget
     */
    private renderTableRowWidget(page, rowWidget);
    /**
     * Renders table cell widget.
     * @param {Page} page
     * @param {TableCellWidget} cellWidget
     */
    private renderTableCellWidget(page, cellWidget);
    /**
     * Renders line widget.
     * @param {LineWidget} lineWidget
     * @param {Page} page
     * @param {number} left
     * @param {number} top
     */
    private renderLine(lineWidget, page, left, top);
    private toSkipFieldCode(element);
    /**
     * Gets underline y position.
     * @param {LineWidget} lineWidget
     */
    private getUnderlineYPosition(lineWidget);
    /**
     * Renders list element box
     * @param {ListTextElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     */
    private renderListTextElementBox(elementBox, left, top, underlineY);
    /**
     * Renders text element box.
     * @param {TextElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     */
    private renderTextElementBox(elementBox, left, top, underlineY);
    /**
     * Returns tab leader
     */
    private getTabLeader(elementBox);
    /**
     * Returns tab leader string.
     */
    private getTabLeaderString(tabLeader);
    /**
     * Clips the rectangle with specified position.
     * @param {number} xPos
     * @param {number} yPos
     * @param {number} width
     * @param {number} height
     */
    private clipRect(xPos, yPos, width, height);
    /**
     * Renders underline.
     * @param {ElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     * @param {string} color
     * @param {Underline} underline
     * @param {BaselineAlignment} baselineAlignment
     */
    private renderUnderline(elementBox, left, top, underlineY, color, underline, baselineAlignment);
    /**
     * Renders strike through.
     * @param {ElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {Strikethrough} strikethrough
     * @param {string} color
     * @param {BaselineAlignment} baselineAlignment
     */
    private renderStrikeThrough(elementBox, left, top, strikethrough, color, baselineAlignment);
    /**
     * Renders image element box.
     * @param {ImageElementBox} elementBox
     * @param {number} left
     * @param {number} top
     * @param {number} underlineY
     */
    private renderImageElementBox(elementBox, left, top, underlineY);
    /**
     * Renders table outline.
     * @param {TableWidget} tableWidget
     */
    private renderTableOutline(tableWidget);
    /**
     * Renders table cell outline.
     * @param {LayoutViewer} viewer
     * @param {TableCellWidget} cellWidget
     */
    private renderTableCellOutline(viewer, cellWidget);
    /**
     * Renders cell background.
     * @param {number} height
     * @param {TableCellWidget} cellWidget
     */
    private renderCellBackground(height, cellWidget);
    /**
     * Renders single border.
     * @param {WBorder} border
     * @param {number} startX
     * @param {number} startY
     * @param {number} endX
     * @param {number} endY
     * @param {number} lineWidth
     */
    private renderSingleBorder(border, startX, startY, endX, endY, lineWidth);
    /**
     * Gets scaled value.
     * @param {number} value
     * @param {number} type
     * @private
     */
    getScaledValue(value: number, type?: number): number;
    /**
     * Destroys the internal objects which is maintained.
     */
    destroy(): void;
}
