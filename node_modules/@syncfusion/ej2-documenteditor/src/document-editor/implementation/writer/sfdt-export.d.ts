import { WListFormat, WCharacterFormat } from '../format/index';
import { LayoutViewer } from '../index';
import { LineWidget } from '../viewer/page';
/**
 * Exports the document to Sfdt format.
 */
export declare class SfdtExport {
    private endLine;
    private endOffset;
    private endCell;
    private startColumnIndex;
    private endColumnIndex;
    private lists;
    private viewer;
    private document;
    private writeInlineStyles;
    /**
     * @private
     */
    constructor(owner: LayoutViewer);
    private getModuleName();
    private clear();
    /**
     * Serialize the data as Syncfusion document text.
     * @private
     */
    serialize(): string;
    /**
     * @private
     */
    saveAsBlob(viewer: LayoutViewer): Promise<Blob>;
    /**
     * @private
     */
    write(line?: LineWidget, startOffset?: number, endLine?: LineWidget, endOffset?: number, writeInlineStyles?: boolean): any;
    private writeBodyWidget(bodyWidget, index);
    private writeHeaderFooters(hfs, section);
    private writeHeaderFooter(widget);
    private createSection(bodyWidget);
    private writeBlock(widget, index, blocks);
    private writeNextBlock(widget, blocks);
    private writeParagraph(paragraphWidget, paragraph, blocks, lineIndex?, start?);
    private writeInlines(line, inlines);
    private writeInline(element);
    private writeLines(paragraph, lineIndex, offset, inlines);
    private writeLine(line, offset, inlines);
    private createParagraph(paragraphWidget);
    /**
     * @private
     */
    writeCharacterFormat(format: WCharacterFormat, isInline?: boolean): any;
    private writeParagraphFormat(format, isInline?);
    private writeTabs(tabStops);
    /**
     * @private
     */
    writeListFormat(format: WListFormat, isInline?: boolean): any;
    private writeTable(tableWidget, table, index, blocks);
    private writeRow(rowWidget, rows);
    private writeCell(cellWidget, cells);
    private createTable(tableWidget);
    private createRow(rowWidget);
    private createCell(cellWidget);
    private writeShading(wShading);
    private writeBorder(wBorder);
    private writeBorders(wBorders);
    private writeCellFormat(wCellFormat);
    private writeRowFormat(wRowFormat);
    private writeTableFormat(wTableFormat);
    private writeStyles(viewer);
    private writeStyle(style);
    private writeLists(viewer);
    private writeAbstractList(wAbstractList);
    private writeList(wList);
    private writeListLevel(wListLevel);
    /**
     * @private
     */
    destroy(): void;
}
