import { markerRendering, convertTileLatLongToPoint, MapLocation } from '../index';
import { markerClick, markerMouseMove } from '../index';
import { isNullOrUndefined, merge, createElement } from '@syncfusion/ej2-base';
import { CircleOption, PathOption, Point, getTranslate, convertGeoToPoint } from '../utils/helper';
import { getTemplateFunction, getElementByID, convertElement, calculateShapes, Size, RectOption, Rect, elementAnimate } from '../utils/helper';
/**
 * Marker class
 */
var Marker = /** @class */ (function () {
    function Marker(maps) {
        this.maps = maps;
        this.trackElements = [];
    }
    /* tslint:disable:no-string-literal */
    Marker.prototype.markerRender = function (layerElement, layerIndex, factor) {
        var _this = this;
        var templateFn;
        var currentLayer = this.maps.layersCollection[layerIndex];
        this.markerSVGObject = this.maps.renderer.createGroup({ id: this.maps.element.id + '_Markers_Group',
            style: 'pointer-events: auto;' });
        var markerTemplateEle = createElement('div', {
            id: this.maps.element.id + '_LayerIndex_' + layerIndex + '_Markers_Template_Group',
            className: 'template',
            styles: 'overflow: hidden; position: absolute;pointer-events: none;' +
                'top:' + (this.maps.isTileMap ? 0 : this.maps.mapAreaRect.y) + 'px;' +
                'left:' + (this.maps.isTileMap ? 0 : this.maps.mapAreaRect.x) + 'px;' +
                'height:' + this.maps.mapAreaRect.height + 'px;' +
                'width:' + this.maps.mapAreaRect.width + 'px;'
        });
        currentLayer.markerSettings.map(function (markerSettings, markerIndex) {
            var markerData = markerSettings.dataSource;
            markerData.forEach(function (data, dataIndex) {
                var eventArgs = {
                    cancel: false, name: markerRendering, fill: markerSettings.fill, height: markerSettings.height,
                    width: markerSettings.width, imageUrl: markerSettings.imageUrl, shape: markerSettings.shape,
                    template: markerSettings.template, data: data, maps: _this.maps, marker: markerSettings,
                    border: markerSettings.border
                };
                _this.maps.trigger(markerRendering, eventArgs);
                var lng = data['longitude'];
                var lat = data['latitude'];
                var offset = markerSettings.offset;
                if (!eventArgs.cancel && markerSettings.visible && !isNullOrUndefined(lng) && !isNullOrUndefined(lat)) {
                    var markerID = _this.maps.element.id + '_LayerIndex_' + layerIndex + '_MarkerIndex_'
                        + markerIndex + '_DataIndex_' + dataIndex;
                    var location_1 = (_this.maps.isTileMap) ? convertTileLatLongToPoint(new MapLocation(lng, lat), factor, _this.maps.tileTranslatePoint, true) : convertGeoToPoint(lat, lng, factor, currentLayer, _this.maps);
                    var animate = currentLayer.animationDuration !== 0 || isNullOrUndefined(_this.maps.zoomModule);
                    var translate = (_this.maps.isTileMap) ? new Object() : getTranslate(_this.maps, currentLayer, animate);
                    var scale = translate['scale'];
                    var transPoint = translate['location'];
                    if (eventArgs.template) {
                        templateFn = getTemplateFunction(eventArgs.template);
                        if (templateFn && templateFn(_this.maps).length) {
                            var templateElement = templateFn(_this.maps);
                            var markerElement = convertElement(templateElement, markerID, data, markerIndex, _this.maps);
                            for (var i = 0; i < markerElement.children.length; i++) {
                                markerElement.children[i].style.pointerEvents = 'none';
                            }
                            markerElement.style.left = ((_this.maps.isTileMap ? location_1.x :
                                ((Math.abs(_this.maps.baseMapRectBounds['min']['x'] - location_1.x)) * scale)) + offset.x) + 'px';
                            markerElement.style.top = ((_this.maps.isTileMap ? location_1.y :
                                ((Math.abs(_this.maps.baseMapRectBounds['min']['y'] - location_1.y)) * scale)) + offset.y) + 'px';
                            markerTemplateEle.appendChild(markerElement);
                        }
                    }
                    else {
                        var shapeCustom = {
                            size: new Size(eventArgs.width, eventArgs.height),
                            fill: eventArgs.fill, borderColor: eventArgs.border.color,
                            borderWidth: eventArgs.border.width, opacity: markerSettings.opacity,
                            dashArray: markerSettings.dashArray
                        };
                        var ele = _this.drawSymbol(eventArgs.shape, eventArgs.imageUrl, { x: 0, y: 0 }, markerID, shapeCustom);
                        var x = (_this.maps.isTileMap ? location_1.x : (location_1.x + transPoint.x) * scale) + offset.x;
                        var y = (_this.maps.isTileMap ? location_1.y : (location_1.y + transPoint.y) * scale) + offset.y;
                        ele.setAttribute('transform', 'translate( ' + x + ' ' + y + ' )');
                        _this.markerSVGObject.appendChild(ele);
                        var element = (markerData.length - 1) === dataIndex ? 'marker' : null;
                        var markerPoint = new Point(x, y);
                        if (markerSettings.animationDuration > 0) {
                            elementAnimate(ele, markerSettings.animationDelay, markerSettings.animationDuration, markerPoint, _this.maps, element);
                        }
                    }
                }
            });
        });
        if (this.markerSVGObject.childElementCount > 0) {
            layerElement.appendChild(this.markerSVGObject);
        }
        if (markerTemplateEle.childElementCount > 0 && getElementByID(this.maps.element.id + '_Secondary_Element')) {
            getElementByID(this.maps.element.id + '_Secondary_Element').appendChild(markerTemplateEle);
        }
    };
    Marker.prototype.drawSymbol = function (shape, imageUrl, location, markerID, shapeCustom) {
        var markerEle;
        var x;
        var y;
        var size = shapeCustom['size'];
        var borderColor = shapeCustom['borderColor'];
        var borderWidth = parseFloat(shapeCustom['borderWidth']);
        var fill = shapeCustom['fill'];
        var dashArray = shapeCustom['dashArray'];
        var border = { color: borderColor, width: borderWidth };
        var opacity = shapeCustom['opacity'];
        var circleOptions;
        var pathOptions;
        var rectOptions;
        pathOptions = new PathOption(markerID, fill, borderWidth, borderColor, opacity, dashArray, '');
        if (shape === 'Circle') {
            var radius = (size.width + size.height) / 4;
            circleOptions = new CircleOption(markerID, fill, border, opacity, location.x, location.y, radius, dashArray);
            markerEle = this.maps.renderer.drawCircle(circleOptions);
        }
        else if (shape === 'Rectangle') {
            x = location.x - (size.width / 2);
            y = location.y - (size.height / 2);
            rectOptions = new RectOption(markerID, fill, border, opacity, new Rect(x, y, size.width, size.height), null, null, '', dashArray);
            markerEle = this.maps.renderer.drawRectangle(rectOptions);
        }
        else if (shape === 'Image') {
            x = location.x - (size.width / 2);
            y = location.y - (size.height / 2);
            merge(pathOptions, { 'href': imageUrl, 'height': size.height, 'width': size.width, x: x, y: y });
            markerEle = this.maps.renderer.drawImage(pathOptions);
        }
        else {
            markerEle = calculateShapes(this.maps, shape, pathOptions, size, location, this.markerSVGObject);
        }
        return markerEle;
    };
    /**
     * To check and trigger marker click event
     */
    Marker.prototype.markerClick = function (e) {
        var target = e.target.id;
        if (target.indexOf('_LayerIndex_') === -1) {
            return;
        }
        var options = this.getMarker(target);
        if (isNullOrUndefined(options)) {
            return;
        }
        var eventArgs = {
            cancel: false, name: markerClick, data: options.data, maps: this.maps, marker: options.marker,
            target: target, x: e.clientX, y: e.clientY
        };
        this.maps.trigger(markerClick, eventArgs);
    };
    /**
     * To get marker from target id
     */
    Marker.prototype.getMarker = function (target) {
        var id = target.split('_LayerIndex_');
        var index = parseInt(id[1].split('_')[0], 10);
        var layer = this.maps.layers[index];
        var data;
        var marker;
        if (target.indexOf('_MarkerIndex_') > -1) {
            var markerIndex = parseInt(id[1].split('_MarkerIndex_')[1].split('_')[0], 10);
            var dataIndex = parseInt(id[1].split('_DataIndex_')[1].split('_')[0], 10);
            marker = layer.markerSettings[markerIndex];
            if (!isNaN(markerIndex)) {
                data = marker.dataSource[dataIndex];
                return { marker: marker, data: data };
            }
        }
        return null;
    };
    /**
     * To check and trigger marker move event
     */
    Marker.prototype.markerMove = function (e) {
        var targetId = e.target.id;
        if (targetId.indexOf('_LayerIndex_') === -1) {
            return;
        }
        var options = this.getMarker(targetId);
        if (isNullOrUndefined(options)) {
            return;
        }
        var eventArgs = {
            cancel: false, name: markerMouseMove, data: options.data, maps: this.maps,
            target: targetId, x: e.clientX, y: e.clientY
        };
        this.maps.trigger(markerMouseMove, eventArgs);
    };
    /**
     * Get module name.
     */
    Marker.prototype.getModuleName = function () {
        return 'Marker';
    };
    /**
     * To destroy the layers.
     * @return {void}
     * @private
     */
    Marker.prototype.destroy = function (maps) {
        /**
         * Destroy method performed here
         */
    };
    return Marker;
}());
export { Marker };
