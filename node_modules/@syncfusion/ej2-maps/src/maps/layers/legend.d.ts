import { Maps } from '../../index';
/**
 * Legend module is used to render legend for the maps
 */
export declare class Legend {
    legendCollection: Object[];
    legendRenderingCollections: Object[];
    private legendHeight;
    private legendWidth;
    private translate;
    private legendBorderRect;
    private maps;
    private totalPages;
    private page;
    private currentPage;
    private interactiveLocation;
    private legendItemRect;
    private heightIncrement;
    private widthIncrement;
    private textMaxWidth;
    private legendGroup;
    private previousId;
    private areaRect;
    constructor(maps: Maps);
    /**
     * To calculate legend bounds and draw the legend shape and text.
     */
    renderLegend(): void;
    calculateLegendBounds(): void;
    /**
     *
     */
    private getLegends(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);
    private getPageChanged();
    /**
     * To draw the legend shape and text.
     */
    drawLegend(): void;
    private drawLegendItem(page);
    private renderLegendBorder();
    changeNextPage(e: PointerEvent): void;
    private getLegendAlignment(map, width, height, legend);
    private getMarkersLegendCollections(layerIndex, markers);
    private getRangeLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);
    private getOverallLegendItemsCollection(legendText, legendFill, legendData);
    private getEqualLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);
    private getDataLegendCollection(layerIndex, layerData, colorMapping, dataSource, dataPath, colorValuePath, propertyPath);
    interactiveHandler(e: PointerEvent): void;
    private renderInteractivePointer(legend, fill, stroke, id, strokeWidth, rect);
    wireEvents(element: Element): void;
    addEventListener(): void;
    removeEventListener(): void;
    private getLegendData(layerIndex, dataIndex, data, dataPath, layerData, shapePropertyPath, value);
    /**
     * Get module name.
     */
    protected getModuleName(): string;
    /**
     * To destroy the legend.
     * @return {void}
     * @private
     */
    destroy(maps: Maps): void;
}
