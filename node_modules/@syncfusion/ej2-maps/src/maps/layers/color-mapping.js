import { isNullOrUndefined } from '@syncfusion/ej2-base';
/**
 * ColorMapping class
 */
var ColorMapping = /** @class */ (function () {
    function ColorMapping(maps) {
        this.maps = maps;
    }
    /**
     * To get color based on shape settings.
     * @private
     */
    ColorMapping.prototype.getShapeColorMapping = function (shapeSettings, layerData, color) {
        var colorValuePath = shapeSettings.colorValuePath ? shapeSettings.colorValuePath : shapeSettings.valuePath;
        var equalValue = layerData[colorValuePath];
        var colorValue = Number(equalValue);
        var shapeColor = this.getColorByValue(shapeSettings.colorMapping, colorValue, equalValue);
        return shapeColor ? shapeColor : color;
    };
    /**
     * To color by value and color mapping
     */
    ColorMapping.prototype.getColorByValue = function (colorMapping, colorValue, equalValue) {
        if (isNaN(colorValue) && isNullOrUndefined(equalValue)) {
            return null;
        }
        var fill = '';
        for (var _i = 0, colorMapping_1 = colorMapping; _i < colorMapping_1.length; _i++) {
            var colorMap = colorMapping_1[_i];
            if ((colorMap.from && colorMap.to && (colorValue >= colorMap.from && colorValue <= colorMap.to)) ||
                (colorMap.value === equalValue)) {
                fill = colorMap.color;
            }
        }
        return fill || ((!colorMapping.length) ? equalValue : null);
    };
    return ColorMapping;
}());
export { ColorMapping };
