define(["require", "exports", "./value-formatter"], function (require, exports, value_formatter_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CsvHelper = (function () {
        function CsvHelper(json) {
            this.csvStr = '';
            this.formatter = new value_formatter_1.ValueFormatter();
            this.isMicrosoftBrowser = !(!navigator.msSaveBlob);
            if (json.styles !== null && json.styles !== undefined) {
                this.globalStyles = new Map();
                for (var i = 0; i < json.styles.length; i++) {
                    if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {
                        this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);
                    }
                }
            }
            if (json.worksheets !== null && json.worksheets !== undefined) {
                this.parseWorksheet(json.worksheets[0]);
            }
        }
        CsvHelper.prototype.parseWorksheet = function (json) {
            if (json.rows !== null && json.rows !== undefined) {
                this.parseRows(json.rows);
            }
        };
        CsvHelper.prototype.parseRows = function (rows) {
            var count = 1;
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                if (row.index !== null && row.index !== undefined) {
                    while (count < row.index) {
                        this.csvStr += '\n';
                        count++;
                    }
                    this.parseRow(row);
                }
                else {
                    throw Error('Row index is missing.');
                }
            }
        };
        CsvHelper.prototype.parseRow = function (row) {
            if (row.cells !== null && row.cells !== undefined) {
                var count = 1;
                for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
                    var cell = _a[_i];
                    if (cell.index !== null && cell.index !== undefined) {
                        while (count < cell.index) {
                            this.csvStr += ',';
                            count++;
                        }
                        this.parseCell(cell);
                    }
                    else {
                        throw Error('Cell index is missing.');
                    }
                }
            }
        };
        CsvHelper.prototype.parseCell = function (cell) {
            var csv = this.csvStr;
            if (cell.value !== undefined) {
                if (cell.value instanceof Date) {
                    if (cell.style !== undefined && cell.style.numberFormat !== undefined) {
                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: cell.style.numberFormat }));
                    }
                    else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {
                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: this.globalStyles.get(cell.style.name) }));
                    }
                    else {
                        csv += cell.value;
                    }
                }
                else if (typeof (cell.value) === 'boolean') {
                    csv += cell.value ? 'TRUE' : 'FALSE';
                }
                else if (typeof (cell.value) === 'number') {
                    if (cell.style !== undefined && cell.style.numberFormat !== undefined) {
                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat }));
                    }
                    else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {
                        csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name) }));
                    }
                    else {
                        csv += cell.value;
                    }
                }
                else {
                    csv += this.parseCellValue(cell.value);
                }
            }
            this.csvStr = csv;
        };
        CsvHelper.prototype.parseCellValue = function (value) {
            if (value.indexOf(',') !== -1) {
                return value = '\"' + value + '\"';
            }
            else {
                return value;
            }
        };
        CsvHelper.prototype.save = function (fileName) {
            this.buffer = new Blob(['\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });
            if (this.isMicrosoftBrowser) {
                navigator.msSaveBlob(this.buffer, fileName);
            }
            else {
                var dataUrl_1 = window.URL.createObjectURL(this.buffer);
                var dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');
                dwlLink.download = fileName;
                dwlLink.href = dataUrl_1;
                var event_1 = document.createEvent('MouseEvent');
                event_1.initEvent('click', true, true);
                dwlLink.dispatchEvent(event_1);
                setTimeout(function () {
                    window.URL.revokeObjectURL(dataUrl_1);
                });
            }
        };
        CsvHelper.prototype.saveAsBlob = function () {
            return new Blob(['\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });
        };
        return CsvHelper;
    }());
    exports.CsvHelper = CsvHelper;
});
