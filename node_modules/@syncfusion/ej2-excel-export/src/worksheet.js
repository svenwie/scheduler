var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Worksheet = (function () {
        function Worksheet() {
            this.isSummaryRowBelow = true;
            this.showGridLines = true;
        }
        return Worksheet;
    }());
    exports.Worksheet = Worksheet;
    var HyperLink = (function () {
        function HyperLink() {
        }
        return HyperLink;
    }());
    exports.HyperLink = HyperLink;
    var Grouping = (function () {
        function Grouping() {
        }
        return Grouping;
    }());
    exports.Grouping = Grouping;
    var FreezePane = (function () {
        function FreezePane() {
        }
        return FreezePane;
    }());
    exports.FreezePane = FreezePane;
    var MergeCell = (function () {
        function MergeCell() {
        }
        return MergeCell;
    }());
    exports.MergeCell = MergeCell;
    var MergeCells = (function (_super) {
        __extends(MergeCells, _super);
        function MergeCells() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.add = function (mergeCell) {
                var inserted = false;
                var count = 0;
                for (var _i = 0, _a = _this; _i < _a.length; _i++) {
                    var mCell = _a[_i];
                    if (MergeCells.isIntersecting(mCell, mergeCell)) {
                        var intersectingCell = new MergeCell();
                        intersectingCell.x = Math.min(mCell.x, mergeCell.x);
                        intersectingCell.y = Math.min(mCell.Y, mergeCell.y);
                        intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);
                        intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);
                        intersectingCell.ref = (_this[count].ref.split(':')[0]) + ':' + (mergeCell.ref.split(':')[1]);
                        _this[count] = intersectingCell;
                        mergeCell = intersectingCell;
                        inserted = true;
                    }
                    count++;
                }
                if (!inserted) {
                    _this.push(mergeCell);
                }
                return mergeCell;
            };
            return _this;
        }
        MergeCells.isIntersecting = function (base, compare) {
            return (base.x <= compare.x + compare.width)
                && (compare.x <= base.x + base.width)
                && (base.y <= compare.y + compare.height)
                && (compare.y <= base.y + base.height);
        };
        return MergeCells;
    }(Array));
    exports.MergeCells = MergeCells;
});
