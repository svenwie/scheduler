import { IGrid, NotifyArgs } from '../base/interface';
import { ReturnType } from '../base/type';
import { Data } from '../actions/data';
import { ServiceLocator } from '../services/service-locator';
/**
 * Content module is used to render grid content
 * @hidden
 */
export declare class Render {
    private isColTypeDef;
    private parent;
    private locator;
    private headerRenderer;
    private contentRenderer;
    private l10n;
    data: Data;
    private ariaService;
    private renderer;
    private emptyGrid;
    private isLayoutRendered;
    /**
     * Constructor for render module
     */
    constructor(parent?: IGrid, locator?: ServiceLocator);
    /**
     * To initialize grid header, content and footer rendering
     */
    render(): void;
    /**
     * Refresh the entire Grid.
     * @return {void}
     */
    refresh(e?: NotifyArgs): void;
    private refreshComplete(e?);
    /**
     * The function is used to refresh the dataManager
     * @return {void}
     */
    private refreshDataManager(args?);
    private getFData(deferred);
    private isNeedForeignAction();
    private foreignKey(columns);
    private sendBulkRequest(args?);
    private dmSuccess(e, args);
    private dmFailure(e, args);
    /**
     * Render empty row to Grid which is used at the time to represent to no records.
     * @return {void}
     * @hidden
     */
    renderEmptyRow(): void;
    private emptyRow(isTrigger?);
    private dynamicColumnChange();
    private updateColumnType(record);
    private dataManagerSuccess(e, args?);
    private dataManagerFailure(e, args);
    private updatesOnInitialRender(e);
    private buildColumns(record);
    private instantiateRenderer();
    private addEventListener();
    /** @hidden */
    validateGroupRecords(e: ReturnType): Promise<Object>;
    private getPredicate(key, operator, value);
    private updateGroupInfo(current, untouched);
}
