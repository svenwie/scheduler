import { FilterSettings } from '../base/grid';
import { IGrid, IFilterArgs } from '../base/interface';
import { ContextMenu } from '@syncfusion/ej2-navigations';
import { ServiceLocator } from '../services/service-locator';
import { CheckBoxFilter } from '../actions/checkbox-filter';
/**
 * @hidden
 * `ExcelFilter` module is used to handle filtering action.
 */
export declare class ExcelFilter extends CheckBoxFilter {
    private datePicker;
    private dateTimePicker;
    private actObj;
    private numericTxtObj;
    private dlgDiv;
    private l10n;
    private dlgObj;
    private menuEle;
    private customFilterOperators;
    private dropOptr;
    private optrData;
    private menuItem;
    private menu;
    private cmenu;
    protected menuObj: ContextMenu;
    private isCMenuOpen;
    /**
     * Constructor for excel filtering module
     * @hidden
     */
    constructor(parent?: IGrid, filterSettings?: FilterSettings, serviceLocator?: ServiceLocator, customFltrOperators?: Object);
    private getCMenuDS(type, operator?);
    /**
     * To destroy the filter bar.
     * @return {void}
     * @hidden
     */
    destroy(): void;
    private createMenu(type, isFiltered, isCheckIcon);
    private createMenuElem(val, className?, iconName?, isSubMenu?);
    private wireExEvents();
    private unwireExEvents();
    private clickExHandler(e);
    private destroyCMenu();
    private hoverHandler(e);
    private ensureTextFilter();
    private preventClose(args);
    private getContextBounds(context);
    private getCMenuYPosition(target, context);
    openDialog(options: IFilterArgs): void;
    closeDialog(): void;
    private selectHandler(e);
    private renderDialogue(e);
    private removeDialog();
    private createdDialog(target, column);
    private renderCustomFilter(target, column);
    private filterBtnClick(col);
    /**
     * Filters grid row by column name with given options.
     * @param {string} fieldName - Defines the field name of the filter column.
     * @param {string} firstOperator - Defines the first operator by how to filter records.
     * @param {string | number | Date | boolean} firstValue - Defines the first value which is used to filter records.
     * @param  {string} predicate - Defines the relationship between one filter query with another by using AND or OR predicate.
     * @param {boolean} matchCase - If ignore case set to true, then filter records with exact match or else
     * filter records with case insensitive(uppercase and lowercase letters treated as same).
     * @param {boolean} ignoreAccent - If ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
     * @param {string} secondOperator - Defines the second operator by how to filter records.
     * @param {string | number | Date | boolean} secondValue - Defines the first value which is used to filter records.
     */
    private filterByColumn(fieldName, firstOperator, firstValue, predicate?, matchCase?, ignoreAccent?, secondOperator?, secondValue?);
    private renderOperatorUI(column, table, elementID, predicates, isFirst?);
    private dropDownOpen(args);
    private getSelectedValue(text);
    private dropSelectedVal(col, predicates, isFirst?);
    private getSelectedText(operator);
    private renderFilterUI(column, dlgConetntEle);
    private renderRadioButton(column, tr, predicates);
    private removeObjects(elements);
    private renderFlValueUI(column, optr, elementId, predicates, isFirst?);
    private renderMatchCase(column, tr, matchCase, elementId, predicates);
    private renderDate(options, column, inputValue, fValue, isRtl);
    private renderDateTime(options, column, inputValue, fValue, isRtl);
    private completeAction(e);
    private renderNumericTextBox(options, column, inputValue, fValue, isRtl);
    private renderAutoComplete(options, column, inputValue, fValue, isRtl);
    private performComplexDataOperation(value, mapObject);
    /**
     * For internal use only - Get the module name.
     * @private
     */
    protected getModuleName(): string;
}
