import { Column } from './../models/column';
import { IGrid } from '../base/interface';
import { Query } from '@syncfusion/ej2-data';
import { Data } from '../actions/data';
import { Grid } from '../base/grid';
/**
 * @hidden
 * `ExportHelper` for `PdfExport` & `ExcelExport`
 */
export declare class ExportHelper {
    parent: IGrid;
    private colDepth;
    private hideColumnInclude;
    private foreignKeyData;
    constructor(parent: IGrid);
    static getQuery(parent: IGrid, data: Data): Query;
    getFData(value: string, column: Column): Object;
    getColumnData(gridObj: Grid): Promise<Object>;
    getHeaders(column: any[], isHideColumnInclude?: boolean): {
        rows: any[];
        columns: Column[];
    };
    getConvertedWidth(input: string): number;
    private generateActualColumns(column, actualColumns);
    private removeCellFromRow(cells, cellIndex);
    private processHeaderCells(rows);
    private appendGridCells(cols, gridRows, index, isFirstObj, isFirstColumn, isLastColumn);
    private generateCell(gridColumn, cellType?, rowSpan?, className?, rowIndex?, columnIndex?);
    private processColumns(rows);
    private getCellCount(column, count);
    private measureColumnDepth(column);
    private checkDepth(col, index);
}
/**
 * @hidden
 * `ExportValueFormatter` for `PdfExport` & `ExcelExport`
 */
export declare class ExportValueFormatter {
    private internationalization;
    private valueFormatter;
    constructor(culture: string);
    private returnFormattedValue(args, customFormat);
    formatCellValue(args: any): string;
}
