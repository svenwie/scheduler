import { GroupSettingsModel } from '../base/grid-model';
import { ServiceLocator } from '../services/service-locator';
import { IGrid, IAction, NotifyArgs } from '../base/interface';
/**
 *
 * The `Group` module is used to handle group action.
 */
export declare class Group implements IAction {
    private groupSettings;
    private element;
    private colName;
    private column;
    private isAppliedGroup;
    private isAppliedUnGroup;
    private groupGenerator;
    private visualElement;
    private helper;
    private dragStart;
    private drag;
    private dragStop;
    private drop;
    private parent;
    private serviceLocator;
    private contentRefresh;
    private sortedColumns;
    private l10n;
    private aria;
    private focus;
    /**
     * Constructor for Grid group module
     * @hidden
     */
    constructor(parent?: IGrid, groupSettings?: GroupSettingsModel, sortedColumns?: string[], serviceLocator?: ServiceLocator);
    private columnDrag(e);
    private columnDragStart(e);
    private columnDrop(e);
    /**
     * @hidden
     */
    addEventListener(): void;
    /**
     * @hidden
     */
    removeEventListener(): void;
    private initialEnd();
    private keyPressHandler(e);
    private clickHandler(e);
    private unGroupFromTarget(target);
    private toogleGroupFromHeader(target);
    private applySortFromTarget(target);
    /**
     * Expands or collapses grouped rows by target element.
     * @param  {Element} target - Defines the target element of the grouped row.
     * @return {void}
     */
    expandCollapseRows(target: Element): void;
    private expandCollapse(isExpand);
    /**
     * Expands all the grouped rows of the Grid.
     * @return {void}
     */
    expandAll(): void;
    /**
     * Collapses all the grouped rows of the Grid.
     * @return {void}
     */
    collapseAll(): void;
    /**
     * The function is used to render grouping
     * @return {Element}
     * @hidden
     */
    render(): void;
    private renderGroupDropArea();
    private updateGroupDropArea(clear?);
    private initDragAndDrop();
    private initializeGHeaderDrag();
    private initializeGHeaderDrop();
    /**
     * Groups a column by column name.
     * @param  {string} columnName - Defines the column name to group.
     * @return {void}
     */
    groupColumn(columnName: string): void;
    /**
     * Ungroups a column by column name.
     * @param  {string} columnName - Defines the column name to ungroup.
     * @return {void}
     */
    ungroupColumn(columnName: string): void;
    /**
     * The function used to update groupSettings
     * @return {void}
     * @hidden
     */
    updateModel(): void;
    /**
     * The function used to trigger onActionComplete
     * @return {void}
     * @hidden
     */
    onActionComplete(e: NotifyArgs): void;
    private groupAddSortingQuery(colName);
    private addColToGroupDrop(field);
    private refreshToggleBtn(isRemove?);
    private removeColFromGroupDrop(field);
    private onPropertyChanged(e);
    private updateGroupedColumn(isVisible);
    private updateButtonVisibility(isVisible, className);
    private enableAfterRender(e);
    /**
     * To destroy the reorder
     * @return {void}
     * @hidden
     */
    destroy(): void;
    /**
     * Clears all the grouped columns of the Grid.
     * @return {void}
     */
    clearGrouping(): void;
    /**
     * For internal use only - Get the module name.
     * @private
     */
    protected getModuleName(): string;
    private refreshSortIcons(e?);
    private getGHeaderCell(field);
    private onGroupAggregates(editedData);
    private iterateGroupAggregates(editedData);
}
