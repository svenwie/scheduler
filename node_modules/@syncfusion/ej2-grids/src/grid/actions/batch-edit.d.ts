import { FormValidator } from '@syncfusion/ej2-inputs';
import { IGrid } from '../base/interface';
import { EditRender } from '../renderer/edit-renderer';
import { Row } from '../models/row';
import { ServiceLocator } from '../services/service-locator';
import { Column } from '../models/column';
/**
 * `BatchEdit` module is used to handle batch editing actions.
 * @hidden
 */
export declare class BatchEdit {
    private parent;
    private serviceLocator;
    private form;
    formObj: FormValidator;
    private renderer;
    private focus;
    private dataBoundFunction;
    private cellDetails;
    private isColored;
    private isAdded;
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator, renderer?: EditRender);
    /**
     * @hidden
     */
    addEventListener(): void;
    /**
     * @hidden
     */
    removeEventListener(): void;
    private dataBound();
    /**
     * @hidden
     */
    destroy(): void;
    protected clickHandler(e: MouseEvent): void;
    protected dblClickHandler(e: MouseEvent): void;
    private onBeforeCellFocused(e);
    private onCellFocused(e);
    private isAddRow(index);
    private editCellFromIndex(rowIdx, cellIdx);
    closeEdit(): void;
    deleteRecord(fieldname?: string, data?: Object): void;
    addRecord(data?: Object): void;
    endEdit(data?: Object): void;
    private validateFormObj();
    batchSave(): void;
    getBatchChanges(): Object;
    private mergeBatchChanges(row, mRow, frzCols);
    /**
     * @hidden
     */
    removeRowObjectFromUID(uid: string): void;
    /**
     * @hidden
     */
    addRowObject(row: Row<Column>): void;
    private bulkDelete(fieldname?, data?);
    private refreshRowIdx();
    private getIndexFromData(data);
    private bulkAddRow(data?);
    private renderMovable(ele);
    private findNextEditableCell(columnIndex, isAdd, isValOnly?);
    private checkNPCell(col);
    private getDefaultData();
    private setCellIdx(target);
    editCell(index: number, field: string, isAdd?: boolean): void;
    updateCell(rowIndex: number, field: string, value: string | number | boolean | Date): void;
    private setChanges(rowObj, field, value);
    updateRow(index: number, data: Object): void;
    private getCellIdx(uid);
    private refreshTD(td, column, rowObj, value);
    private getColIndex(cells, index);
    private editNextValCell();
    saveCell(isForceSave?: boolean): void;
    protected getDataByIndex(index: number): Object;
    private keyDownHandler(e);
    /**
     * @hidden
     */
    addCancelWhilePaging(): void;
}
