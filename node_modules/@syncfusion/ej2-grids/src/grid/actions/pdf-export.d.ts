import { IGrid, PdfExportProperties } from '../base/interface';
/**
 * `PDF Export` module is used to handle the exportToPDF action.
 * @hidden
 */
export declare class PdfExport {
    private parent;
    private isExporting;
    private data;
    private pdfDocument;
    private hideColumnInclude;
    private currentViewData;
    private customDataSource;
    private exportValueFormatter;
    private gridTheme;
    private isGrouping;
    private helper;
    private isBlob;
    private blobPromise;
    /**
     * Constructor for the Grid PDF Export module
     * @hidden
     */
    constructor(parent?: IGrid);
    /**
     * For internal use only - Get the module name.
     */
    private getModuleName();
    private init(parent);
    /**
     * Used to map the input data
     * @return {void}
     */
    Map(parent?: IGrid, pdfExportProperties?: PdfExportProperties, isMultipleExport?: boolean, pdfDoc?: Object, isBlob?: boolean): Promise<Object>;
    private processExport(gObj, returnType, pdfExportProperties, isMultipleExport);
    private getSummaryCaptionThemeStyle();
    private getHeaderThemeStyle();
    private processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, level, font, brush, backgroundBrush, returnType);
    private processGridHeaders(childLevels, pdfGrid, rows, gridColumns, border, headerFont, headerBrush);
    private processExportProperties(pdfExportProperties, dataSource, section);
    private drawPageTemplate(template, element);
    private processContentValidation(content);
    private drawText(pageTemplate, content);
    private drawPageNumber(documentHeader, content);
    private drawImage(documentHeader, content);
    private drawLine(documentHeader, content);
    private processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, isCaption, captionRow?, groupIndex?);
    private getTemplateFunction(templateFn, index, leastCaptionSummaryIndex, column);
    private getSummaryWithoutTemplate(data);
    private setColumnProperties(gridColumns, pdfGrid);
    /**
     * set default style properties of each rows in exporting grid
     * @private
     */
    private setRecordThemeStyle(row, border);
    /**
     * generate the formatted cell values
     * @private
     */
    private processRecord(border, columns, gObj, dataSource, pdfGrid, groupIndex?);
    private processCellStyle(cell, args);
    /**
     * set text alignment of each columns in exporting grid
     * @private
     */
    private getHorizontalAlignment(textAlign, format?);
    /**
     * set vertical alignment of each columns in exporting grid
     * @private
     */
    private getVerticalAlignment(verticalAlign, format?, textAlign?);
    private getFontFamily(fontFamily);
    private getFont(content);
    private getPageNumberStyle(pageNumberType);
    private setContentFormat(content, format);
    private getPageSize(pageSize);
    private getDashStyle(dashStyle);
    private getPenFromContent(content);
    private getBrushFromContent(content);
    private hexToRgb(hex);
    /**
     * To destroy the pdf export
     * @returnÂ {void}
     * @hidden
     */
    destroy(): void;
}
