import { IGrid, ExcelExportProperties } from '../base/interface';
/**
 * @hidden
 * `ExcelExport` module is used to handle the Excel export action.
 */
export declare class ExcelExport {
    private parent;
    private isExporting;
    private theme;
    private book;
    private workSheet;
    private rows;
    private columns;
    private styles;
    private data;
    private rowLength;
    private footer;
    private expType;
    private includeHiddenColumn;
    private isCsvExport;
    private isBlob;
    private blobPromise;
    private exportValueFormatter;
    private isElementIdChanged;
    private helper;
    private foreignKeyData;
    private groupedColLength;
    /**
     * Constructor for the Grid Excel Export module.
     * @hidden
     */
    constructor(parent?: IGrid);
    /**
     * For internal use only - Get the module name.
     */
    private getModuleName();
    private init(gObj);
    /**
     * Export Grid to Excel file.
     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.
     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.
     * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.
     * @param  {isCsv} isCsv - true if export to CSV.
     * @return {Promise<any>}
     */
    Map(grid: IGrid, exportProperties: ExcelExportProperties, isMultipleExport: boolean, workbook: any, isCsv: boolean, isBlob: boolean): Promise<any>;
    private processRecords(gObj, exportProperties, isMultipleExport, workbook);
    private processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r);
    private processRecordContent(gObj, returnType, headerRow, isMultipleExport, exportProperties, currentViewRecords?);
    private processGroupedRows(gObj, dataSource, headerRow, level);
    private processRecordRows(gObj, record, headerRow, level);
    private processAggregates(gObj, rec, currentViewRecords?, indent?, byGroup?);
    private fillAggregates(gObj, cells, indent, customIndex?);
    private getAggreateValue(cellType, template, cell, row);
    private mergeOptions(JSON1, JSON2);
    private getColumnStyle(gObj, columnIndex);
    private processHeaderContent(gObj, headerRow, exportProperties, indent);
    private getHeaderThemeStyle(theme);
    private updateThemeStyle(themestyle, style);
    private getCaptionThemeStyle(theme);
    private getRecordThemeStyle(theme);
    private processExcelHeader(header);
    private updatedCellIndex(json);
    private processExcelFooter(footer);
    private getIndex(spannedCells, rowIndex, columnIndex);
    private parseStyles(gObj, col, style, index);
    /**
     * To destroy the excel export
     * @returnÂ {void}
     * @hidden
     */
    destroy(): void;
}
