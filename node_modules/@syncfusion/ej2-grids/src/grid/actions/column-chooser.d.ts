import { ServiceLocator } from '../services/service-locator';
import { IGrid, IAction } from '../base/interface';
import { ShowHide } from './show-hide';
/**
 * The `ColumnChooser` module is used to show or hide columns dynamically.
 */
export declare class ColumnChooser implements IAction {
    private dataManager;
    private column;
    private parent;
    private serviceLocator;
    private l10n;
    private dlgObj;
    private searchValue;
    private flag;
    private timer;
    getShowHideService: ShowHide;
    private showColumn;
    private hideColumn;
    private mainDiv;
    private innerDiv;
    private ulElement;
    private isDlgOpen;
    private dlghide;
    private initialOpenDlg;
    private stateChangeColumns;
    private dlgDiv;
    private isInitialOpen;
    private isCustomizeOpenCC;
    private cBoxTrue;
    private cBoxFalse;
    private searchBoxObj;
    private searchOperator;
    /**
     * Constructor for the Grid ColumnChooser module
     * @hidden
     */
    constructor(parent?: IGrid, serviceLocator?: ServiceLocator);
    private destroy();
    private rtlUpdate();
    /**
     * @hidden
     */
    addEventListener(): void;
    /**
     * @hidden
     */
    removeEventListener(): void;
    private render();
    private clickHandler(e);
    private hideDialog();
    /**
     * To render columnChooser when showColumnChooser enabled.
     * @return {void}
     * @hidden
     */
    renderColumnChooser(x?: number, y?: number, target?: Element): void;
    /**
     * Column chooser can be displayed on screen by given position(X and Y axis).
     * @param  {number} X - Defines the X axis.
     * @param  {number} Y - Defines the Y axis.
     * @return {void}
     */
    openColumnChooser(X?: number, Y?: number): void;
    private enableAfterRenderEle(e);
    private customDialogOpen();
    private customDialogClose();
    private getColumns();
    private renderDlgContent();
    private renderChooserList();
    private confirmDlgBtnClick(args);
    private columnStateChange(stateColumns, state);
    private clearActions();
    private checkstatecolumn(isChecked, coluid);
    private columnChooserSearch(searchVal);
    private wireEvents();
    private unWireEvents();
    private checkBoxClickHandler(e);
    private refreshCheckboxButton();
    private refreshCheckboxList(gdCol, searchVal?);
    private refreshCheckboxState();
    private checkState(element, state);
    private createCheckBox(label, checked, uid);
    private renderCheckbox(column);
    private columnChooserManualSearch(e);
    private startTimer(e);
    private stopTimer();
    private addcancelIcon();
    private removeCancelIcon();
    private mOpenDlg();
    private getModuleName();
}
