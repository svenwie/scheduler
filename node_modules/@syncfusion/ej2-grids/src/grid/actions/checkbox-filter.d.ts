import { L10n } from '@syncfusion/ej2-base';
import { Query, Predicate } from '@syncfusion/ej2-data';
import { FilterSettings } from '../base/grid';
import { IGrid, IFilterArgs, FilterSearchBeginEventArgs } from '../base/interface';
import { ServiceLocator } from '../services/service-locator';
import { PredicateModel } from '../base/grid-model';
import { ValueFormatter } from '../services/value-formatter';
import { Column } from '../models/column';
import { Dialog } from '@syncfusion/ej2-popups';
/**
 * @hidden
 * `CheckBoxFilter` module is used to handle filtering action.
 */
export declare class CheckBoxFilter {
    protected sBox: HTMLElement;
    protected isExcel: boolean;
    protected id: string;
    protected colType: string;
    protected fullData: Object[];
    protected filteredData: Object[];
    protected isFiltered: boolean | number;
    protected dlg: Element;
    protected dialogObj: Dialog;
    protected cBox: HTMLElement;
    protected spinner: HTMLElement;
    protected searchBox: Element;
    protected sInput: HTMLInputElement;
    protected sIcon: Element;
    protected options: IFilterArgs;
    protected filterSettings: FilterSettings;
    protected existingPredicate: {
        [key: string]: PredicateModel[];
    };
    protected foreignKeyData: Object[];
    protected foreignKeyQuery: Query;
    protected filterState: boolean;
    protected values: Object;
    private cBoxTrue;
    private cBoxFalse;
    private itemsCnt;
    private result;
    protected renderEmpty: boolean;
    protected parent: IGrid;
    protected serviceLocator: ServiceLocator;
    protected localeObj: L10n;
    protected valueFormatter: ValueFormatter;
    private searchHandler;
    /**
     * Constructor for checkbox filtering module
     * @hidden
     */
    constructor(parent?: IGrid, filterSettings?: FilterSettings, serviceLocator?: ServiceLocator);
    /**
     * To destroy the filter bar.
     * @return {void}
     * @hidden
     */
    destroy(): void;
    private wireEvents();
    private unWireEvents();
    protected foreignKeyFilter(args: Object, fColl?: Object[], mPredicate?: Predicate): void;
    private foreignFilter(args, value);
    private searchBoxClick(e);
    private searchBoxKeyUp(e?);
    private updateSearchIcon();
    /**
     * Gets the localized label by locale keyword.
     * @param  {string} key
     * @return {string}
     */
    getLocalizedLabel(key: string): string;
    private updateDataSource();
    protected updateModel(options: IFilterArgs): void;
    protected getAndSetChkElem(options: IFilterArgs): HTMLElement;
    protected showDialog(options: IFilterArgs): void;
    private dialogCreated(e);
    openDialog(options: IFilterArgs): void;
    closeDialog(): void;
    protected clearFilter(): void;
    private btnClick(e);
    private fltrBtnHandler();
    private initiateFilter(fColl);
    private refreshCheckboxes();
    protected search(args: FilterSearchBeginEventArgs, query: Query): void;
    private getPredicateFromCols(columns);
    private addDistinct(query);
    private getAllData();
    private filterEvent(args, query);
    private eventPromise(args, query);
    getStateEventArgument(query: Query): Object;
    private processDataOperation(query, isInitial?);
    private dataSuccess(e);
    private processDataSource(query?, isInitial?, dataSource?);
    private processSearch(query);
    private updateResult();
    private clickHandler(e);
    private updateAllCBoxes(checked);
    private dialogOpen();
    private createCheckbox(value, checked, data);
    private updateIndeterminatenBtn();
    private createFilterItems(data, isInitial?);
    private getCheckedState(isColFiltered, value);
    static getDistinct(json: Object[], field: string, column?: Column, foreignKeyData?: Object[]): Object;
    static getPredicate(columns: PredicateModel[]): Predicate;
    private static generatePredicate(cols);
    private static getCaseValue(filter);
    private static updateDateFilter(filter);
    /**
     * For internal use only - Get the module name.
     * @private
     */
    protected getModuleName(): string;
}
