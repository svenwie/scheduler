import { Component, EmitType, Internationalization } from '@syncfusion/ej2-base';
import { L10n, ModuleDeclaration } from '@syncfusion/ej2-base';
import { INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { PivotEngine, IFieldListOptions } from '../../base/engine';
import { PivotFieldListModel } from './field-list-model';
import { LoadEventArgs, EnginePopulatingEventArgs, EnginePopulatedEventArgs } from '../../common/base/interface';
import { Mode } from '../../common/base/enum';
import { PivotCommon } from '../../common/base/pivot-common';
import { Render } from '../renderer/renderer';
import { DialogRenderer } from '../renderer/dialog-renderer';
import { TreeViewRenderer } from '../renderer/tree-renderer';
import { AxisTableRenderer } from '../renderer/axis-table-renderer';
import { AxisFieldRenderer } from '../renderer/axis-field-renderer';
import { PivotButton } from '../../common/actions/pivot-button';
import { PivotView } from '../../pivotview/base/pivotview';
import { DataSourceModel } from '../../pivotview/model/dataSource-model';
import { CalculatedField } from '../../common/calculatedfield/calculated-field';
import { PivotContextMenu } from '../../common/popups/context-menu';
/**
 * Represents the PivotFieldList component.
 * ```html
 * <div id="pivotfieldlist"></div>
 * <script>
 *  var pivotfieldlistObj = new PivotFieldList({ });
 *  pivotfieldlistObj.appendTo("#pivotfieldlist");
 * </script>
 * ```
 */
export declare class PivotFieldList extends Component<HTMLElement> implements INotifyPropertyChanged {
    /** @hidden */
    globalize: Internationalization;
    /** @hidden */
    localeObj: L10n;
    /** @hidden */
    isAdaptive: Boolean;
    /** @hidden */
    pivotFieldList: IFieldListOptions;
    /** @hidden */
    engineModule: PivotEngine;
    /** @hidden */
    isDragging: boolean;
    /** @hidden */
    fieldListSpinnerElement: Element;
    private defaultLocale;
    private captionData;
    /** @hidden */
    pivotGridModule: PivotView;
    /** @hidden */
    renderModule: Render;
    /** @hidden */
    dialogRenderer: DialogRenderer;
    /** @hidden */
    treeViewModule: TreeViewRenderer;
    /** @hidden */
    axisTableModule: AxisTableRenderer;
    /** @hidden */
    pivotCommon: PivotCommon;
    /** @hidden */
    axisFieldModule: AxisFieldRenderer;
    /** @hidden */
    pivotButtonModule: PivotButton;
    /** @hidden */
    calculatedFieldModule: CalculatedField;
    /** @hidden */
    contextMenuModule: PivotContextMenu;
    /**
     * It allows to feed raw data, dataSource and properties to customize the data source
     */
    dataSource: DataSourceModel;
    /**
     * It allows to render Pivot Field List at fixed or popup mode.
     * The possible values are:
     * @default 'Popup'
     */
    renderMode: Mode;
    /**
     * Specifies the `target` element where the Pivot Field List dialog should be displayed.
     * If the user set the specific `target` element for Pivot Field List, it will be positioned based on the `target`.
     * The targetID should works only when the Pivot Field List is in 'Dynamic' mode.
     * @default null
     */
    target: HTMLElement | string;
    /**
     * Specifies the CSS class name to be added for Pivot Field List element.
     * User can add single or multiple CSS classes.
     * @default ''
     */
    cssClass: string;
    /**
     * It allows to enable calculated field in Pivot Field List.
     * @default false
     */
    allowCalculatedField: boolean;
    /**
     * It shows a common button for value fields to move together in column or row axis
     * @default false
     */
    showValuesButton: boolean;
    /**
     * This allows any customization of Pivot Field List properties before rendering.
     * @event
     */
    load: EmitType<LoadEventArgs>;
    /**
     * This allows any customization of Pivot Field List properties before pivotengine populate.
     * @event
     */
    enginePopulating: EmitType<EnginePopulatingEventArgs>;
    /**
     * This allows any customization of Pivot Field List properties before pivotengine populate.
     * @event
     */
    enginePopulated: EmitType<EnginePopulatedEventArgs>;
    /**
     * Triggers when data source is populated in the Pivot Field List.
     * @event
     */
    dataBound: EmitType<Object>;
    /**
     * Triggers when data source is created in the Pivot Field List.
     * @event
     */
    created: EmitType<Object>;
    /**
     * Triggers when data source is destroyed in the Pivot Field List.
     * @event
     */
    destroyed: EmitType<Object>;
    /**
     * Constructor for creating the widget
     * @param  {PivotFieldListModel} options?
     * @param  {string|HTMLButtonElement} element?
     */
    constructor(options?: PivotFieldListModel, element?: string | HTMLElement);
    /**
     * To provide the array of modules needed for control rendering
     * @return {ModuleDeclaration[]}
     * @hidden
     */
    requiredModules(): ModuleDeclaration[];
    /**
     * For internal use only - Initialize the event handler;
     * @private
     */
    protected preRender(): void;
    /**
     * Initialize the control rendering
     * @returns void
     * @private
     */
    render(): void;
    /**
     * Binding events to the Pivot Field List element.
     * @hidden
     */
    private wireEvent();
    /**
     * Unbinding events from the element on widget destroy.
     * @hidden
     */
    private unWireEvent();
    /**
     * Get the properties to be maintained in the persisted state.
     * @return {string}
     * @hidden
     */
    getPersistData(): string;
    /**
     * Get component name.
     * @returns string
     * @private
     */
    getModuleName(): string;
    /**
     * Called internally if any of the property value changed.
     * @hidden
     */
    onPropertyChanged(newProp: PivotFieldListModel, oldProp: PivotFieldListModel): void;
    private generateData();
    private fieldListRender();
    private getFieldCaption(dataSource);
    private getFields(dataSource);
    /**
     * Updates the PivotEngine using dataSource from Pivot Field List component.
     * @method updateDataSource
     * @return {void}
     * @hidden
     */
    updateDataSource(isTreeViewRefresh?: boolean): void;
    /**
     * Updates the Pivot Field List component using dataSource from PivotView component.
     * @method updateControl
     * @return {void}
     * @hidden
     */
    update(control: PivotView): void;
    /**
     * Updates the PivotView component using dataSource from Pivot Field List component.
     * @method refreshTargetControl
     * @return {void}
     * @hidden
     */
    updateView(control: PivotView): void;
    /**
     * Destroys the Field Table component.
     * @method destroy
     * @return {void}
     */
    destroy(): void;
}
