import { createElement, addClass, removeClass, prepend, remove } from '@syncfusion/ej2-base';
import { closest, extend } from '@syncfusion/ej2-base';
import * as cls from '../../common/base/css-constant';
import * as events from '../../common/base/constant';
import { TreeView } from '@syncfusion/ej2-navigations';
import { Dialog } from '@syncfusion/ej2-popups';
import { MaskedTextBox } from '@syncfusion/ej2-inputs';
/**
 * Module to render Field List
 */
/** @hidden */
var TreeViewRenderer = /** @class */ (function () {
    /** Constructor for render module */
    function TreeViewRenderer(parent) {
        this.selectedNodes = [];
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * Initialize the field list tree rendering
     * @returns void
     * @private
     */
    TreeViewRenderer.prototype.render = function (axis) {
        this.parentElement = this.parent.dialogRenderer.parentElement;
        if (!this.parent.isAdaptive) {
            var fieldTable = createElement('div', { className: cls.FIELD_TABLE_CLASS });
            var treeHeader = createElement('div', {
                className: cls.FIELD_HEADER_CLASS,
                innerHTML: this.parent.localeObj.getConstant('allFields')
            });
            this.treeViewElement = createElement('div', {
                id: this.parent.element.id + '_TreeView',
                className: cls.FIELD_LIST_CLASS
            });
            fieldTable.appendChild(treeHeader);
            fieldTable.appendChild(this.treeViewElement);
            this.parentElement.appendChild(fieldTable);
            if (this.parent.renderMode === 'Fixed') {
                var centerDiv = createElement('div', { className: cls.STATIC_CENTER_DIV_CLASS });
                var axisHeader = createElement('div', {
                    className: cls.STATIC_CENTER_HEADER_CLASS,
                    innerHTML: this.parent.localeObj.getConstant('centerHeader')
                });
                this.parentElement.appendChild(centerDiv);
                this.parentElement.appendChild(axisHeader);
            }
            this.renderTreeView();
        }
        else {
            this.renderTreeDialog(axis);
        }
    };
    TreeViewRenderer.prototype.renderTreeView = function () {
        this.fieldTable = new TreeView({
            fields: { dataSource: this.getTreeData(), id: 'id', text: 'caption', isChecked: 'isSelected' },
            nodeChecked: this.nodeStateChange.bind(this),
            cssClass: cls.FIELD_LIST_TREE_CLASS,
            showCheckBox: true,
            allowDragAndDrop: true,
            sortOrder: 'Ascending',
            enableRtl: this.parent.enableRtl,
            nodeDragStart: this.dragStart.bind(this),
            nodeDragStop: this.dragStop.bind(this)
        });
        this.treeViewElement.innerHTML = '';
        this.fieldTable.appendTo(this.treeViewElement);
        this.getTreeUpdate();
    };
    TreeViewRenderer.prototype.renderTreeDialog = function (axis) {
        var _this = this;
        var fieldListDialog = createElement('div', {
            id: this.parent.element.id + '_FieldListTreeView',
            className: cls.ADAPTIVE_FIELD_LIST_DIALOG_CLASS
        });
        this.parentElement.appendChild(fieldListDialog);
        this.fieldDialog = new Dialog({
            animationSettings: { effect: 'Fade' },
            allowDragging: false,
            header: this.parent.localeObj.getConstant('adaptiveFieldHeader'),
            content: this.createTreeView(this.getTreeData(axis)),
            isModal: true,
            visible: true,
            showCloseIcon: false,
            enableRtl: this.parent.enableRtl,
            width: 'auto',
            height: '350px',
            position: { X: 'center', Y: 'center' },
            buttons: [{
                    click: this.closeTreeDialog.bind(this),
                    buttonModel: {
                        cssClass: cls.CANCEL_BUTTON_CLASS, content: this.parent.localeObj.getConstant('cancel')
                    }
                }, {
                    click: this.onFieldAdd.bind(this),
                    buttonModel: {
                        cssClass: cls.OK_BUTTON_CLASS, content: this.parent.localeObj.getConstant('add'),
                        isPrimary: true
                    }
                }],
            closeOnEscape: true,
            target: this.parentElement.parentElement,
            close: function () {
                if (document.getElementById(_this.parent.element.id + '_FieldListTreeView')) {
                    remove(document.getElementById(_this.parent.element.id + '_FieldListTreeView'));
                }
            }
        });
        this.fieldDialog.appendTo(fieldListDialog);
    };
    TreeViewRenderer.prototype.createTreeView = function (treeData) {
        var _this = this;
        var editorTreeWrapper = createElement('div', {
            id: this.parent.element.id + 'EditorDiv',
            className: cls.EDITOR_TREE_WRAPPER_CLASS
        });
        var searchWrapper = createElement('div', {
            id: this.parent.element.id + '_SearchDiv', attrs: { 'tabindex': '-1' },
            className: cls.EDITOR_SEARCH_WRAPPER_CLASS
        });
        var editorSearch = createElement('input', { attrs: { 'type': 'text' } });
        searchWrapper.appendChild(editorSearch);
        var treeViewContainer = createElement('div', { className: cls.EDITOR_TREE_CONTAINER_CLASS });
        editorTreeWrapper.appendChild(searchWrapper);
        this.editorSearch = new MaskedTextBox({
            placeholder: this.parent.localeObj.getConstant('search'),
            enableRtl: this.parent.enableRtl,
            cssClass: cls.EDITOR_SEARCH_CLASS,
            change: function (e) {
                _this.parent.pivotCommon.eventBase.searchTreeNodes(e, _this.fieldTable);
            }
        });
        this.editorSearch.appendTo(editorSearch);
        editorTreeWrapper.appendChild(treeViewContainer);
        this.fieldTable = new TreeView({
            fields: { dataSource: treeData, id: 'id', text: 'caption', isChecked: 'isSelected' },
            showCheckBox: true,
            sortOrder: 'Ascending',
            enableRtl: this.parent.enableRtl,
            nodeChecked: this.addNode.bind(this),
        });
        this.fieldTable.appendTo(treeViewContainer);
        return editorTreeWrapper;
    };
    TreeViewRenderer.prototype.dragStart = function (args) {
        if (args.event.target.classList.contains(cls.DRAG_CLASS)) {
            this.parent.isDragging = true;
            addClass([args.draggedNode.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.SELECTED_NODE_CLASS);
            var data = this.parent.engineModule.fieldList[args.draggedNode.getAttribute('data-uid')];
            var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];
            if (data && data.aggregateType === 'CalculatedField') {
                for (var _i = 0, axis_1 = axis; _i < axis_1.length; _i++) {
                    var axisContent = axis_1[_i];
                    addClass([this.parentElement.querySelector('.' + axisContent)], cls.NO_DRAG_CLASS);
                }
            }
        }
        else {
            args.cancel = true;
        }
    };
    TreeViewRenderer.prototype.dragStop = function (args) {
        args.cancel = true;
        this.parent.isDragging = false;
        var axis = [cls.ROW_AXIS_CLASS, cls.COLUMN_AXIS_CLASS, cls.FILTER_AXIS_CLASS];
        for (var _i = 0, axis_2 = axis; _i < axis_2.length; _i++) {
            var axisElement = axis_2[_i];
            removeClass([this.parentElement.querySelector('.' + axisElement)], cls.NO_DRAG_CLASS);
        }
        removeClass([args.draggedNode.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.SELECTED_NODE_CLASS);
        if (this.parent.pivotCommon.filterDialog.dialogPopUp) {
            this.parent.pivotCommon.filterDialog.dialogPopUp.close();
        }
        var fieldName = args.draggedNodeData.id.toString();
        if (!this.isNodeDropped(args, fieldName)) {
            return;
        }
        if (this.parent.pivotCommon.nodeStateModified.onStateModified(args, fieldName)) {
            this.parent.updateDataSource();
            this.parent.axisFieldModule.render();
        }
    };
    TreeViewRenderer.prototype.isNodeDropped = function (args, targetID) {
        var isDropped = true;
        if (args.draggedNodeData.isChecked === 'true') {
            var target = this.getButton(targetID);
            var axisPanel = closest(target, '.' + cls.DROPPABLE_CLASS);
            var droppableElement = closest(args.target, '.' + cls.DROPPABLE_CLASS);
            if (target && axisPanel === droppableElement) {
                var pivotButtons = [].slice.call(axisPanel.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
                var dropTarget = closest(args.target, '.' + cls.PIVOT_BUTTON_WRAPPER_CLASS);
                var sourcePosition = void 0;
                var dropPosition = -1;
                for (var i = 0, n = pivotButtons.length; i < n; i++) {
                    if (pivotButtons[i].id === target.id) {
                        sourcePosition = i;
                    }
                    if (dropTarget) {
                        var droppableButton = dropTarget.querySelector('.' + cls.PIVOT_BUTTON_CLASS);
                        if (pivotButtons[i].id === droppableButton.id) {
                            dropPosition = i;
                        }
                    }
                }
                if (sourcePosition === dropPosition || (sourcePosition === (pivotButtons.length - 1) && dropPosition === -1)) {
                    var parentElement = document.getElementById(this.parent.element.id + '_Wrapper');
                    removeClass([].slice.call(parentElement.querySelectorAll('.' + cls.DROP_INDICATOR_CLASS)), cls.INDICATOR_HOVER_CLASS);
                    isDropped = false;
                }
            }
        }
        return isDropped;
    };
    TreeViewRenderer.prototype.getButton = function (fieldName) {
        var wrapperElement = document.getElementById(this.parent.element.id + '_Wrapper');
        var pivotButtons = [].slice.call(wrapperElement.querySelectorAll('.' + cls.PIVOT_BUTTON_CLASS));
        var buttonElement;
        for (var i = 0, n = pivotButtons.length; i < n; i++) {
            if (pivotButtons[i].id === fieldName) {
                buttonElement = pivotButtons[i];
                break;
            }
        }
        return buttonElement;
    };
    TreeViewRenderer.prototype.nodeStateChange = function (args) {
        if (this.parent.pivotCommon.filterDialog.dialogPopUp) {
            this.parent.pivotCommon.filterDialog.dialogPopUp.close();
        }
        var node = closest(args.node, '.' + cls.TEXT_CONTENT_CLASS);
        var list = this.parent.pivotFieldList;
        var selectedNode = list[args.data[0].id.toString()];
        if (args.action === 'check') {
            addClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
            var addNode = this.parent.pivotCommon.dataSourceUpdate.getNewField(args.data[0].id.toString());
            selectedNode.type === 'number' ?
                this.parent.dataSource.values.push(addNode) : this.parent.dataSource.rows.push(addNode);
        }
        else {
            removeClass([node.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
            this.parent.pivotCommon.dataSourceUpdate.removeFieldFromReport(args.data[0].id.toString());
        }
        this.parent.updateDataSource(true);
        this.parent.axisFieldModule.render();
    };
    TreeViewRenderer.prototype.addNode = function (args) {
        var fieldList = this.parent.pivotFieldList;
        var selectedNode = fieldList[args.data[0].id.toString()];
        if (args.action === 'check') {
            this.selectedNodes.push(selectedNode.id.toString());
        }
        else {
            var count = this.selectedNodes.length;
            while (count--) {
                if (this.selectedNodes[count] === selectedNode.id.toString()) {
                    this.selectedNodes.splice(count, 1);
                    break;
                }
            }
        }
    };
    TreeViewRenderer.prototype.getTreeUpdate = function () {
        var liElements = [].slice.call(this.treeViewElement.querySelectorAll('.' + cls.TEXT_CONTENT_CLASS));
        for (var _i = 0, liElements_1 = liElements; _i < liElements_1.length; _i++) {
            var liElement = liElements_1[_i];
            var dragElement = createElement('span', {
                attrs: {
                    'tabindex': '-1',
                    title: this.parent.localeObj.getConstant('drag'),
                    'aria-disabled': 'false'
                },
                className: cls.ICON + ' ' + cls.DRAG_CLASS
            });
            prepend([dragElement], liElement);
            if (liElement.querySelector('.' + cls.NODE_CHECK_CLASS)) {
                addClass([liElement.querySelector('.' + cls.LIST_TEXT_CLASS)], cls.LIST_SELECT_CLASS);
            }
        }
    };
    TreeViewRenderer.prototype.refreshTreeView = function () {
        this.fieldTable.fields = { dataSource: this.getTreeData(), id: 'id', text: 'caption', isChecked: 'isSelected' };
        this.fieldTable.dataBind();
        this.getTreeUpdate();
    };
    TreeViewRenderer.prototype.getTreeData = function (axis) {
        var data = [];
        var keys = Object.keys(this.parent.pivotFieldList);
        var fieldList = extend({}, this.parent.pivotFieldList, null, true);
        if (this.parent.isAdaptive) {
            var fields = [this.parent.dataSource.filters, this.parent.dataSource.columns, this.parent.dataSource.rows,
                this.parent.dataSource.values];
            var currentFieldSet = fields[axis];
            var len = keys.length;
            while (len--) {
                fieldList[keys[len]].isSelected = false;
            }
            for (var _i = 0, currentFieldSet_1 = currentFieldSet; _i < currentFieldSet_1.length; _i++) {
                var item = currentFieldSet_1[_i];
                fieldList[item.name].isSelected = true;
            }
        }
        var list = fieldList;
        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
            var member = keys_1[_a];
            var obj = list[member];
            data.push(obj);
        }
        return data;
    };
    TreeViewRenderer.prototype.onFieldAdd = function (e) {
        this.parent.dialogRenderer.updateDataSource(this.selectedNodes);
        this.closeTreeDialog();
    };
    TreeViewRenderer.prototype.closeTreeDialog = function () {
        this.selectedNodes = [];
        this.fieldDialog.hide();
    };
    /**
     * @hidden
     */
    TreeViewRenderer.prototype.addEventListener = function () {
        this.parent.on(events.treeViewUpdate, this.refreshTreeView, this);
    };
    /**
     * @hidden
     */
    TreeViewRenderer.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(events.treeViewUpdate, this.refreshTreeView);
    };
    /**
     * To destroy the tree view event listener
     * @return {void}
     * @hidden
     */
    TreeViewRenderer.prototype.destroy = function () {
        this.removeEventListener();
    };
    return TreeViewRenderer;
}());
export { TreeViewRenderer };
