import { Internationalization, NumberFormatOptions, DateFormatOptions } from '@syncfusion/ej2-base';
import { DataManager } from '@syncfusion/ej2-data';
import { Sorting, SummaryTypes, FilterType, Operators, Condition } from './types';
import { HeaderCollection } from '../common';
/**
 * PivotEngine is used to manipulate the relational or Multi-Dimensional data as pivoting values.
 */
/** @hidden */
export declare class PivotEngine {
    /** @hidden */
    globalize: Internationalization;
    /** @hidden */
    fieldList: IFieldListOptions;
    /** @hidden */
    pivotValues: IPivotValues;
    /** @hidden */
    headerContent: IGridValues;
    /** @hidden */
    valueContent: IGridValues;
    /** @hidden */
    fields: string[];
    /** @hidden */
    rows: IFieldOptions[];
    /** @hidden */
    columns: IFieldOptions[];
    /** @hidden */
    values: IFieldOptions[];
    /** @hidden */
    filters: IFieldOptions[];
    /** @hidden */
    isMutiMeasures: boolean;
    /** @hidden */
    drilledMembers: IDrillOptions[];
    /** @hidden */
    formats: IFormatSettings[];
    /** @hidden */
    isExpandAll: boolean;
    /** @hidden */
    enableSort: boolean;
    /** @hidden */
    pageSettings: IPageSettings;
    /** @hidden */
    filterMembers: number[];
    /** @hidden */
    formatFields: {
        [key: string]: IFormatSettings;
    };
    /** @hidden */
    calculatedFieldSettings: ICalculatedFieldSettings[];
    /** @hidden */
    calculatedFields: {
        [key: string]: ICalculatedFields;
    };
    /** @hidden */
    calculatedFormulas: {
        [key: string]: Object;
    };
    /** @hidden */
    valueSortSettings: IValueSortSettings;
    /** @hidden */
    isEngineUpdated: boolean;
    /** @hidden */
    savedFieldList: IFieldListOptions;
    /** @hidden */
    valueAxis: number;
    /** @hidden */
    saveDataHeaders: {
        [key: string]: IAxisSet[];
    };
    /** @hidden */
    columnCount: number;
    /** @hidden */
    rowCount: number;
    /** @hidden */
    colFirstLvl: number;
    /** @hidden */
    rowFirstLvl: number;
    /** @hidden */
    rowStartPos: number;
    /** @hidden */
    colStartPos: number;
    /** @hidden */
    enableValueSorting: boolean;
    /** @hidden */
    headerCollection: HeaderCollection;
    /** @hidden */
    isValueFilterEnabled: boolean;
    /** @hidden */
    isEmptyData: boolean;
    /** @hidden */
    isHeaderAvail: boolean;
    private allowValueFilter;
    private isValueFiltered;
    private isValueFiltersAvail;
    private valueSortData;
    private valueFilteredData;
    private filterFramedHeaders;
    private valueMatrix;
    private indexMatrix;
    private rMembers;
    private cMembers;
    private memberCnt;
    private pageInLimit;
    private endPos;
    private colHdrBufferCalculated;
    private colValuesLength;
    private rowValuesLength;
    private slicedHeaders;
    private fieldFilterMem;
    private filterPosObj;
    /**
     * Constructor for PivotEngine class
     * @param  {DataOptions} dataSource?
     * @param  {string} mode?
     * @hidden
     */
    constructor(dataSource?: IDataOptions, mode?: string, savedFieldList?: IFieldListOptions, pageSettings?: IPageSettings, enableValueSoring?: boolean);
    private getFormattedFields(fields);
    private getFieldList(fields, isSort, isValueFilteringEnabled);
    private updateFieldList(savedFieldList);
    private updateTreeViewData(fields);
    private getCalculatedField(keys);
    private validateFilters(data);
    private fillFieldMembers(data, indMat);
    private fillDrilledInfo();
    private generateValueMatrix(data);
    private updateSortSettings(sortSettings, isSort);
    private updateFilterMembers(source);
    private getFilters(source, ilist);
    private isValidFilterField(filterElement, allowLabelFiltering);
    private applyLabelFilter(filterElement);
    private getLabelFilterMembers(members, operator, value1, value2?);
    private getDateFilterMembers(members, name, operator, value1, value2?);
    private validateFilterValue(val, operator, value1, value2?);
    private frameFilterList(filter, name, list, type, isLabelFilter, isInclude?);
    private applyValueFiltering(rowData, level, rows, columns, valueFilter, rowFilterData, type);
    private getFilteredData(rows, columns, filterSettings, rowFilterData, level, fieldName, allMember, type);
    private getParsedValue(measure, value);
    private removefilteredData(row, rowFilterData);
    private validateFilteredParentData(row, rows, allMemberData, i, level, type);
    private updateFramedHeaders(framedHeaders, dataHeaders, filteredHeaders, headers, type);
    private validateFilteredHeaders(dHeader, filteredHeaders, type);
    private isEmptyDataAvail(rowHeaders, columnHeaders);
    generateGridData(dataSource: IDataOptions, headerCollection?: HeaderCollection): void;
    private applyValueSorting();
    private getMember(cMembers, headerText);
    private sortByValueRow(rMembers, member, sortOrder, mIndex, mType);
    private insertAllMembersCommon();
    private removeIndexProperties();
    private insertSubTotals();
    private getIndexedHeaders(keys, data, keyInd?, position?, axis?, parentMember?);
    private getOrderedIndex(headers);
    private insertPosition(keys, data, keyInd?, position?, axis?, parentMember?, slicedHeaders?);
    private insertTotalPosition(headers);
    private calculatePagingValues();
    private performSlicing(headers, slicedHeaders, startPos, axis);
    private insertAllMember(set, filter, customText?, axis?);
    private getTableData(rows, reformAxis, columns, tnum, data, vlt);
    private recursiveRowData(rows, reformAxis, columns, tnum, data, vlt, isLeastNode, rln, vln);
    private updateRowData(rows, columns, tnum, data, vln, rln, cln, dln, actCnt);
    private getHeaderData(axis, reformAxis, data, tnum, vcnt);
    private getAggregateValue(rowIndex, columnIndex, value, type);
    private getFormattedValue(value, fieldName);
    private powerFunction(formula);
    private evaluate(obj);
}
/** @hidden */
export interface IDataOptions {
    data?: IDataSet[] | DataManager;
    rows?: IFieldOptions[];
    columns?: IFieldOptions[];
    values?: IFieldOptions[];
    filters?: IFieldOptions[];
    expandAll?: boolean;
    valueAxis?: string;
    filterSettings?: IFilter[];
    sortSettings?: ISort[];
    enableSorting?: boolean;
    formatSettings?: IFormatSettings[];
    drilledMembers?: IDrillOptions[];
    valueSortSettings?: IValueSortSettings;
    calculatedFieldSettings?: ICalculatedFieldSettings[];
    allowLabelFilter?: boolean;
    allowValueFilter?: boolean;
    conditionalFormatSettings?: IConditionalFormatSettings[];
}
/**
 * @hidden
 */
export interface IConditionalFormatSettings {
    measure?: string;
    conditions?: Condition;
    value1?: number;
    value2?: number;
    style?: IStyle;
    label?: string;
}
/**
 * @hidden
 */
export interface IStyle {
    backgroundColor?: string;
    color?: string;
    fontFamily?: string;
    fontSize?: string;
}
/**
 * @hidden
 */
export interface IValueSortSettings {
    headerText?: string;
    headerDelimiter?: string;
    sortOrder?: Sorting;
    columnIndex?: number;
}
/**
 * @hidden
 */
export interface IPageSettings {
    columnSize?: number;
    rowSize?: number;
    columnCurrentPage?: number;
    rowCurrentPage?: number;
}
/**
 * @hidden
 */
export interface IFilterObj {
    [key: string]: {
        memberObj: IStringIndex;
    };
}
/**
 * @hidden
 */
export interface IIterator {
    [key: string]: {
        index: number[];
        indexObject: INumberIndex;
    };
}
/**
 * @hidden
 */
export interface INumberIndex {
    [key: string]: number;
}
/**
 * @hidden
 */
export interface IStringIndex {
    [key: string]: string;
}
/**
 * @hidden
 */
export interface IPivotValues {
    [key: number]: {
        [key: number]: number | string | Object | IAxisSet;
        length: number;
    };
    length: number;
}
/**
 * @hidden
 */
export interface IGridValues {
    [key: number]: IAxisSet[];
    length: number;
}
/**
 * @hidden
 */
export interface IDataSet {
    [key: string]: string | number | Date;
}
/**
 * @hidden
 */
export interface IFieldOptions {
    name?: string;
    caption?: string;
    type?: SummaryTypes;
    axis?: string;
    showNoDataItems?: boolean;
}
/**
 * @hidden
 */
export interface ISort {
    name?: string;
    order?: Sorting;
}
/**
 * @hidden
 */
export interface IFilter {
    name?: string;
    type?: FilterType;
    items?: string[];
    condition?: Operators;
    value1?: string | Date;
    value2?: string | Date;
    showLabelFilter?: boolean;
    showDateFilter?: boolean;
    showNumberFilter?: boolean;
    measure?: string;
}
/**
 * @hidden
 */
export interface IDrillOptions {
    name?: string;
    items?: string[];
}
/**
 * @hidden
 */
export interface ICalculatedFieldSettings {
    name?: string;
    formula?: string;
}
/**
 * @hidden
 */
export interface ICalculatedFields extends ICalculatedFieldSettings {
    actualFormula?: string;
}
/**
 * @hidden
 */
export interface IFormatSettings extends NumberFormatOptions, DateFormatOptions {
    name?: string;
}
/**
 * @hidden
 */
export interface IMembers {
    [index: string]: {
        ordinal?: number;
        index?: number[];
        name?: string;
        isDrilled?: boolean;
    };
}
/**
 * @hidden
 */
export interface IFieldListOptions {
    [index: string]: IField;
}
/**
 * @hidden
 */
export interface IField {
    id?: string;
    caption?: string;
    type?: string;
    formatString?: string;
    index?: number;
    members?: IMembers;
    formattedMembers?: IMembers;
    dateMember?: IAxisSet[];
    filter: string[];
    sort: string;
    aggregateType?: string;
    format?: string;
    formula?: string;
    isSelected?: boolean;
    isExcelFilter?: boolean;
    showNoDataItems?: boolean;
}
/**
 * @hidden
 */
export interface IAxisSet {
    formattedText?: string;
    actualText?: number | string;
    type?: string;
    isDrilled?: boolean;
    hasChild?: boolean;
    members?: this[];
    index?: number[];
    indexObject?: INumberIndex;
    ordinal?: number;
    level?: number;
    axis?: string;
    value?: number;
    colSpan?: number;
    rowSpan?: number;
    valueSort?: IDataSet;
    colIndex?: number;
    rowIndex?: number;
    isSum?: boolean;
    isLevelFiltered?: boolean;
    cssClass?: string;
    style?: IStyle;
}
