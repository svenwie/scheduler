var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Property, Browser, Event, Component, createElement, setStyleAttribute } from '@syncfusion/ej2-base';
import { EventHandler, Complex, extend, ChildProperty } from '@syncfusion/ej2-base';
import { Internationalization, L10n, NotifyPropertyChanges } from '@syncfusion/ej2-base';
import { removeClass, addClass } from '@syncfusion/ej2-base';
import { PivotEngine } from '../../base/engine';
import { Tooltip, createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';
import * as events from '../../common/base/constant';
import * as cls from '../../common/base/css-constant';
import { Render } from '../renderer/render';
import { DataSource } from '../model/dataSource';
import { GridSettings } from '../model/gridsettings';
import { ExcelExport } from '../actions/excel-export';
import { PDFExport } from '../actions/pdf-export';
import { KeyboardInteraction } from '../actions/keyboard';
import { PivotContextMenu } from '../../common/popups/context-menu';
import { DataManager, Query } from '@syncfusion/ej2-data';
import { VirtualScroll } from '../actions/virtualscroll';
/**
 * It holds the settings of Grouping Bar.
 */
var GroupingBarSettings = /** @class */ (function (_super) {
    __extends(GroupingBarSettings, _super);
    function GroupingBarSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(true)
    ], GroupingBarSettings.prototype, "showFilterIcon", void 0);
    __decorate([
        Property(true)
    ], GroupingBarSettings.prototype, "showSortIcon", void 0);
    __decorate([
        Property(true)
    ], GroupingBarSettings.prototype, "showRemoveIcon", void 0);
    return GroupingBarSettings;
}(ChildProperty));
export { GroupingBarSettings };
/**
 * Represents the PivotView component.
 * ```html
 * <div id="PivotView"></div>
 * <script>
 *  var pivotviewObj = new PivotView({ enableGroupingBar: true });
 *  pivotviewObj.appendTo("#pivotview");
 * </script>
 * ```
 */
var PivotView = /** @class */ (function (_super) {
    __extends(PivotView, _super);
    /**
     * Constructor for creating the widget
     * @param  {PivotViewModel} options?
     * @param  {string|HTMLElement} element?
     */
    function PivotView(options, element) {
        var _this = _super.call(this, options, element) || this;
        /** @hidden */
        _this.resizeInfo = {};
        /** @hidden */
        _this.scrollPosObject = {
            vertical: 0, horizontal: 0, verticalSection: 0,
            horizontalSection: 0, top: 0, left: 0, scrollDirection: { direction: '', position: 0 }
        };
        _this.needsID = true;
        _this.pivotView = _this;
        return _this;
    }
    PivotView_1 = PivotView;
    /**
     * To provide the array of modules needed for control rendering
     * @return {ModuleDeclaration[]}
     * @hidden
     */
    PivotView.prototype.requiredModules = function () {
        var modules = [];
        var isCommonRequire;
        if (this.allowConditionalFormatting) {
            modules.push({ args: [this], member: 'conditionalformatting' });
        }
        if (this.allowCalculatedField) {
            isCommonRequire = true;
            modules.push({ args: [this], member: 'calculatedfield' });
        }
        if (this.showGroupingBar) {
            isCommonRequire = true;
            modules.push({ args: [this], member: 'grouping' });
        }
        if (this.showFieldList) {
            isCommonRequire = true;
            modules.push({ args: [this], member: 'fieldlist' });
        }
        if (this.allowExcelExport) {
            modules.push({ args: [this], member: 'excelExport' });
        }
        if (this.allowPdfExport) {
            modules.push({ args: [this], member: 'pdfExport' });
        }
        if (this.enableVirtualization) {
            modules.push({ args: [this], member: 'virtualscroll' });
        }
        if (isCommonRequire) {
            modules.push({ args: [this], member: 'common' });
        }
        return modules;
    };
    /**
     * For internal use only - Initializing internal properties;
     * @private
     */
    PivotView.prototype.preRender = function () {
        this.initProperties();
        this.isAdaptive = Browser.isDevice;
        this.toolTip = new Tooltip({
            target: 'td.e-valuescontent',
            showTipPointer: false,
            enableRtl: this.enableRtl,
            beforeRender: this.setToolTip.bind(this),
            beforeOpen: this.onBeforeTooltipOpen
        });
        this.keyboardModule = new KeyboardInteraction(this);
        this.contextMenuModule = new PivotContextMenu(this);
        this.toolTip.appendTo(this.element);
        this.globalize = new Internationalization(this.locale);
        this.defaultLocale = {
            grandTotal: 'Grand Total',
            total: 'Total',
            value: 'Value',
            noValue: 'No value',
            row: 'Row',
            column: 'Column',
            collapse: 'Collapse',
            expand: 'Expand',
            rowAxisPrompt: 'Drop row here',
            columnAxisPrompt: 'Drop column here',
            valueAxisPrompt: 'Drop value here',
            filterAxisPrompt: 'Drop filter here',
            filter: 'Filter',
            filtered: 'Filtered',
            sort: 'Sort',
            filters: 'Filters',
            rows: 'Rows',
            columns: 'Columns',
            values: 'Values',
            close: 'Close',
            cancel: 'Cancel',
            delete: 'Delete',
            calculatedField: 'Calculated Field',
            createCalculatedField: 'Create Calculated Field',
            fieldName: 'Enter the field name',
            error: 'Error',
            invalidFormula: 'Invalid formula.',
            dropText: 'Example: ("Sum(Order_Count)" + "Sum(In_Stock)") * 250',
            dropTextMobile: 'Add fields and edit formula here.',
            dropAction: 'Calculated field cannot be place in any other region except value axis.',
            alert: 'Alert',
            warning: 'Warning',
            ok: 'OK',
            search: 'Search',
            drag: 'Drag',
            remove: 'Remove',
            sum: 'Sum',
            average: 'Average',
            count: 'Count',
            min: 'Min',
            max: 'Max',
            allFields: 'All Fields',
            formula: 'Formula',
            addToRow: 'Add to Row',
            addToColumn: 'Add to Column',
            addToValue: 'Add to Value',
            addToFilter: 'Add to Filter',
            emptyData: 'No records to display',
            fieldExist: 'A field already exists in this name. Please enter a different name.',
            confirmText: 'A calculation field already exists in this name. Do you want to replace it?',
            noMatches: 'No matches',
            format: 'Summaries values by',
            edit: 'Edit',
            clear: 'Clear',
            formulaField: 'Drag and drop fields to formula',
            dragField: 'Drag field to formula',
            clearFilter: 'Clear',
            by: 'by',
            /* tslint:disable */
            member: 'Member',
            label: 'Label',
            date: 'Date',
            enterValue: 'Enter value',
            chooseDate: 'Enter date',
            Before: 'Before',
            BeforeOrEqualTo: 'Before Or Equal To',
            After: 'After',
            AfterOrEqualTo: 'After Or Equal To',
            labelTextContent: 'Show the items for which the label',
            dateTextContent: 'Show the items for which the date',
            valueTextContent: 'Show the items for which',
            Equals: 'Equals',
            DoesNotEquals: 'Does Not Equal',
            BeginWith: 'Begins With',
            DoesNotBeginWith: 'Does Not Begin With',
            EndsWith: 'Ends With',
            DoesNotEndsWith: 'Does Not End With',
            Contains: 'Contains',
            DoesNotContains: 'Does Not Contain',
            GreaterThan: 'Greater Than',
            GreaterThanOrEqualTo: 'Greater Than Or Equal To',
            LessThan: 'Less Than',
            LessThanOrEqualTo: 'Less Than Or Equal To',
            Between: 'Between',
            NotBetween: 'Not Between',
            And: 'and',
            /* tslint:enable */
            NotEquals: 'Not Equals',
            AllValues: 'All Values',
            conditionalFormating: 'Conditional Formatting',
            apply: 'APPLY',
            condition: 'Add Condition',
            formatLabel: 'Format'
        };
        this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);
        this.isDragging = false;
        this.addInternalEvents();
    };
    PivotView.prototype.onBeforeTooltipOpen = function (args) {
        args.element.classList.add('e-pivottooltipwrap');
    };
    PivotView.prototype.initProperties = function () {
        this.setProperties({ pivotValues: [] }, true);
        this.queryCellInfo = this.gridSettings.queryCellInfo ? this.gridSettings.queryCellInfo.bind(this) : undefined;
        this.headerCellInfo = this.gridSettings.headerCellInfo ? this.gridSettings.headerCellInfo.bind(this) : undefined;
        this.resizing = this.gridSettings.resizing ? this.gridSettings.resizing.bind(this) : undefined;
        this.resizeStop = this.gridSettings.resizeStop ? this.gridSettings.resizeStop.bind(this) : undefined;
        this.pdfHeaderQueryCellInfo = this.gridSettings.pdfHeaderQueryCellInfo ?
            this.gridSettings.pdfHeaderQueryCellInfo.bind(this) : undefined;
        this.pdfQueryCellInfo = this.gridSettings.pdfQueryCellInfo ? this.gridSettings.pdfQueryCellInfo.bind(this) : undefined;
        this.excelHeaderQueryCellInfo = this.gridSettings.excelHeaderQueryCellInfo ?
            this.gridSettings.excelHeaderQueryCellInfo.bind(this) : undefined;
        this.excelQueryCellInfo = this.gridSettings.excelQueryCellInfo ?
            this.gridSettings.excelQueryCellInfo.bind(this) : undefined;
        this.columnDragStart = this.gridSettings.columnDragStart ? this.gridSettings.columnDragStart.bind(this) : undefined;
        this.columnDrag = this.gridSettings.columnDrag ? this.gridSettings.columnDrag.bind(this) : undefined;
        this.columnDrop = this.gridSettings.columnDrop ? this.gridSettings.columnDrop.bind(this) : undefined;
        if (this.gridSettings.rowHeight === null) {
            this.setProperties({ gridSettings: { rowHeight: this.isAdaptive ? 48 : 36 } }, true);
        }
        if (this.enableVirtualization) {
            this.height = (typeof this.height === 'string' && this.height.indexOf('%') === -1) ?
                Number(this.height.split('px')[0]) : this.height;
            this.width = (typeof this.width === 'string' && this.width.indexOf('%') === -1) ?
                Number(this.width.split('px')[0]) : this.width;
            this.height = typeof this.height === 'number' ? this.height : 300;
            this.width = typeof this.width === 'number' ? this.width : 800;
        }
        if (this.enableVirtualization) {
            var colValues = 1;
            var rowValues = 1;
            if (this.dataSource.valueAxis === 'row') {
                rowValues = this.dataSource.values.length;
            }
            else {
                colValues = this.dataSource.values.length;
            }
            this.pageSettings = {
                columnCurrentPage: 1, rowCurrentPage: 1,
                columnSize: Math.ceil((Math.floor(this.width /
                    this.gridSettings.columnWidth) - 1) / colValues),
                rowSize: Math.ceil(Math.floor(this.height / this.gridSettings.rowHeight) / rowValues)
            };
            if (this.allowExcelExport) {
                PivotView_1.Inject(ExcelExport);
            }
            if (this.allowPdfExport) {
                PivotView_1.Inject(PDFExport);
            }
        }
    };
    /**
     * Initialize the control rendering
     * @returns void
     * @hidden
     */
    PivotView.prototype.render = function () {
        createSpinner({ target: this.element }, this.createElement);
        this.trigger(events.load, { 'dataSource': this.dataSource });
        this.updateClass();
        this.notify(events.initSubComponent, {});
        this.notify(events.initialLoad, {});
        if (this.isAdaptive) {
            this.contextMenuModule.render();
        }
    };
    /**
     * Register the internal events.
     * @returns void
     * @hidden
     */
    PivotView.prototype.addInternalEvents = function () {
        this.on(events.initialLoad, this.generateData, this);
        this.on(events.dataReady, this.renderPivotGrid, this);
        this.on(events.contentReady, this.onContentReady, this);
    };
    /**
     * De-Register the internal events.
     * @returns void
     * @hidden
     */
    PivotView.prototype.removeInternalEvents = function () {
        this.off(events.initialLoad, this.generateData);
        this.off(events.dataReady, this.renderPivotGrid);
        this.off(events.contentReady, this.onContentReady);
    };
    /**
     * Get the Pivot widget properties to be maintained in the persisted state.
     * @returns {string}
     * @hidden
     */
    PivotView.prototype.getPersistData = function () {
        var keyEntity = ['dataSource', 'pivotValues', 'gridSettings'];
        return this.addOnPersist(keyEntity);
    };
    /**
     * It returns the Module name.
     * @returns string
     * @hidden
     */
    PivotView.prototype.getModuleName = function () {
        return 'pivotview';
    };
    /**
     * Copy the selected rows or cells data into clipboard.
     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.
     * @returns {void}
     * @hidden
     */
    PivotView.prototype.copy = function (withHeader) {
        this.grid.copy(withHeader);
    };
    /**
     * By default, prints all the pages of the Grid and hides the pager.
     * > You can customize print options using the
     * [`printMode`](./api-pivotgrid.html#printmode-string).
     * @returns {void}
     * @hidden
     */
    // public print(): void {
    //     this.grid.print();
    // }
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @hidden
     */
    PivotView.prototype.onPropertyChanged = function (newProp, oldProp) {
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'dataSource':
                    this.notify(events.initialLoad, {});
                    break;
                case 'pivotValues':
                    this.notify(events.dataReady, {});
                    break;
                case 'gridSettings':
                    this.renderModule.updateGridSettings();
                    break;
                case 'locale':
                case 'currencyCode':
                    this.toolTip.destroy();
                    _super.prototype.refresh.call(this);
                    break;
                case 'enableRtl':
                    this.notify(events.dataReady, {});
                    this.updateClass();
                    break;
                case 'groupingBarSettings':
                    this.axisFieldModule.render();
                    break;
            }
        }
    };
    /**
     * Render the UI section of PivotView.
     * @returns void
     * @hidden
     */
    PivotView.prototype.renderPivotGrid = function () {
        if (this.enableVirtualization) {
            this.virtualscrollModule = new VirtualScroll(this);
        }
        this.renderModule = new Render(this);
        this.renderModule.render();
        if (this.showFieldList || this.showGroupingBar) {
            this.notify(events.uiUpdate, this);
        }
        this.trigger(events.dataBound);
        if (this.allowConditionalFormatting) {
            this.applyFormatting();
        }
    };
    /**
     * Updates the PivotEngine using dataSource from Pivot View component.
     * @method updateDataSource
     * @return {void}
     * @hidden
     */
    PivotView.prototype.updateDataSource = function (isRefreshGrid) {
        showSpinner(this.element);
        this.engineModule = new PivotEngine(this.dataSource, '', this.engineModule.fieldList, this.pageSettings, this.enableValueSorting);
        var eventArgs = {
            dataSource: this.dataSource,
            pivotValues: this.engineModule.pivotValues
        };
        this.trigger(events.enginePopulated, eventArgs);
        this.pivotCommon.engineModule = this.engineModule;
        this.pivotCommon.dataSource = this.dataSource;
        this.setProperties({ pivotValues: this.engineModule.pivotValues }, true);
        this.renderPivotGrid();
    };
    /**
     * To destroy the PivotView elements.
     * @returns void
     */
    PivotView.prototype.destroy = function () {
        this.removeInternalEvents();
        if (this.showGroupingBar && this.groupingBarModule) {
            this.groupingBarModule.destroy();
        }
        if (this.enableVirtualization && this.virtualscrollModule) {
            this.virtualscrollModule.destroy();
        }
        if (this.allowConditionalFormatting && this.conditionalFormattingModule) {
            this.conditionalFormattingModule.destroy();
        }
        if (this.isAdaptive && this.contextMenuModule) {
            this.contextMenuModule.destroy();
        }
        if (this.keyboardModule) {
            this.keyboardModule.destroy();
        }
        this.unwireEvents();
        removeClass([this.element], cls.ROOT);
        removeClass([this.element], cls.RTL);
        removeClass([this.element], cls.DEVICE);
        this.element.innerHTML = '';
        _super.prototype.destroy.call(this);
    };
    /**
     * Export Pivot widget data to Excel file(.xlsx).
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    /* tslint:disable-next-line:no-any */
    PivotView.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {
        if (this.enableVirtualization) {
            this.excelExportModule.exportToExcel('Excel');
        }
        else {
            this.grid.excelExport(excelExportProperties, isMultipleExport, workbook, isBlob);
        }
    };
    /**
     * Export PivotGrid data to CSV file.
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    /* tslint:disable-next-line:no-any */
    PivotView.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {
        if (this.enableVirtualization) {
            this.excelExportModule.exportToExcel('CSV');
        }
        else {
            this.grid.csvExport(excelExportProperties, isMultipleExport, workbook, isBlob);
        }
    };
    /**
     * Export Pivot widget data to PDF document.
     * @param  {pdfExportProperties} PdfExportProperties - Defines the export properties of the Grid.
     * @param  {isMultipleExport} isMultipleExport - Define to enable multiple export.
     * @param  {pdfDoc} pdfDoc - Defined the Pdf Document if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    PivotView.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
        if (this.enableVirtualization) {
            this.pdfExportModule.exportToPDF();
        }
        else {
            this.grid.pdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);
        }
    };
    PivotView.prototype.onDrill = function (target) {
        var fieldName = target.parentElement.getAttribute('fieldname');
        var memberName = this.engineModule.pivotValues[Number(target.parentElement.getAttribute('index'))][Number(target.parentElement.getAttribute('aria-colindex'))].actualText;
        this.engineModule.fieldList[fieldName].members[memberName].isDrilled =
            target.classList.contains(cls.COLLAPSE) ? false : true;
        var dataSource = extend({}, this.dataSource, null, true);
        var fieldAvail = false;
        var prop = dataSource.properties;
        if (!prop.drilledMembers || prop.drilledMembers.length === 0) {
            prop.drilledMembers = [{ name: fieldName, items: [memberName] }];
        }
        else {
            for (var fCnt = 0; fCnt < prop.drilledMembers.length; fCnt++) {
                var field = prop.drilledMembers[fCnt];
                if (field.name === fieldName) {
                    fieldAvail = true;
                    var memIndex = field.items.indexOf(memberName);
                    if (memIndex > -1) {
                        field.items.splice(memIndex, 1);
                    }
                    else {
                        field.items.push(memberName);
                    }
                }
                else {
                    continue;
                }
            }
            if (!fieldAvail) {
                prop.drilledMembers.push({ name: fieldName, items: [memberName] });
            }
        }
        this.setProperties({ dataSource: { drilledMembers: prop.drilledMembers } }, true);
        showSpinner(this.element);
        this.engineModule.generateGridData(this.dataSource);
        this.setProperties({ pivotValues: this.engineModule.pivotValues }, true);
        this.renderPivotGrid();
    };
    PivotView.prototype.onContentReady = function () {
        if (this.showFieldList) {
            hideSpinner(this.pivotFieldListModule.fieldListSpinnerElement);
        }
        else if (this.fieldListSpinnerElement) {
            hideSpinner(this.fieldListSpinnerElement);
        }
        if (!this.isEmptyGrid) {
            hideSpinner(this.element);
        }
        else {
            this.isEmptyGrid = false;
        }
        if (this.enableVirtualization && this.engineModule) {
            if (this.element.querySelector('.' + cls.MOVABLECONTENT_DIV) &&
                !this.element.querySelector('.' + cls.MOVABLECONTENT_DIV).querySelector('.' + cls.VIRTUALTRACK_DIV)) {
                this.virtualDiv = createElement('div', { className: cls.VIRTUALTRACK_DIV });
                this.element.querySelector('.' + cls.MOVABLECONTENT_DIV).appendChild(this.virtualDiv);
            }
            if (this.element.querySelector('.' + cls.MOVABLEHEADER_DIV) &&
                !this.element.querySelector('.' + cls.MOVABLEHEADER_DIV).querySelector('.' + cls.VIRTUALTRACK_DIV)) {
                this.virtualHeaderDiv = createElement('div', { className: cls.VIRTUALTRACK_DIV });
                this.element.querySelector('.' + cls.MOVABLEHEADER_DIV).appendChild(this.virtualHeaderDiv);
            }
            else {
                this.virtualHeaderDiv =
                    this.element.querySelector('.' + cls.MOVABLEHEADER_DIV).querySelector('.' + cls.VIRTUALTRACK_DIV);
            }
            var movableTable = this.element.querySelector('.' + cls.MOVABLECONTENT_DIV).querySelector('.e-table');
            var vHeight = (this.gridSettings.rowHeight * this.engineModule.rowCount + 0.1 - movableTable.clientHeight);
            var vWidth = (this.gridSettings.columnWidth * this.engineModule.columnCount
                - this.grid.columns[0].width);
            setStyleAttribute(this.virtualDiv, {
                height: (vHeight > 0.1 ? vHeight : 0.1) + 'px',
                width: (vWidth > 0.1 ? vWidth : 0.1) + 'px'
            });
            setStyleAttribute(this.virtualHeaderDiv, {
                height: 0, width: (vWidth > 0.1 ? vWidth : 0.1) + 'px'
            });
            var mCnt = this.element.querySelector('.' + cls.MOVABLECONTENT_DIV);
            var fCnt = this.element.querySelector('.' + cls.FROZENCONTENT_DIV);
            var mHdr = this.element.querySelector('.' + cls.MOVABLEHEADER_DIV);
            setStyleAttribute(fCnt.querySelector('.e-table'), {
                transform: 'translate(' + 0 + 'px,' + this.scrollPosObject.verticalSection + 'px)'
            });
            setStyleAttribute(mCnt.querySelector('.e-table'), {
                transform: 'translate(' + this.scrollPosObject.horizontalSection + 'px,' + this.scrollPosObject.verticalSection + 'px)'
            });
            setStyleAttribute(mHdr.querySelector('.e-table'), {
                transform: 'translate(' + this.scrollPosObject.horizontalSection + 'px,' + 0 + 'px)'
            });
        }
        this.element.style.minWidth = '500px';
        this.grid.element.style.minWidth = '500px';
        this.unwireEvents();
        this.wireEvents();
    };
    PivotView.prototype.setToolTip = function (args) {
        var colIndex = Number(args.target.getAttribute('aria-colindex'));
        var rowIndex = Number(args.target.getAttribute('index'));
        var cell = this.pivotValues[rowIndex][colIndex];
        this.toolTip.content = '';
        if (cell) {
            this.toolTip.content = '<div class=' + cls.PIVOTTOOLTIP + '><p class=' + cls.TOOLTIP_HEADER + '>' +
                this.localeObj.getConstant('row') + ':</p><p class=' + cls.TOOLTIP_CONTENT + '>' +
                this.getRowText(rowIndex, 0) +
                '</p></br><p class=' + cls.TOOLTIP_HEADER + '>' +
                this.localeObj.getConstant('column') + ':</p><p class=' + cls.TOOLTIP_CONTENT + '>' +
                this.getColText(0, colIndex, rowIndex) + '</p></br>' + '<p class=' + cls.TOOLTIP_HEADER + '>' +
                this.localeObj.getConstant('value') + ':</p><p class=' + cls.TOOLTIP_CONTENT + '>' +
                ((cell.formattedText === '0' ? this.localeObj.getConstant('noValue') : cell.formattedText)) + '</p></div>';
        }
        else {
            args.cancel = true;
        }
    };
    PivotView.prototype.getRowText = function (rowIndex, colIndex) {
        var cell = this.pivotValues[rowIndex][colIndex];
        var level = cell.level;
        var rowText = cell.type === 'grand sum' ? this.localeObj.getConstant('grandTotal') : cell.formattedText;
        while (level > 0) {
            rowIndex--;
            cell = this.pivotValues[rowIndex][colIndex];
            if (level > cell.level) {
                rowText = rowText + ' - ' + (cell.type === 'grand sum' ? this.localeObj.getConstant('grandTotal') :
                    cell.formattedText);
                level = cell.level;
            }
        }
        return rowText.split(' - ').reverse().join(' - ');
    };
    PivotView.prototype.getColText = function (rowIndex, colIndex, limit) {
        var cell = this.pivotValues[0][colIndex];
        var axis = cell.axis;
        var colText = cell.type === 'grand sum' ? this.localeObj.getConstant('grandTotal') : cell.formattedText;
        while (axis !== 'value' && limit > rowIndex) {
            rowIndex++;
            if (this.pivotValues[rowIndex]) {
                cell = this.pivotValues[rowIndex][colIndex];
                axis = cell.axis;
                if (cell.type !== 'sum' && cell.type !== 'grand sum' && axis !== 'value') {
                    colText = colText + ' - ' + cell.formattedText;
                }
            }
        }
        return colText;
    };
    PivotView.prototype.updateClass = function () {
        if (this.enableRtl) {
            addClass([this.element], cls.RTL);
        }
        else {
            removeClass([this.element], cls.RTL);
        }
        if (this.isAdaptive) {
            addClass([this.element], cls.DEVICE);
        }
        else {
            removeClass([this.element], cls.DEVICE);
        }
    };
    PivotView.prototype.wireEvents = function () {
        EventHandler.add(this.element, this.isAdaptive ? 'touchend' : 'click', this.mouseClickHandler, this);
        window.addEventListener('resize', this.onWindowResize.bind(this), true);
    };
    PivotView.prototype.mouseClickHandler = function (e) {
        var target = e.target;
        if ((target.classList.contains('e-headercell') ||
            target.classList.contains('e-headercelldiv') ||
            target.classList.contains('e-rowsheader') ||
            target.classList.contains('e-rowcell') ||
            target.classList.contains('e-stackedheadercelldiv') ||
            target.classList.contains('e-headertext') ||
            target.classList.contains('e-ascending') ||
            target.classList.contains('e-descending')) && this.enableValueSorting) {
            var ele = null;
            if (target.classList.contains('e-headercell') || target.classList.contains('e-rowsheader')
                || target.classList.contains('e-rowcell')) {
                ele = target;
            }
            else if (target.classList.contains('e-stackedheadercelldiv') || target.classList.contains('e-headercelldiv') ||
                target.classList.contains('e-ascending') || target.classList.contains('e-descending')) {
                ele = target.parentElement;
            }
            else if (target.classList.contains('e-headertext')) {
                ele = target.parentElement.parentElement;
            }
            this.CellClicked(target);
            if ((ele.parentElement.parentElement.parentElement.parentElement.classList.contains('e-movableheader')
                && this.dataSource.valueAxis === 'column') || (ele.parentElement.classList.contains('e-row') &&
                this.dataSource.valueAxis === 'row')) {
                /* tslint:disable */
                var colIndex = Number(ele.getAttribute('aria-colindex'));
                var rowIndex = Number(ele.getAttribute('index'));
                if (this.dataSource.valueAxis === 'row' && this.dataSource.values.length > 1) {
                    rowIndex = this.pivotValues[rowIndex][colIndex].type === 'value' ? rowIndex : (rowIndex + 1);
                }
                else if (this.dataSource.valueAxis === 'column' && this.dataSource.values.length > 1) {
                    colIndex = (Number(ele.getAttribute('aria-colindex')) + Number(ele.getAttribute('aria-colspan')) - 1);
                    rowIndex = this.engineModule.headerContent.length - 1;
                }
                this.setProperties({
                    dataSource: {
                        valueSortSettings: {
                            columnIndex: (Number(ele.getAttribute('aria-colindex')) +
                                Number(ele.getAttribute('aria-colspan')) - 1),
                            sortOrder: this.dataSource.valueSortSettings.sortOrder === 'Descending' ? 'Ascending' : 'Descending',
                            headerText: this.pivotValues[rowIndex][colIndex].valueSort.levelName,
                            headerDelimiter: this.dataSource.valueSortSettings.headerDelimiter ?
                                this.dataSource.valueSortSettings.headerDelimiter : '.'
                        }
                    }
                }, true);
                /* tslint:enable */
                showSpinner(this.element);
                this.engineModule.enableValueSorting = true;
                this.engineModule.generateGridData(this.dataSource, this.engineModule.headerCollection);
                this.setProperties({ pivotValues: this.engineModule.pivotValues }, true);
                this.renderPivotGrid();
            }
        }
        else if (target.classList.contains(cls.COLLAPSE) || target.classList.contains(cls.EXPAND)) {
            this.onDrill(target);
        }
        else {
            this.CellClicked(target);
            return;
        }
    };
    /** @hidden */
    PivotView.prototype.onWindowResize = function () {
        var _this = this;
        /* tslint:disable */
        clearTimeout(this.timeOutObj);
        this.timeOutObj = setTimeout(function () {
            if (_this.element && _this.element.classList.contains('e-pivotview') && _this.engineModule) {
                var colWidth = _this.renderModule.calculateColWidth(_this.dataSource.values.length > 0 ?
                    _this.engineModule.pivotValues[0].length : 2);
                _this.grid.width = _this.renderModule.calculateGridWidth();
                for (var cCnt = 0; cCnt < _this.grid.columns.length; cCnt++) {
                    if (cCnt === 0 && colWidth < (_this.showGroupingBar && _this.groupingBarModule ? 250 : 200)) {
                        _this.grid.columns[cCnt].width = (_this.showGroupingBar && _this.groupingBarModule ? 250 : 200);
                    }
                    else {
                        _this.grid.columns[cCnt].width = colWidth;
                    }
                }
                _this.grid.headerModule.refreshUI();
                if (_this.showGroupingBar && _this.groupingBarModule && _this.element.querySelector('.' + cls.GROUPING_BAR_CLASS)) {
                    _this.groupingBarModule.setGridRowWidth();
                }
            }
        }, 500);
        /* tslint:enable */
    };
    PivotView.prototype.CellClicked = function (target) {
        var ele = null;
        if (target.classList.contains('e-headercell') || target.classList.contains('e-rowcell')) {
            ele = target;
        }
        else if (target.classList.contains('e-stackedheadercelldiv') || target.classList.contains('e-cellvalue') ||
            target.classList.contains('e-headercelldiv')) {
            ele = target.parentElement;
        }
        else if (target.classList.contains('e-headertext')) {
            ele = target.parentElement.parentElement;
        }
        if (ele) {
            if (this.cellClick) {
                this.trigger(events.cellClick, {
                    currentCell: ele,
                    data: this.pivotValues[Number(ele.getAttribute('index'))][Number(ele.getAttribute('aria-colindex'))]
                });
            }
        }
    };
    PivotView.prototype.unwireEvents = function () {
        EventHandler.remove(this.element, this.isAdaptive ? 'touchend' : 'click', this.mouseClickHandler);
        window.removeEventListener('resize', this.onWindowResize.bind(this), true);
    };
    PivotView.prototype.renderEmptyGrid = function () {
        this.isEmptyGrid = true;
        this.element.innerHTML = '';
        this.renderModule = new Render(this);
        this.renderModule.bindGrid(this, true);
        /* tslint:disable:no-empty */
        this.grid.showSpinner = function () { };
        this.grid.hideSpinner = function () { };
        /* tslint:enable:no-empty */
        this.element.appendChild(createElement('div', { id: this.element.id + '_grid' }));
        this.grid.appendTo('#' + this.element.id + '_grid');
    };
    PivotView.prototype.initEngine = function () {
        this.trigger(events.enginePopulating, { 'dataSource': this.dataSource });
        this.engineModule = new PivotEngine(this.dataSource, '', undefined, this.pageSettings, this.enableValueSorting);
        this.setProperties({ pivotValues: this.engineModule.pivotValues }, true);
        this.trigger(events.enginePopulated, { 'pivotValues': this.pivotValues });
        this.notify(events.dataReady, {});
        this.isEmptyGrid = false;
    };
    PivotView.prototype.generateData = function () {
        var _this = this;
        this.renderEmptyGrid();
        showSpinner(this.element);
        /* tslint:disable */
        if (this.dataSource && this.dataSource.data) {
            if (this.dataSource.data instanceof DataManager) {
                setTimeout(function () {
                    _this.dataSource.data.executeQuery(new Query()).then(function (e) {
                        if (!_this.element.querySelector('.e-spinner-pane')) {
                            showSpinner(_this.element);
                        }
                        _this.setProperties({ dataSource: { data: e.result } }, true);
                        _this.initEngine();
                    });
                }, 100);
            }
            else if (this.dataSource.data.length > 0) {
                this.initEngine();
            }
            else {
                hideSpinner(this.element);
            }
        }
        else {
            hideSpinner(this.element);
        }
        /* tslint:enable */
    };
    PivotView.prototype.applyFormatting = function () {
        if (this.pivotValues) {
            for (var i = 0; i < this.pivotValues.length; i++) {
                for (var j = 1; (this.pivotValues[i] && j < this.pivotValues[i].length); j++) {
                    if (this.pivotValues[i][j].axis === 'value') {
                        this.pivotValues[i][j].style = undefined;
                        this.pivotValues[i][j].cssClass = undefined;
                        var format_1 = this.dataSource.conditionalFormatSettings;
                        for (var k = 0; k < format_1.length; k++) {
                            if (this.checkCondition(this.pivotValues[i][j].value, format_1[k].conditions, format_1[k].value1, format_1[k].value2)) {
                                var len = this.dataSource.values.length > 1 ? this.dataSource.columns.length :
                                    this.dataSource.columns.length === 0 ? 0 : this.dataSource.columns.length - 1;
                                if ((!format_1[k].measure || this.dataSource.values.length === 1 ||
                                    (this.pivotValues[len][j].
                                        valueSort.levelName.indexOf(format_1[k].measure) > -1)) && (!format_1[k].label ||
                                    ((this.pivotValues[this.dataSource.values.length > 1 ? (len - 1) : len][j].
                                        valueSort[format_1[k].label]) || (this.pivotValues[i][0]
                                        .valueSort[format_1[k].label])))) {
                                    if (format_1[k].style && format_1[k].style.backgroundColor) {
                                        format_1[k].style.backgroundColor = this.conditionalFormattingModule
                                            .isHex(format_1[k].style.backgroundColor.substr(1)) ? format_1[k].style.backgroundColor :
                                            this.conditionalFormattingModule.colourNameToHex(format_1[k].style.backgroundColor);
                                    }
                                    if (format_1[k].style && format_1[k].style.color) {
                                        format_1[k].style.color = this.conditionalFormattingModule
                                            .isHex(format_1[k].style.color.substr(1)) ? format_1[k].style.color :
                                            this.conditionalFormattingModule.colourNameToHex(format_1[k].style.color);
                                    }
                                    this.pivotValues[i][j].style = format_1[k].style;
                                    this.pivotValues[i][j].cssClass = 'format' + this.element.id + k;
                                }
                            }
                        }
                    }
                }
            }
            var format = this.dataSource.conditionalFormatSettings;
            for (var k = 0; k < format.length; k++) {
                var sheet = (function () {
                    var style = document.createElement('style');
                    style.appendChild(document.createTextNode(''));
                    document.head.appendChild(style);
                    return style.sheet;
                })();
                var str = 'color: ' + format[k].style.color + '!important;background-color: ' + format[k].style.backgroundColor +
                    '!important;font-size: ' + format[k].style.fontSize + '!important;font-family: ' + format[k].style.fontFamily +
                    ' !important;';
                sheet.insertRule('.format' + this.element.id + k + '{' + str + '}', 0);
            }
        }
    };
    PivotView.prototype.checkCondition = function (cellValue, conditions, conditionalValue1, conditionalValue2) {
        switch (conditions) {
            case 'LessThan':
                return cellValue < conditionalValue1;
            case 'LessThanOrEqualTo':
                return cellValue <= conditionalValue1;
            case 'GreaterThan':
                return cellValue > conditionalValue1;
            case 'GreaterThanOrEqualTo':
                return cellValue >= conditionalValue1;
            case 'Equals':
                return cellValue === conditionalValue1;
            case 'NotEquals':
                return cellValue !== conditionalValue1;
            case 'Between':
                return (conditionalValue1 < conditionalValue2 && cellValue >= conditionalValue1 && cellValue <= conditionalValue2) ||
                    (conditionalValue1 > conditionalValue2 && cellValue <= conditionalValue1 && cellValue >= conditionalValue2);
            case 'NotBetween':
                return !((conditionalValue1 < conditionalValue2 && cellValue >= conditionalValue1 && cellValue <= conditionalValue2) ||
                    (conditionalValue1 > conditionalValue2 && cellValue <= conditionalValue1 && cellValue >= conditionalValue2));
            default:
                return false;
        }
    };
    __decorate([
        Property('USD')
    ], PivotView.prototype, "currencyCode", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "showFieldList", void 0);
    __decorate([
        Complex({}, GridSettings)
    ], PivotView.prototype, "gridSettings", void 0);
    __decorate([
        Complex({}, GroupingBarSettings)
    ], PivotView.prototype, "groupingBarSettings", void 0);
    __decorate([
        Complex({}, DataSource)
    ], PivotView.prototype, "dataSource", void 0);
    __decorate([
        Property()
    ], PivotView.prototype, "pivotValues", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "showGroupingBar", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "showValuesButton", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "allowCalculatedField", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "enableValueSorting", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "allowConditionalFormatting", void 0);
    __decorate([
        Property('auto')
    ], PivotView.prototype, "height", void 0);
    __decorate([
        Property('auto')
    ], PivotView.prototype, "width", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "allowExcelExport", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "enableVirtualization", void 0);
    __decorate([
        Property(false)
    ], PivotView.prototype, "allowPdfExport", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "queryCellInfo", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "headerCellInfo", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "resizing", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "resizeStop", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "pdfHeaderQueryCellInfo", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "pdfQueryCellInfo", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "excelHeaderQueryCellInfo", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "excelQueryCellInfo", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "columnDragStart", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "columnDrag", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "columnDrop", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "load", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "enginePopulating", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "enginePopulated", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "dataBound", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "created", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "destroyed", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "beforeExport", void 0);
    __decorate([
        Event()
    ], PivotView.prototype, "cellClick", void 0);
    PivotView = PivotView_1 = __decorate([
        NotifyPropertyChanges
    ], PivotView);
    return PivotView;
    var PivotView_1;
}(Component));
export { PivotView };
