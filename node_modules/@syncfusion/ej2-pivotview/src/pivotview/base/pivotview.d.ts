import { Component, ModuleDeclaration } from '@syncfusion/ej2-base';
import { EmitType, ChildProperty } from '@syncfusion/ej2-base';
import { Internationalization, L10n, INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { PivotEngine, IPivotValues, IPageSettings } from '../../base/engine';
import { PivotViewModel, GroupingBarSettingsModel } from './pivotview-model';
import { Tooltip } from '@syncfusion/ej2-popups';
import { AxisFields } from '../../common/grouping-bar/axis-field-renderer';
import { LoadEventArgs, BeforeExportEventArgs, EnginePopulatingEventArgs } from '../../common/base/interface';
import { EnginePopulatedEventArgs, ResizeInfo, ScrollInfo } from '../../common/base/interface';
import { CellClickEventArgs } from '../../common/base/interface';
import { Render } from '../renderer/render';
import { PivotCommon } from '../../common/base/pivot-common';
import { Common } from '../../common/actions/common';
import { GroupingBar } from '../../common/grouping-bar/grouping-bar';
import { DataSourceModel } from '../model/dataSource-model';
import { GridSettingsModel } from '../model/gridsettings-model';
import { PivotButton } from '../../common/actions/pivot-button';
import { PivotFieldList } from '../../field-list/base/field-list';
import { Grid, QueryCellInfoEventArgs, HeaderCellInfoEventArgs, ResizeArgs } from '@syncfusion/ej2-grids';
import { PdfExportProperties, ExcelExportProperties, ExcelQueryCellInfoEventArgs, ColumnDragEventArgs } from '@syncfusion/ej2-grids';
import { ExcelHeaderQueryCellInfoEventArgs, PdfQueryCellInfoEventArgs, PdfHeaderQueryCellInfoEventArgs } from '@syncfusion/ej2-grids';
import { ExcelExport } from '../actions/excel-export';
import { PDFExport } from '../actions/pdf-export';
import { CalculatedField } from '../../common/calculatedfield/calculated-field';
import { KeyboardInteraction } from '../actions/keyboard';
import { PivotContextMenu } from '../../common/popups/context-menu';
import { ConditionalFormatting } from '../../common/conditionalformatting/conditional-formatting';
import { VirtualScroll } from '../actions/virtualscroll';
/**
 * It holds the settings of Grouping Bar.
 */
export declare class GroupingBarSettings extends ChildProperty<GroupingBarSettings> {
    /**
     * It allows to set the visibility of filter icon in GroupingBar button
     * @default true
     */
    showFilterIcon: boolean;
    /**
     * It allows to set the visibility of sort icon in GroupingBar button
     * @default true
     */
    showSortIcon: boolean;
    /**
     * It allows to set the visibility of remove icon in GroupingBar button
     * @default true
     */
    showRemoveIcon: boolean;
}
/**
 * Represents the PivotView component.
 * ```html
 * <div id="PivotView"></div>
 * <script>
 *  var pivotviewObj = new PivotView({ enableGroupingBar: true });
 *  pivotviewObj.appendTo("#pivotview");
 * </script>
 * ```
 */
export declare class PivotView extends Component<HTMLElement> implements INotifyPropertyChanged {
    /** @hidden */
    globalize: Internationalization;
    /** @hidden */
    localeObj: L10n;
    /** @hidden */
    toolTip: Tooltip;
    /** @hidden */
    grid: Grid;
    /** @hidden */
    isDragging: boolean;
    /** @hidden */
    isAdaptive: Boolean;
    /** @hidden */
    fieldListSpinnerElement: HTMLElement;
    pivotView: PivotView;
    /** @hidden */
    renderModule: Render;
    /** @hidden */
    engineModule: PivotEngine;
    /** @hidden */
    pivotCommon: PivotCommon;
    /** @hidden */
    axisFieldModule: AxisFields;
    /** @hidden */
    groupingBarModule: GroupingBar;
    /** @hidden */
    pivotButtonModule: PivotButton;
    /** @hidden */
    commonModule: Common;
    /** @hidden */
    pivotFieldListModule: PivotFieldList;
    /** @hidden */
    excelExportModule: ExcelExport;
    /** @hidden */
    pdfExportModule: PDFExport;
    /** @hidden */
    virtualscrollModule: VirtualScroll;
    /** @hidden */
    calculatedFieldModule: CalculatedField;
    /** @hidden */
    conditionalFormattingModule: ConditionalFormatting;
    /** @hidden */
    keyboardModule: KeyboardInteraction;
    /** @hidden */
    contextMenuModule: PivotContextMenu;
    private defaultLocale;
    private timeOutObj;
    private isEmptyGrid;
    /** @hidden */
    pageSettings: IPageSettings;
    /** @hidden */
    virtualDiv: HTMLElement;
    /** @hidden */
    virtualHeaderDiv: HTMLElement;
    /** @hidden */
    resizeInfo: ResizeInfo;
    /** @hidden */
    scrollPosObject: ScrollInfo;
    protected needsID: boolean;
    /**
     * Defines the currencyCode format of the Pivot widget columns
     * @private
     */
    private currencyCode;
    /**
     * It allows to render pivotfieldlist.
     * @default false
     */
    showFieldList: boolean;
    /**
     * Configures the features settings of Pivot widget.
     */
    gridSettings: GridSettingsModel;
    /**
     * Configures the settings of GroupingBar.
     */
    groupingBarSettings: GroupingBarSettingsModel;
    /**
     * It allows the user to configure the pivot report as per the user need.
     */
    dataSource: DataSourceModel;
    /**
     * It holds the pivot engine data which renders the Pivot widget.
     */
    pivotValues: IPivotValues;
    /**
     * Enables the display of GroupingBar allowing you to filter, sort, and remove fields obtained from the datasource.
     * @default false
     */
    showGroupingBar: boolean;
    /**
     * It shows a common button for value fields to move together in column or row axis
     * @default false
     */
    showValuesButton: boolean;
    /**
     * It allows to enable calculated field in PivotView.
     * @default false
     */
    allowCalculatedField: boolean;
    /**
     * It allows to enable Value Sorting in PivotView.
     * @default false
     */
    enableValueSorting: boolean;
    /**
     * It allows to enable Conditional Formatting in PivotView.
     * @default false
     */
    allowConditionalFormatting: boolean;
    /**
     * Pivot widget. (Note change all occurrences)
     * @default auto
     */
    height: string | number;
    /**
     * It allows to set the width of Pivot widget.
     * @default auto
     */
    width: string | number;
    /**
     * If `allowExcelExport` is set to true, then it will allow the user to export pivotview to Excel file.
     * @default false
     */
    allowExcelExport: boolean;
    /**
     * If `enableVirtualization` set to true, then the Grid will render only the rows and the columns visible within the view-port
     * and load subsequent rows and columns on vertical scrolling. This helps to load large dataset in Pivot Grid.
     * @default false
     */
    enableVirtualization: boolean;
    /**
     * If `allowPdfExport` is set to true, then it will allow the user to export pivotview to Pdf file.
     * @default false
     */
    allowPdfExport: boolean;
    /** @hidden */
    protected queryCellInfo: EmitType<QueryCellInfoEventArgs>;
    /** @hidden */
    protected headerCellInfo: EmitType<HeaderCellInfoEventArgs>;
    /** @hidden */
    protected resizing: EmitType<ResizeArgs>;
    /** @hidden */
    protected resizeStop: EmitType<ResizeArgs>;
    /** @hidden */
    protected pdfHeaderQueryCellInfo: EmitType<PdfHeaderQueryCellInfoEventArgs>;
    /** @hidden */
    protected pdfQueryCellInfo: EmitType<PdfQueryCellInfoEventArgs>;
    /** @hidden */
    protected excelHeaderQueryCellInfo: EmitType<ExcelHeaderQueryCellInfoEventArgs>;
    /** @hidden */
    protected excelQueryCellInfo: EmitType<ExcelQueryCellInfoEventArgs>;
    /** @hidden */
    protected columnDragStart: EmitType<ColumnDragEventArgs>;
    /** @hidden */
    protected columnDrag: EmitType<ColumnDragEventArgs>;
    /** @hidden */
    protected columnDrop: EmitType<ColumnDragEventArgs>;
    /**
     * This allows any customization of PivotView properties on initial rendering.
     * @event
     */
    load: EmitType<LoadEventArgs>;
    /**
     * Triggers before the pivot engine starts to populate and allows to customize the pivot datasource settings.
     * @event
     */
    enginePopulating: EmitType<EnginePopulatingEventArgs>;
    /**
     * Triggers after the pivot engine populated and allows to customize the pivot widget.
     * @event
     */
    enginePopulated: EmitType<EnginePopulatedEventArgs>;
    /**
     * Triggers when data source is populated in the Pivot View.
     * @event
     */
    dataBound: EmitType<Object>;
    /**
     * Triggers when data source is created in the Pivot View.
     * @event
     */
    created: EmitType<Object>;
    /**
     * Triggers when data source is destroyed in the Pivot View.
     * @event
     */
    destroyed: EmitType<Object>;
    /**
     * This allows to set properties for exporting.
     * @event
     */
    beforeExport: EmitType<BeforeExportEventArgs>;
    /**
     * Triggers when cell is clicked in the Pivot widget.
     * @event
     */
    cellClick: EmitType<CellClickEventArgs>;
    /**
     * Constructor for creating the widget
     * @param  {PivotViewModel} options?
     * @param  {string|HTMLElement} element?
     */
    constructor(options?: PivotViewModel, element?: string | HTMLElement);
    /**
     * To provide the array of modules needed for control rendering
     * @return {ModuleDeclaration[]}
     * @hidden
     */
    requiredModules(): ModuleDeclaration[];
    /**
     * For internal use only - Initializing internal properties;
     * @private
     */
    protected preRender(): void;
    private onBeforeTooltipOpen(args);
    private initProperties();
    /**
     * Initialize the control rendering
     * @returns void
     * @hidden
     */
    render(): void;
    /**
     * Register the internal events.
     * @returns void
     * @hidden
     */
    addInternalEvents(): void;
    /**
     * De-Register the internal events.
     * @returns void
     * @hidden
     */
    removeInternalEvents(): void;
    /**
     * Get the Pivot widget properties to be maintained in the persisted state.
     * @returns {string}
     * @hidden
     */
    getPersistData(): string;
    /**
     * It returns the Module name.
     * @returns string
     * @hidden
     */
    getModuleName(): string;
    /**
     * Copy the selected rows or cells data into clipboard.
     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.
     * @returns {void}
     * @hidden
     */
    copy(withHeader?: boolean): void;
    /**
     * By default, prints all the pages of the Grid and hides the pager.
     * > You can customize print options using the
     * [`printMode`](./api-pivotgrid.html#printmode-string).
     * @returns {void}
     * @hidden
     */
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @hidden
     */
    onPropertyChanged(newProp: PivotViewModel, oldProp: PivotViewModel): void;
    /**
     * Render the UI section of PivotView.
     * @returns void
     * @hidden
     */
    renderPivotGrid(): void;
    /**
     * Updates the PivotEngine using dataSource from Pivot View component.
     * @method updateDataSource
     * @return {void}
     * @hidden
     */
    updateDataSource(isRefreshGrid?: boolean): void;
    /**
     * To destroy the PivotView elements.
     * @returns void
     */
    destroy(): void;
    /**
     * Export Pivot widget data to Excel file(.xlsx).
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    excelExport(excelExportProperties?: ExcelExportProperties, isMultipleExport?: boolean, workbook?: any, isBlob?: boolean): void;
    /**
     * Export PivotGrid data to CSV file.
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    csvExport(excelExportProperties?: ExcelExportProperties, isMultipleExport?: boolean, workbook?: any, isBlob?: boolean): void;
    /**
     * Export Pivot widget data to PDF document.
     * @param  {pdfExportProperties} PdfExportProperties - Defines the export properties of the Grid.
     * @param  {isMultipleExport} isMultipleExport - Define to enable multiple export.
     * @param  {pdfDoc} pdfDoc - Defined the Pdf Document if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    pdfExport(pdfExportProperties?: PdfExportProperties, isMultipleExport?: boolean, pdfDoc?: Object, isBlob?: boolean): void;
    private onDrill(target);
    private onContentReady();
    private setToolTip(args);
    private getRowText(rowIndex, colIndex);
    private getColText(rowIndex, colIndex, limit);
    private updateClass();
    private wireEvents();
    private mouseClickHandler(e);
    /** @hidden */
    onWindowResize(): void;
    private CellClicked(target);
    private unwireEvents();
    private renderEmptyGrid();
    private initEngine();
    private generateData();
    private applyFormatting();
    private checkCondition(cellValue, conditions, conditionalValue1, conditionalValue2);
}
