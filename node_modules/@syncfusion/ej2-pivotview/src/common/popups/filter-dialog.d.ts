import { PivotCommon } from '../base/pivot-common';
import { TreeView, Tab } from '@syncfusion/ej2-navigations';
import { Dialog } from '@syncfusion/ej2-popups';
import { MaskedTextBox } from '@syncfusion/ej2-inputs';
/**
 * `FilterDialog` module to create filter dialog.
 */
/** @hidden */
export declare class FilterDialog {
    parent: PivotCommon;
    /** @hidden */
    memberTreeView: TreeView;
    /** @hidden */
    allMemberSelect: TreeView;
    /** @hidden */
    editorSearch: MaskedTextBox;
    /** @hidden */
    dialogPopUp: Dialog;
    /** @hidden */
    tabObj: Tab;
    /** @hidden */
    allowExcelLikeFilter: boolean;
    private filterObject;
    /**
     * Constructor for the dialog action.
     * @hidden
     */
    constructor(parent?: PivotCommon);
    /**
     * Creates the member filter dialog for the selected field.
     * @method createFilterDialog
     * @return {void}
     * @hidden
     */
    createFilterDialog(treeData: {
        [key: string]: Object;
    }[], fieldName: string, fieldCaption: string, target: HTMLElement): void;
    private createTreeView(treeData, fieldCaption, fieldName?);
    private createTabMenu(treeData, fieldCaption, fieldName);
    private createCustomFilter(fieldName, filterObject, type);
    private createElements(filterObj, operators, optionDiv1, optionDiv2, inputDiv1, inputDiv2, vDataSource, oDataSource, valueIndex, option, type);
    private updateInputValues(element, type, inputDiv1, inputDiv2);
    private validateTreeNode(e);
    /**
     * Update filter state while Member check/uncheck.
     * @hidden
     */
    updateCheckedState(fieldCaption?: string): void;
    private getCheckedNodes(treeNodes);
    private getUnCheckedNodes(treeNodes);
    private isExcelFilter(fieldName);
    private getFilterObject(fieldName);
    private closeFilterDialog();
    private removeFilterDialog();
}
