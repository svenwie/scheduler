import { PivotView } from '../../pivotview/base/pivotview';
import { IAction } from '../../common/base/interface';
import { PivotFieldList } from '../../field-list/base/field-list';
/** @hidden */
export declare class CalculatedField implements IAction {
    parent: PivotView | PivotFieldList;
    /**
     * Internal variables.
     */
    private dialog;
    private treeObj;
    private inputObj;
    private droppable;
    private menuObj;
    private newFields;
    private curMenu;
    private isFieldExist;
    private parentID;
    private existingReport;
    private formulaText;
    private fieldText;
    private keyboardEvents;
    private isEdit;
    private currentFieldName;
    private confirmPopUp;
    /** Constructor for calculatedfield module */
    constructor(parent: PivotView | PivotFieldList);
    /**
     * To get module name.
     * @returns string
     */
    protected getModuleName(): string;
    private keyActionHandler(e);
    /**
     * Trigger while click treeview icon.
     * @param  {MouseEvent} e
     * @returns void
     */
    private fieldClickHandler(e);
    /**
     * To display context menu.
     * @param  {HTMLElement} node
     * @returns void
     */
    private displayMenu(node);
    /**
     * To set position for context menu.
     * @returns void
     */
    private openContextMenu();
    /**
     * Triggers while select menu.
     * @param  {MenuEventArgs} menu
     * @returns void
     */
    private selectContextMenu(menu);
    /**
     * To create context menu.
     * @returns void
     */
    private createMenu();
    /**
     * Triggers while click OK button.
     * @returns void
     */
    private applyFormula();
    private addFormula(report, field);
    /**
     * To get treeview data
     * @param  {PivotGrid|PivotFieldList} parent
     * @returns Object
     */
    private getFieldListData(parent);
    /**
     * Triggers before menu opens.
     * @param  {BeforeOpenCloseMenuEventArgs} args
     * @returns void
     */
    private beforeMenuOpen(args);
    /**
     * Trigger while drop node in formula field.
     * @param  {DragAndDropEventArgs} args
     * @returns void
     */
    private fieldDropped(args);
    /**
     * To create dialog.
     * @returns void
     */
    private createDialog();
    /**
     * To render dialog elements.
     * @returns void
     */
    private renderDialogElements();
    /**
     * To create calculated field adaptive layout.
     * @returns void
     */
    private renderAdaptiveLayout();
    /**
     * To create treeview.
     * @returns void
     */
    private createTreeView();
    /**
     * Trigger before treeview text append.
     * @param  {DrawNodeEventArgs} args
     * @returns void
     */
    private drawTreeNode(args);
    /**
     * To create radio buttons.
     * @param  {string} key
     * @returns HTMLElement
     */
    private createTypeContainer(key);
    /**
     * To get Accordion Data.
     * @param  {PivotView | PivotFieldList} parent
     * @returns AccordionItemModel
     */
    private getAccordionData(parent);
    /**
     * To render mobile layout.
     * @param  {Tab} tabObj
     * @returns void
     */
    private renderMobileLayout(tabObj?);
    /**
     * Trigger while click cancel button.
     * @returns void
     */
    private cancelBtnClick();
    /**
     * Trigger while click add button.
     * @returns void
     */
    private addBtnClick();
    /**
     * To create calculated field dialog elements.
     * @returns void
     * @hidden
     */
    createCalculatedFieldDialog(): void;
    /**
     * To create calculated field desktop layout.
     * @returns void
     */
    private renderDialogLayout();
    /**
     * Creates the error dialog for the unexpected action done.
     * @method createConfirmDialog
     * @return {void}
     * @hidden
     */
    private createConfirmDialog(title, description);
    private replaceFormula();
    private removeErrorDialog();
    /**
     * To add event listener.
     * @returns void
     * @hidden
     */
    addEventListener(): void;
    /**
     * To remove event listener.
     * @returns void
     * @hidden
     */
    removeEventListener(): void;
    /**
     * To destroy the calculated field dialog
     * @returns void
     * @hidden
     */
    destroy(): void;
}
