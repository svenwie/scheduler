/**
 * `DataSourceUpdate` module is used to update the dataSource.
 */
/** @hidden */
var DataSourceUpdate = /** @class */ (function () {
    /**
     * Constructor for the dialog action.
     * @hidden
     */
    function DataSourceUpdate(parent) {
        this.parent = parent;
    }
    /**
     * Updates the dataSource by adding the given field along with field dropped position to the dataSource.
     * @param  {string} fieldName - Defines dropped field name to update dataSource.
     * @param  {string} droppedClass -  Defines dropped field axis name to update dataSource.
     * @param  {number} fieldCaption - Defines dropped position to the axis based on field position.
     * @method updateDataSource
     * @return {void}
     * @hidden
     */
    DataSourceUpdate.prototype.updateDataSource = function (fieldName, droppedClass, droppedPosition) {
        var dataSourceItem;
        if (this.control && this.btnElement && this.btnElement.getAttribute('isvalue') === 'true') {
            switch (droppedClass) {
                case '':
                    this.control.setProperties({ dataSource: { values: [] } }, true);
                    break;
                case 'rows':
                    this.control.setProperties({ dataSource: { valueAxis: 'row' } }, true);
                    break;
                case 'columns':
                    this.control.setProperties({ dataSource: { valueAxis: 'column' } }, true);
                    break;
            }
        }
        else {
            dataSourceItem = this.removeFieldFromReport(fieldName.toString());
            dataSourceItem = dataSourceItem ? dataSourceItem : this.getNewField(fieldName.toString());
            if (dataSourceItem.type === 'CalculatedField' && droppedClass !== '') {
                droppedClass = 'values';
            }
        }
        if (dataSourceItem) {
            switch (droppedClass) {
                case 'filters':
                    droppedPosition !== -1 ?
                        this.parent.dataSource.filters.splice(droppedPosition, 0, dataSourceItem) :
                        this.parent.dataSource.filters.push(dataSourceItem);
                    break;
                case 'rows':
                    droppedPosition !== -1 ?
                        this.parent.dataSource.rows.splice(droppedPosition, 0, dataSourceItem) :
                        this.parent.dataSource.rows.push(dataSourceItem);
                    break;
                case 'columns':
                    droppedPosition !== -1 ?
                        this.parent.dataSource.columns.splice(droppedPosition, 0, dataSourceItem) :
                        this.parent.dataSource.columns.push(dataSourceItem);
                    break;
                case 'values':
                    droppedPosition !== -1 ?
                        this.parent.dataSource.values.splice(droppedPosition, 0, dataSourceItem) :
                        this.parent.dataSource.values.push(dataSourceItem);
                    break;
            }
        }
    };
    /**
     * Updates the dataSource by removing the given field from the dataSource.
     * @param  {string} fieldName - Defines dropped field name to remove dataSource.
     * @method removeFieldFromReport
     * @return {void}
     * @hidden
     */
    DataSourceUpdate.prototype.removeFieldFromReport = function (fieldName) {
        var dataSourceItem;
        var isDataSource = false;
        var rows = this.parent.dataSource.rows;
        var columns = this.parent.dataSource.columns;
        var values = this.parent.dataSource.values;
        var filters = this.parent.dataSource.filters;
        var fields = [rows, columns, values, filters];
        for (var len = 0, lnt = fields.length; len < lnt; len++) {
            if (!isDataSource && fields[len]) {
                for (var i = 0, n = fields[len].length; i < n; i++) {
                    if (fields[len][i].name === fieldName) {
                        dataSourceItem = fields[len][i];
                        fields[len].splice(i, 1);
                        isDataSource = true;
                        break;
                    }
                }
            }
        }
        return dataSourceItem;
    };
    /**
     * Creates new field object given field name from the field list data.
     * @param  {string} fieldName - Defines dropped field name to add dataSource.
     * @method getNewField
     * @return {void}
     * @hidden
     */
    DataSourceUpdate.prototype.getNewField = function (fieldName) {
        var field = this.parent.engineModule.fieldList[fieldName];
        var newField = {
            name: fieldName,
            caption: field.caption,
            type: field.aggregateType,
            showNoDataItems: field.showNoDataItems
        };
        return newField;
    };
    return DataSourceUpdate;
}());
export { DataSourceUpdate };
