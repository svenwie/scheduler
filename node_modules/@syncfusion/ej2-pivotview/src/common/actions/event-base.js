import { isNullOrUndefined, removeClass, addClass } from '@syncfusion/ej2-base';
import { DataManager, Query } from '@syncfusion/ej2-data';
import * as cls from '../base/css-constant';
/**
 * `EventBase` for active fields action.
 */
/** @hidden */
var EventBase = /** @class */ (function () {
    /**
     * Constructor for the dialog action.
     * @hidden
     */
    function EventBase(parent) {
        this.parent = parent;
    }
    /**
     * Updates sorting order for the selected field.
     * @method updateSorting
     * @param  {Event} args - Contains clicked element information to update dataSource.
     * @return {void}
     * @hidden
     */
    EventBase.prototype.updateSorting = function (args) {
        if (this.parent.filterDialog.dialogPopUp) {
            this.parent.filterDialog.dialogPopUp.close();
        }
        var target = args.target;
        var fieldName = target.parentElement.id;
        var isDescending = target.classList.contains(cls.SORT_DESCEND_CLASS);
        var sortObj = this.getSortItemByName(fieldName);
        if (!isNullOrUndefined(sortObj)) {
            sortObj = sortObj.properties ?
                sortObj.properties : sortObj;
            sortObj.order = isDescending ? 'Ascending' : 'Descending';
        }
        else {
            var newSortObj = { name: fieldName, order: isDescending ? 'Ascending' : 'Descending' };
            this.parent.dataSource.sortSettings.push(newSortObj);
        }
        isDescending ? removeClass([target], cls.SORT_DESCEND_CLASS) : addClass([target], cls.SORT_DESCEND_CLASS);
    };
    /**
     * Updates sorting order for the selected field.
     * @method updateFiltering
     * @param  {Event} args - Contains clicked element information to update dataSource.
     * @return {void}
     * @hidden
     */
    EventBase.prototype.updateFiltering = function (args) {
        var target = args.target;
        var fieldName = target.parentElement.id;
        var fieldCaption = target.parentElement.textContent;
        var isInclude = false;
        var filterItems = [];
        this.parent.engineModule.fieldList[fieldName].dateMember = new DataManager(this.parent.engineModule.
            fieldList[fieldName].dateMember).executeLocal(new Query().
            sortBy('actualText', this.parent.engineModule.fieldList[fieldName].sort.toLowerCase()));
        var filterObj = this.getFilterItemByName(fieldName);
        if (!isNullOrUndefined(filterObj)) {
            isInclude = filterObj.type === 'Include' ? true : false;
            filterItems = filterObj.items;
        }
        var treeData = this.getTreeData(isInclude, this.parent.engineModule.fieldList[fieldName].dateMember, filterItems);
        if (this.parent.filterDialog.dialogPopUp) {
            this.parent.filterDialog.dialogPopUp.close();
        }
        var popupTarget;
        popupTarget = this.parent.moduleName !== 'pivotfieldlist' ?
            popupTarget = this.parent.element : popupTarget = document.getElementById(this.parent.parentID + '_Wrapper');
        this.parent.filterDialog.createFilterDialog(treeData, fieldName, fieldCaption, popupTarget);
    };
    /**
     * Gets sort object for the given field name from the dataSource.
     * @method getSortItemByName
     * @param  {string} fieldName - Gets sort settings for the given field name.
     * @return {Sort}
     * @hidden
     */
    EventBase.prototype.getSortItemByName = function (fieldName) {
        var sortObjects = this.parent.dataSource.sortSettings;
        return new DataManager({ json: sortObjects }).executeLocal(new Query().where('name', 'equal', fieldName))[0];
    };
    /**
     * Gets filter object for the given field name from the dataSource.
     * @method getFilterItemByName
     * @param  {string} fieldName - Gets filter settings for the given field name.
     * @return {Sort}
     * @hidden
     */
    EventBase.prototype.getFilterItemByName = function (fieldName) {
        var filterObjects = this.parent.dataSource.filterSettings;
        return new DataManager({ json: filterObjects }).executeLocal(new Query().where('name', 'equal', fieldName))[0];
    };
    /**
     * Gets format object for the given field name from the dataSource.
     * @method getFilterItemByName
     * @param  {string} fieldName - Gets format settings for the given field name.
     * @return {IFormatSettings}
     * @hidden
     */
    EventBase.prototype.getFormatItemByName = function (fieldName) {
        var formatObjects = this.parent.dataSource.formatSettings;
        return new DataManager({ json: formatObjects }).executeLocal(new Query().where('name', 'equal', fieldName))[0];
    };
    /**
     * show tree nodes using search text.
     * @hidden
     */
    EventBase.prototype.searchTreeNodes = function (args, treeObj) {
        var searchList = [];
        var nonSearchList = [];
        var list = [].slice.call(treeObj.element.querySelectorAll('li'));
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var element = list_1[_i];
            if ((element.querySelector('.e-list-text').textContent.toLowerCase()).indexOf(args.value.toLowerCase()) > -1) {
                searchList.push(element);
            }
            else {
                nonSearchList.push(element);
            }
        }
        treeObj.enableNodes(searchList);
        treeObj.disableNodes(nonSearchList);
    };
    EventBase.prototype.getTreeData = function (isInclude, members, filterItems) {
        var list = [];
        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
            var member = members_1[_i];
            var obj = {
                id: member.formattedText,
                name: member.formattedText,
                checkedStatus: isInclude ? false : true
            };
            if (filterItems && filterItems.indexOf(member.formattedText) >= 0) {
                obj.checkedStatus = isInclude ? true : false;
            }
            list.push(obj);
        }
        return list;
    };
    return EventBase;
}());
export { EventBase };
