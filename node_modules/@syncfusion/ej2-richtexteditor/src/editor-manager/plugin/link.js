import { createElement, isNullOrUndefined } from '@syncfusion/ej2-base';
import * as CONSTANT from './../base/constant';
import { InsertHtml } from './inserthtml';
/**
 * Link internal component
 * @hidden
 */
var LinkCommand = /** @class */ (function () {
    /**
     * Constructor for creating the Formats plugin
     * @hidden
     */
    function LinkCommand(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    LinkCommand.prototype.addEventListener = function () {
        this.parent.observer.on(CONSTANT.LINK, this.createLink, this);
    };
    LinkCommand.prototype.createLink = function (e) {
        if (!isNullOrUndefined(e.item.selectParent) && e.item.selectParent.length > 0 &&
            e.item.selectParent[0].tagName === 'A') {
            var anchorEle = e.item.selectParent[0];
            anchorEle.setAttribute('href', e.item.url);
            anchorEle.setAttribute('title', e.item.title);
            anchorEle.innerHTML = e.item.text;
            anchorEle.setAttribute('target', e.item.target);
            e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle, anchorEle, 1, 1);
        }
        else {
            var anchor = createElement('a', {
                className: 'e-rte-anchor', attrs: {
                    href: e.item.url,
                    target: e.item.target,
                    title: e.item.title === '' ? e.item.url : e.item.title
                }
            });
            anchor.innerText = e.item.text === '' ? e.item.url : e.item.text;
            e.item.selection.restore();
            InsertHtml.Insert(this.parent.currentDocument, anchor);
            if (e.event && e.event.type === 'keydown' && e.event.keyCode === 32) {
                var startContainer = e.item.selection.range.startContainer;
                startContainer.textContent = this.removeText(startContainer.textContent, e.item.url);
            }
            else {
                e.item.selection.setSelectionText(this.parent.currentDocument, anchor.childNodes[0], anchor.childNodes[0], 0, anchor.childNodes[0].textContent.length);
            }
        }
        if (e.callBack) {
            e.callBack({
                requestType: 'Links',
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    };
    LinkCommand.prototype.removeText = function (text, val) {
        var arr = text.split(' ');
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === val) {
                arr.splice(i, 1);
                i--;
            }
        }
        return arr.join(' ');
    };
    return LinkCommand;
}());
export { LinkCommand };
