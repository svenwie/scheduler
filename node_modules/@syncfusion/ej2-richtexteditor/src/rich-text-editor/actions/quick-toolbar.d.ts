import { RenderType } from '../base/enum';
import { IRichTextEditor, IToolbarItems, NotifyArgs } from '../base/interface';
import { ServiceLocator } from '../services/service-locator';
import { BaseQuickToolbar } from './base-quick-toolbar';
import { BaseToolbar } from './base-toolbar';
/**
 * `Quick toolbar` module is used to handle Quick toolbar actions.
 */
export declare class QuickToolbar {
    private offsetX;
    private offsetY;
    private deBouncer;
    private target;
    private locator;
    private parent;
    private contentRenderer;
    linkQTBar: BaseQuickToolbar;
    textQTBar: BaseQuickToolbar;
    imageQTBar: BaseQuickToolbar;
    tableQTBar: BaseQuickToolbar;
    inlineQTBar: BaseQuickToolbar;
    private renderFactory;
    constructor(parent?: IRichTextEditor, locator?: ServiceLocator);
    private formatItems(items);
    private getQTBarOptions(popType, mode, items, type);
    createQTBar(popupType: string, mode: string, items: (string | IToolbarItems)[], type: RenderType): BaseQuickToolbar;
    private initializeQuickToolbars();
    private onMouseDown(e);
    private renderQuickToolbars();
    private renderInlineQuickToolbar();
    private showInlineQTBar(x, y, target);
    private hideInlineQTBar();
    private hideQuickToolbars();
    private deBounce(x, y, target);
    private mouseUpHandler(e);
    private keyDownHandler();
    private inlineQTBarMouseDownHandler();
    private keyUpHandler(e);
    getInlineBaseToolbar(): BaseToolbar;
    /**
     * Destroys the ToolBar.
     * @method destroy
     * @return {void}
     */
    destroy(): void;
    private wireInlineQTBarEvents();
    private unWireInlineQTBarEvents();
    private toolbarUpdated(args);
    addEventListener(): void;
    private onKeyDown(e);
    private onIframeMouseDown();
    private setRtl(args);
    removeEventListener(): void;
    /**
     * Called internally if any of the property value changed.
     * @hidden
     */
    protected onPropertyChanged(e: NotifyArgs): void;
    /**
     * For internal use only - Get the module name.
     */
    private getModuleName();
}
