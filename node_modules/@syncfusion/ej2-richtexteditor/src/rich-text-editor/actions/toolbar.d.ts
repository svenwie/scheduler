import { Toolbar as tool } from '@syncfusion/ej2-navigations';
import { IRichTextEditor, IRenderer, NotifyArgs } from '../base/interface';
import { IUpdateItemsModel } from '../base/interface';
import { ServiceLocator } from '../services/service-locator';
import { RendererFactory } from '../services/renderer-factory';
import { BaseToolbar } from './base-toolbar';
/**
 * `Toolbar` module is used to handle Toolbar actions.
 */
export declare class Toolbar {
    toolbarObj: tool;
    private editPanel;
    private isToolbar;
    private editableElement;
    private tbItems;
    baseToolbar: BaseToolbar;
    private tbElement;
    private tbWrapper;
    protected parent: IRichTextEditor;
    protected locator: ServiceLocator;
    private isTransformChild;
    private contentRenderer;
    protected toolbarRenderer: IRenderer;
    private dropDownModule;
    private toolbarActionModule;
    protected renderFactory: RendererFactory;
    private keyBoardModule;
    constructor(parent?: IRichTextEditor, serviceLocator?: ServiceLocator);
    private initializeInstance();
    private toolbarBindEvent();
    private toolBarKeyDown(e);
    private createToolbarElement();
    private getToolbarMode();
    private checkToolbarResponsive(ele);
    private checkIsTransformChild();
    private toggleFloatClass(e?);
    private renderToolbar();
    addFixedTBarClass(): void;
    removeFixedTBarClass(): void;
    private showFixedTBar();
    private hideFixedTBar();
    updateItem(args: IUpdateItemsModel): void;
    private updateToolbarStatus(args);
    private fullScreen(e?);
    private hideScreen(e?);
    getBaseToolbar(): BaseToolbar;
    addTBarItem(args: IUpdateItemsModel, index: number): void;
    enableTBarItems(baseToolbar: BaseToolbar, items: string | string[], isEnable: boolean): void;
    removeTBarItems(items: string | string[]): void;
    getExpandTBarPopHeight(): number;
    getToolbarHeight(): number;
    getToolbarElement(): Element;
    refreshToolbarOverflow(): void;
    private isToolbarDestroyed();
    private destroyToolbar();
    /**
     * Destroys the ToolBar.
     * @method destroy
     * @return {void}
     */
    destroy(): void;
    private scrollHandler(e);
    private mouseDownHandler();
    private focusChangeHandler();
    private dropDownBeforeOpenHandler();
    private toolbarMouseDownHandler(e);
    protected wireEvents(): void;
    protected unWireEvents(): void;
    protected addEventListener(): void;
    protected removeEventListener(): void;
    private onRefresh();
    /**
     * Called internally if any of the property value changed.
     * @hidden
     */
    protected onPropertyChanged(e: NotifyArgs): void;
    /**
     * For internal use only - Get the module name.
     */
    private getModuleName();
}
