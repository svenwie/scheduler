{"ast":null,"code":"import { KeyboardEvents, closest, EventHandler, extend } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, addClass } from '@syncfusion/ej2-base';\nimport * as event from '../base/constant';\nimport * as util from '../base/util';\nimport * as cls from '../base/css-constant';\n/**\n * Keyboard interaction\n */\n\nvar KeyboardInteraction =\n/** @class */\nfunction () {\n  function KeyboardInteraction(parent) {\n    this.selectedCells = [];\n    this.keyConfigs = {\n      downArrow: 'downarrow',\n      upArrow: 'uparrow',\n      rightArrow: 'rightarrow',\n      leftArrow: 'leftarrow',\n      shiftDownArrow: 'shift+downarrow',\n      shiftUpArrow: 'shift+uparrow',\n      shiftRightArrow: 'shift+rightarrow',\n      shiftLeftArrow: 'shift+leftarrow',\n      ctrlLeftArrow: 'ctrl+leftarrow',\n      ctrlRightArrow: 'ctrl+rightarrow',\n      altOne: 'alt+1',\n      altTwo: 'alt+2',\n      altThree: 'alt+3',\n      altFour: 'alt+4',\n      altFive: 'alt+5',\n      altSix: 'alt+6',\n      enter: 'enter',\n      escape: 'escape',\n      delete: 'delete',\n      home: 'home',\n      pageUp: 'pageup',\n      pageDown: 'pagedown',\n      tab: 'tab',\n      shiftTab: 'shift+tab'\n    };\n    this.parent = parent;\n    this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;\n    this.keyboardModule = new KeyboardEvents(this.parent.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    this.addEventListener();\n  }\n\n  KeyboardInteraction.prototype.keyActionHandler = function (e) {\n    switch (e.action) {\n      case 'downArrow':\n      case 'shiftDownArrow':\n        this.processDown(e, e.shiftKey);\n        break;\n\n      case 'upArrow':\n      case 'shiftUpArrow':\n        this.processUp(e, e.shiftKey);\n        break;\n\n      case 'leftArrow':\n      case 'shiftLeftArrow':\n        this.processLeft(e, e.shiftKey);\n        break;\n\n      case 'rightArrow':\n      case 'shiftRightArrow':\n        this.processRight(e, e.shiftKey);\n        break;\n\n      case 'ctrlLeftArrow':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);\n\n        if (this.parent.headerModule) {\n          this.parent.headerModule.element.querySelector('.e-prev button').focus();\n        }\n\n        break;\n\n      case 'ctrlRightArrow':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);\n\n        if (this.parent.headerModule) {\n          this.parent.headerModule.element.querySelector('.e-next button').focus();\n        }\n\n        break;\n\n      case 'altOne':\n      case 'altTwo':\n      case 'altThree':\n      case 'altFour':\n      case 'altFive':\n      case 'altSix':\n        this.processViewNavigation(e);\n        break;\n\n      case 'enter':\n        this.processEnter(e);\n        break;\n\n      case 'home':\n        this.focusFirstCell();\n        break;\n\n      case 'tab':\n      case 'shiftTab':\n        this.processTab(e, e.shiftKey);\n        break;\n\n      case 'delete':\n        this.processDelete(e);\n        break;\n\n      case 'escape':\n        this.processEscape();\n    }\n  };\n\n  KeyboardInteraction.prototype.addEventListener = function () {\n    this.parent.on(event.cellMouseDown, this.onCellMouseDown, this);\n  };\n\n  KeyboardInteraction.prototype.removeEventListener = function () {\n    this.parent.off(event.cellMouseDown, this.onCellMouseDown);\n  };\n\n  KeyboardInteraction.prototype.onCellMouseDown = function (e) {\n    if (e.event.shiftKey) {\n      return;\n    }\n\n    this.initialTarget = this.getClosestCell(e.event);\n\n    if (this.parent.activeViewOptions.readonly || this.parent.currentView === 'MonthAgenda' || !this.initialTarget) {\n      return;\n    }\n\n    if (e.event.target.classList.contains(cls.WORK_CELLS_CLASS)) {\n      EventHandler.add(this.parent.getContentTable(), 'mousemove', this.onMouseSelection, this);\n      EventHandler.add(this.parent.getContentTable(), 'mouseup', this.onMoveup, this);\n    }\n\n    if (e.event.target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      var allDayRow = this.parent.getAllDayRow();\n      EventHandler.add(allDayRow, 'mousemove', this.onMouseSelection, this);\n      EventHandler.add(allDayRow, 'mouseup', this.onMoveup, this);\n    }\n  };\n\n  KeyboardInteraction.prototype.onMouseSelection = function (e) {\n    var target = this.getClosestCell(e);\n\n    if (target) {\n      this.selectCells(true, target);\n    }\n  };\n\n  KeyboardInteraction.prototype.getClosestCell = function (e) {\n    return closest(e.target, '.' + cls.WORK_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS);\n  };\n\n  KeyboardInteraction.prototype.onAppointmentSelection = function (e) {\n    var target = closest(e.target, '.' + cls.APPOINTMENT_CLASS);\n    this.parent.eventBase.getSelectedEventElements(target);\n  };\n\n  KeyboardInteraction.prototype.onMoveup = function (e) {\n    if (e.target.classList.contains(cls.WORK_CELLS_CLASS)) {\n      EventHandler.remove(this.parent.getContentTable(), 'mousemove', this.onMouseSelection);\n      EventHandler.remove(this.parent.getContentTable(), 'mouseup', this.onMoveup);\n    }\n\n    if (e.target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      var allDayRow = this.parent.getAllDayRow();\n      EventHandler.remove(allDayRow, 'mousemove', this.onMouseSelection);\n      EventHandler.remove(allDayRow, 'mouseup', this.onMoveup);\n    }\n  };\n\n  KeyboardInteraction.prototype.processEnter = function (e) {\n    if (this.parent.activeViewOptions.readonly || this.isPreventAction(e)) {\n      return;\n    }\n\n    var target = e.target;\n\n    if (closest(target, '.' + cls.POPUP_WRAPPER_CLASS)) {\n      if (target.classList.contains(cls.QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(cls.EVENT_CREATE_CLASS) || target.classList.contains(cls.EDIT_EVENT_CLASS) || target.classList.contains(cls.DELETE_EVENT_CLASS) || target.classList.contains(cls.CLOSE_CLASS)) {\n        target.click();\n        e.preventDefault();\n      } else if (target.classList.contains(cls.SUBJECT_CLASS)) {\n        this.parent.element.querySelector('.' + cls.EVENT_CREATE_CLASS).click();\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    if (target.classList.contains(cls.WORK_CELLS_CLASS) || target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      if (this.selectedCells.length > 1) {\n        var start = this.parent.getCellDetails(this.selectedCells[0]);\n        var end = this.parent.getCellDetails(this.selectedCells[this.selectedCells.length - 1]);\n        start.endTime = end.endTime;\n        start.element = target;\n        this.parent.activeCellsData = start;\n      } else {\n        this.parent.activeCellsData = this.parent.getCellDetails(target);\n      }\n\n      var args = extend(this.parent.activeCellsData, {\n        cancel: false,\n        event: e\n      });\n      this.parent.notify(event.cellClick, args);\n      return;\n    }\n\n    if (target.classList.contains(cls.APPOINTMENT_CLASS) || target.classList.contains(cls.MORE_EVENT_CLOSE_CLASS) || target.classList.contains(cls.ALLDAY_APPOINTMENT_SECTION_CLASS) || target.classList.contains(cls.MORE_INDICATOR_CLASS)) {\n      target.click();\n      return;\n    }\n\n    if (target.classList.contains(cls.MORE_EVENT_HEADER_DATE_CLASS)) {\n      this.parent.setProperties({\n        selectedDate: new Date(parseInt(target.getAttribute('data-date'), 10))\n      }, true);\n      this.parent.changeView(this.parent.getNavigateView());\n      this.processEscape();\n      return;\n    }\n  };\n\n  KeyboardInteraction.prototype.getCells = function (isInverseTable, start, end) {\n    var tableEle = this.parent.getContentTable();\n    var cells = [].slice.call(tableEle.querySelectorAll('td'));\n    var maxRow = tableEle.rows.length;\n    var maxColumn = tableEle.rows[0].cells.length;\n\n    if (start.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      var allDayRow = this.parent.getAllDayRow();\n      cells = [].slice.call(allDayRow.cells);\n      maxRow = 1;\n      maxColumn = allDayRow.cells.length;\n    }\n\n    var startIndex = cells.indexOf(start);\n    var endIndex = cells.indexOf(end);\n    var inverseCells = [];\n\n    if (isInverseTable) {\n      for (var i = 0; i < maxColumn; i++) {\n        for (var j = 0; j < maxRow; j++) {\n          inverseCells.push(cells[maxColumn * j + i]);\n        }\n      }\n\n      startIndex = inverseCells.indexOf(start);\n      endIndex = inverseCells.indexOf(end);\n    }\n\n    if (startIndex > endIndex) {\n      var temp = startIndex;\n      startIndex = endIndex;\n      endIndex = temp;\n    }\n\n    var sCells = isInverseTable ? inverseCells : cells;\n    return sCells.slice(startIndex, endIndex + 1);\n  };\n\n  KeyboardInteraction.prototype.focusFirstCell = function () {\n    if (this.parent.currentView === 'Agenda') {\n      var focusCell = this.parent.getContentTable().querySelector('.' + cls.AGENDA_CELLS_CLASS);\n      focusCell.setAttribute('tabindex', '0');\n      focusCell.focus();\n      return;\n    }\n\n    this.parent.eventBase.removeSelectedAppointmentClass();\n\n    if (this.parent.activeView.isTimelineView()) {\n      var cell = this.parent.element.querySelector('.' + cls.CONTENT_TABLE_CLASS + ' tr:not(.' + cls.HIDDEN_CLASS + ') .' + cls.WORK_CELLS_CLASS + ':not(.' + cls.RESOURCE_GROUP_CELLS_CLASS + ')');\n      this.selectCells(false, cell);\n    } else {\n      this.selectCells(false, this.parent.getWorkCellElements()[0]);\n    }\n  };\n\n  KeyboardInteraction.prototype.isInverseTableSelect = function () {\n    return this.parent.activeView.isInverseTableSelect;\n  };\n  /** @hidden */\n\n\n  KeyboardInteraction.prototype.selectCells = function (isMultiple, target) {\n    this.parent.removeSelectedClass();\n\n    if (isMultiple) {\n      var initialId = void 0;\n      var selectedCells = this.getCells(this.isInverseTableSelect(), this.initialTarget, target);\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        initialId = this.initialTarget.getAttribute('data-group-index');\n        var resourceSelectedCells = [];\n\n        for (var i = 0; i < selectedCells.length; i++) {\n          if (selectedCells[i].getAttribute('data-group-index') === initialId) {\n            resourceSelectedCells.push(selectedCells[i]);\n          }\n        }\n\n        selectedCells = resourceSelectedCells;\n      }\n\n      this.selectedCells = selectedCells;\n\n      if (selectedCells.length > 2 && !target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n        var allDayCells = this.getAllDayCells(selectedCells);\n\n        if (this.parent.activeViewOptions.group.resources.length > 0) {\n          var resourceAllDayCells = [];\n\n          for (var i = 0; i < allDayCells.length; i++) {\n            if (allDayCells[i].getAttribute('data-group-index') === initialId) {\n              resourceAllDayCells.push(allDayCells[i]);\n            }\n          }\n\n          allDayCells = resourceAllDayCells;\n        }\n\n        selectedCells = selectedCells.concat(allDayCells);\n      }\n\n      if (target.getAttribute('data-group-index') !== initialId && this.parent.activeViewOptions.group.resources.length > 0) {\n        target = this.selectedCells[this.selectedCells.length - 1];\n      }\n\n      this.parent.addSelectedClass(selectedCells, target);\n    } else {\n      this.initialTarget = target;\n      this.selectedCells = [target];\n      this.parent.addSelectedClass([target], target);\n    }\n  };\n\n  KeyboardInteraction.prototype.selectAppointment = function (isReverse, target) {\n    var appointments = this.getAppointmentElements();\n\n    if (appointments.length < 0) {\n      return;\n    }\n\n    this.parent.eventBase.removeSelectedAppointmentClass();\n    var nextAppEle;\n\n    if (target.classList.contains(cls.APPOINTMENT_CLASS)) {\n      var targetIndex = appointments.indexOf(target);\n      nextAppEle = appointments[isReverse ? targetIndex - 1 : targetIndex + 1];\n    } else {\n      nextAppEle = isReverse ? appointments[appointments.length - 1] : appointments[0];\n    }\n\n    if (nextAppEle) {\n      this.parent.eventBase.addSelectedAppointments([nextAppEle]);\n      nextAppEle.focus();\n      addClass([nextAppEle], cls.AGENDA_SELECTED_CELL);\n    }\n  };\n\n  KeyboardInteraction.prototype.selectAppointmentElementFromWorkCell = function (isReverse, target) {\n    var _this = this;\n\n    this.parent.eventBase.removeSelectedAppointmentClass();\n    this.parent.removeSelectedClass();\n\n    if (target.classList.contains(cls.WORK_CELLS_CLASS) || target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      var appointmentElements_1 = this.getUniqueAppointmentElements();\n      var filteredElements_1 = [];\n      var selectedDate_1 = parseInt(target.getAttribute('data-date'), 10);\n      var selectedSeriesEvents = this.parent.eventsProcessed.filter(function (eventObject) {\n        return !isReverse ? eventObject[_this.parent.eventFields.startTime].getTime() >= selectedDate_1 : eventObject[_this.parent.eventFields.startTime].getTime() <= selectedDate_1;\n      });\n      selectedSeriesEvents.filter(function (event) {\n        appointmentElements_1.filter(function (element) {\n          if (JSON.stringify(event.Guid) === JSON.stringify(element.getAttribute('data-guid'))) {\n            filteredElements_1.push(element);\n          }\n        });\n      });\n\n      if (filteredElements_1.length > 0) {\n        var selectedElement = isReverse ? filteredElements_1[filteredElements_1.length - 1] : filteredElements_1[0];\n        var focusElements = this.getAppointmentElementsByGuid(selectedElement.getAttribute('data-guid'));\n        this.parent.eventBase.addSelectedAppointments(focusElements);\n        focusElements[focusElements.length - 1].focus();\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.getAllDayCells = function (cells) {\n    var allDayRow = this.parent.getAllDayRow();\n\n    if (!allDayRow) {\n      return [];\n    }\n\n    var startCell = cells[0];\n    var endCell = cells[cells.length - 1];\n    var start = this.parent.getCellDetails(startCell);\n    var end = this.parent.getCellDetails(endCell);\n\n    if (end.endTime.getTime() - start.startTime.getTime() >= util.MS_PER_DAY) {\n      var allDayCells = [].slice.call(allDayRow.cells);\n      return allDayCells.slice(startCell.cellIndex, endCell.cellIndex + 1);\n    }\n\n    return [];\n  };\n\n  KeyboardInteraction.prototype.getAppointmentElements = function () {\n    return [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_CLASS));\n  };\n\n  KeyboardInteraction.prototype.getAppointmentElementsByGuid = function (guid) {\n    return [].slice.call(this.parent.element.querySelectorAll('div[data-guid=\"' + guid + '\"]'));\n  };\n\n  KeyboardInteraction.prototype.getUniqueAppointmentElements = function () {\n    var appointments = this.getAppointmentElements();\n    var appointmentElements = [];\n    appointments.map(function (value) {\n      return value.getAttribute('data-guid');\n    }).filter(function (value, index, self) {\n      if (self.indexOf(value) === index) {\n        appointmentElements.push(appointments[index]);\n      }\n    });\n    return appointmentElements;\n  };\n\n  KeyboardInteraction.prototype.getWorkCellFromAppointmentElement = function (target) {\n    var selectedObject = this.parent.eventBase.getEventByGuid(target.getAttribute('data-guid'));\n    return this.parent.eventBase.selectWorkCellByTime([selectedObject]);\n  };\n\n  KeyboardInteraction.prototype.processViewNavigation = function (e) {\n    var index = parseInt(e.key, 10) - 1;\n\n    if (index < this.parent.views.length) {\n      var view = this.parent.viewCollections[index].option;\n      this.parent.changeView(view, e, undefined, index);\n\n      if (this.parent.headerModule) {\n        this.parent.headerModule.element.querySelector('.e-active-view button').focus();\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.processUp = function (e, isMultiple) {\n    if (isMultiple && (this.parent.activeView.isTimelineView() || this.parent.currentView === 'MonthAgenda')) {\n      return;\n    }\n\n    var target = e.target;\n    var selectedElements = this.parent.getSelectedElements();\n    var selectedEventElements = this.parent.eventBase.getSelectedAppointments();\n    var moreEventWrapper = this.parent.element.querySelector('.' + cls.MORE_POPUP_WRAPPER_CLASS);\n    var quickPopupWrapper = this.getQuickPopupElement();\n\n    if (selectedElements.length > 0 && !e.target.classList.contains(cls.WORK_CELLS_CLASS)) {\n      target = selectedElements[selectedElements.length - 1];\n    }\n\n    if (selectedEventElements.length > 0 && !moreEventWrapper.classList.contains(cls.POPUP_OPEN) && !quickPopupWrapper.classList.contains(cls.POPUP_OPEN) && ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.parent.currentView) !== -1) {\n      target = this.getWorkCellFromAppointmentElement(selectedEventElements[selectedEventElements.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n    }\n\n    if (target.classList.contains(cls.WORK_CELLS_CLASS) && !this.parent.element.querySelector('.' + cls.POPUP_OPEN)) {\n      var tableRows = this.parent.getTableRows();\n      var curRowIndex = tableRows.indexOf(target.parentElement);\n\n      if (curRowIndex > 0 && curRowIndex < tableRows.length) {\n        this.selectCells(isMultiple, tableRows[curRowIndex - 1].cells[target.cellIndex]);\n      }\n    } else if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n      this.selectAppointment(true, target);\n    }\n  };\n\n  KeyboardInteraction.prototype.processDown = function (e, isMultiple) {\n    if (isMultiple && (this.parent.activeView.isTimelineView() || this.parent.currentView === 'MonthAgenda')) {\n      return;\n    }\n\n    var target = e.target;\n    var selectedCells = this.parent.getSelectedElements();\n    var selectedElements = this.parent.eventBase.getSelectedAppointments();\n    var moreEventWrapper = this.parent.element.querySelector('.' + cls.MORE_POPUP_WRAPPER_CLASS);\n    var quickPopupWrapper = this.getQuickPopupElement();\n\n    if (selectedCells.length > 0 && !e.target.classList.contains(cls.WORK_CELLS_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n    }\n\n    if (selectedElements.length > 0 && !moreEventWrapper.classList.contains(cls.POPUP_OPEN) && !quickPopupWrapper.classList.contains(cls.POPUP_OPEN) && ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.parent.currentView) !== -1) {\n      target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n    }\n\n    var tableRows = this.parent.getTableRows();\n\n    if (target.classList.contains(cls.WORK_CELLS_CLASS) && !this.parent.element.querySelector('.' + cls.POPUP_OPEN)) {\n      var curRowIndex = tableRows.indexOf(target.parentElement);\n\n      if (curRowIndex >= 0 && curRowIndex < tableRows.length - 1) {\n        this.selectCells(isMultiple, tableRows[curRowIndex + 1].cells[target.cellIndex]);\n      }\n    } else if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n      this.selectAppointment(false, target);\n    }\n  };\n\n  KeyboardInteraction.prototype.processLeftRight = function (target) {\n    var tableEle = this.parent.getContentTable();\n    var curRowIndex = target.parentNode.sectionRowIndex;\n    var key = {\n      element: tableEle,\n      rowIndex: curRowIndex,\n      columnIndex: target.cellIndex,\n      maxIndex: tableEle.rows[curRowIndex].cells.length\n    };\n    return key;\n  };\n\n  KeyboardInteraction.prototype.getQuickPopupElement = function () {\n    return (this.parent.isAdaptive ? document.body : this.parent.element).querySelector('.' + cls.POPUP_WRAPPER_CLASS);\n  };\n\n  KeyboardInteraction.prototype.isCancelLeftRightAction = function (e, isMultiple) {\n    if (this.parent.currentView === 'Agenda' || isMultiple && this.parent.currentView === 'MonthAgenda') {\n      return true;\n    }\n\n    if (this.isPreventAction(e) && isMultiple) {\n      return true;\n    }\n\n    var moreEventWrapper = this.parent.element.querySelector('.' + cls.MORE_POPUP_WRAPPER_CLASS);\n    var quickPopupWrapper = this.getQuickPopupElement();\n\n    if (moreEventWrapper.classList.contains(cls.POPUP_OPEN) || quickPopupWrapper.classList.contains(cls.POPUP_OPEN)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  KeyboardInteraction.prototype.processRight = function (e, isMultiple) {\n    if (this.isCancelLeftRightAction(e, isMultiple)) {\n      return;\n    }\n\n    var selectedCells = this.parent.getSelectedElements();\n    var targetCell;\n    var selectedAppointments = this.parent.eventBase.getSelectedAppointments();\n    var target = e.target;\n\n    if (selectedCells.length > 0 && !target.classList.contains(cls.WORK_CELLS_CLASS) && !target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n    }\n\n    if (selectedAppointments.length > 0) {\n      target = this.getWorkCellFromAppointmentElement(selectedAppointments[selectedAppointments.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n\n      if (!target) {\n        return;\n      }\n    }\n\n    if (target.classList.contains(cls.WORK_CELLS_CLASS)) {\n      var key = this.processLeftRight(target);\n\n      if (key.columnIndex >= 0 && key.columnIndex < key.maxIndex - 1) {\n        targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex + 1], 'right');\n\n        if (!isNullOrUndefined(targetCell)) {\n          this.selectCells(isMultiple, targetCell);\n        }\n      } else if (key.columnIndex === key.maxIndex - 1) {\n        if (!this.isInverseTableSelect() && key.rowIndex < key.element.rows.length - 1) {\n          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex + 1].cells[0], 'right');\n\n          if (!isNullOrUndefined(targetCell)) {\n            this.selectCells(isMultiple, targetCell);\n          }\n        } else if (!isMultiple) {\n          var rowIndex = this.isInverseTableSelect() ? key.rowIndex : 0;\n          this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);\n          var tableEle = this.parent.getContentTable();\n          this.selectCells(false, tableEle.rows[rowIndex].cells[0]);\n        }\n      }\n    } else if (target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      var curColIndex = target.cellIndex;\n      var allDayRow = this.parent.getAllDayRow();\n      var maxColIndex = allDayRow.cells.length;\n\n      if (curColIndex >= 0 && curColIndex < maxColIndex - 1) {\n        this.selectCells(isMultiple, allDayRow.cells[curColIndex + 1]);\n      } else if (curColIndex === maxColIndex - 1 && !isMultiple) {\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);\n        var allDayRow_1 = this.parent.getAllDayRow();\n        this.selectCells(false, allDayRow_1.cells[0]);\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.processLeft = function (e, isMultiple) {\n    if (this.isCancelLeftRightAction(e, isMultiple)) {\n      return;\n    }\n\n    var target = e.target;\n    var selectedCells = this.parent.getSelectedElements();\n    var targetCell;\n\n    if (selectedCells.length > 0 && !target.classList.contains(cls.WORK_CELLS_CLASS) && !target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n    }\n\n    var selectedElements = this.parent.eventBase.getSelectedAppointments();\n\n    if (selectedElements.length > 0) {\n      target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n\n      if (!target) {\n        return;\n      }\n    }\n\n    if (target.classList.contains(cls.WORK_CELLS_CLASS)) {\n      var key = this.processLeftRight(target);\n\n      if (key.columnIndex > 0 && key.columnIndex < key.maxIndex) {\n        targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex - 1], 'left');\n\n        if (!isNullOrUndefined(targetCell)) {\n          this.selectCells(isMultiple, targetCell);\n        }\n      } else if (key.columnIndex === 0) {\n        if (!this.isInverseTableSelect() && key.rowIndex > 0) {\n          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex - 1].cells[key.maxIndex - 1], 'left');\n\n          if (!isNullOrUndefined(targetCell)) {\n            this.selectCells(isMultiple, targetCell);\n          }\n        } else if (!isMultiple) {\n          this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);\n          var tableEle = this.parent.getContentTable();\n          var rowIndex = this.isInverseTableSelect() ? key.rowIndex : tableEle.rows.length - 1;\n          this.selectCells(false, tableEle.rows[rowIndex].cells[key.maxIndex - 1]);\n        }\n      }\n    } else if (target.classList.contains(cls.ALLDAY_CELLS_CLASS)) {\n      var curColIndex = target.cellIndex;\n      var allDayRow = this.parent.getAllDayRow();\n      var maxColIndex = allDayRow.cells.length;\n\n      if (curColIndex > 0 && curColIndex < maxColIndex) {\n        this.selectCells(isMultiple, allDayRow.cells[curColIndex - 1]);\n      } else if (curColIndex === 0 && !isMultiple) {\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);\n        var allDayRow_2 = this.parent.getAllDayRow();\n        this.selectCells(false, allDayRow_2.cells[maxColIndex - 1]);\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.calculateNextPrevDate = function (currentCell, target, type) {\n    var initialId = this.initialTarget.getAttribute('data-group-index');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.currentView === 'Month') {\n      if (target.getAttribute('data-group-index') !== initialId) {\n        var currentDate = new Date(parseInt(currentCell.getAttribute('data-date'), 10));\n        var nextPrevDate = type === 'right' ? new Date(currentDate.setDate(currentDate.getDate() + 1)) : new Date(currentDate.setDate(currentDate.getDate() - 1));\n        target = [].slice.call(this.parent.element.querySelectorAll('td[data-date=\"' + nextPrevDate.getTime().toString() + '\"]' + '[data-group-index=\"' + initialId + '\"]'))[0];\n      }\n    }\n\n    return target;\n  };\n\n  KeyboardInteraction.prototype.getFocusableElements = function (container) {\n    var queryString = 'a[href]:not([tabindex=\"-1\"]),input:not([disabled]):not([tabindex=\"-1\"]),' + 'textarea:not([disabled]):not([tabindex=\"-1\"]),button:not([disabled]):not([tabindex=\"-1\"]),' + 'select:not([disabled]):not([tabindex=\"-1\"]),[tabindex]:not([tabindex=\"-1\"]),[contentEditable=true]:not([tabindex=\"-1\"])';\n    return [].slice.call(container.querySelectorAll(queryString));\n  };\n\n  KeyboardInteraction.prototype.processTabOnPopup = function (e, popupElement) {\n    var _this = this;\n\n    var focusableElements = this.getFocusableElements(popupElement);\n    focusableElements = focusableElements.filter(function (element) {\n      var footerEle = _this.parent.element.querySelector('.' + cls.POPUP_FOOTER_CLASS);\n\n      if (footerEle && footerEle.offsetParent) {\n        return !(element.classList.contains(cls.EDIT_CLASS) || element.classList.contains(cls.DELETE_CLASS));\n      } else {\n        return !(element.classList.contains(cls.EDIT_EVENT_CLASS) || element.classList.contains(cls.DELETE_EVENT_CLASS));\n      }\n    });\n    var firstEle = focusableElements[0];\n    var lastEle = focusableElements[focusableElements.length - 1];\n\n    if (!isNullOrUndefined(lastEle) && document.activeElement === lastEle && !e.shiftKey) {\n      e.preventDefault();\n      firstEle.focus();\n    }\n\n    if (!isNullOrUndefined(firstEle) && document.activeElement === firstEle && e.shiftKey) {\n      e.preventDefault();\n      lastEle.focus();\n    }\n  };\n\n  KeyboardInteraction.prototype.processTab = function (e, isReverse) {\n    var target = e.target;\n    var popupWrapper = closest(target, '.' + cls.POPUP_WRAPPER_CLASS + ',.' + cls.MORE_POPUP_WRAPPER_CLASS);\n\n    if (popupWrapper && popupWrapper.classList.contains(cls.POPUP_OPEN)) {\n      if (popupWrapper.classList.contains(cls.MORE_POPUP_WRAPPER_CLASS)) {\n        this.parent.eventBase.removeSelectedAppointmentClass();\n      }\n\n      this.processTabOnPopup(e, popupWrapper);\n      return;\n    }\n\n    if (target.classList.contains(cls.ROOT)) {\n      this.parent.eventBase.removeSelectedAppointmentClass();\n      return;\n    }\n\n    if (target.classList.contains(cls.APPOINTMENT_CLASS)) {\n      var appointments = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_CLASS));\n      var selectedAppointments = this.parent.eventBase.getSelectedAppointments();\n\n      if (selectedAppointments.length > 0) {\n        target = selectedAppointments[selectedAppointments.length - 1];\n      }\n\n      this.parent.eventBase.removeSelectedAppointmentClass();\n\n      if (!isReverse && target.getAttribute('data-guid') === appointments[appointments.length - 1].getAttribute('data-guid') || isReverse && target.getAttribute('data-guid') === appointments[0].getAttribute('data-guid')) {\n        return;\n      }\n\n      if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n        this.selectAppointment(isReverse, target);\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    var selectedCells = this.parent.getSelectedElements();\n\n    if (selectedCells.length > 0 && !target.classList.contains(cls.APPOINTMENT_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n      this.selectAppointmentElementFromWorkCell(isReverse, target);\n      e.preventDefault();\n      return;\n    }\n  };\n\n  KeyboardInteraction.prototype.processDelete = function (e) {\n    if (document.activeElement.classList.contains(cls.APPOINTMENT_CLASS)) {\n      addClass([document.activeElement], cls.APPOINTMENT_BORDER);\n      this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();\n      this.parent.quickPopup.deleteClick();\n    }\n  };\n\n  KeyboardInteraction.prototype.processEscape = function () {\n    this.parent.quickPopup.onClosePopup();\n    this.parent.quickPopup.morePopup.hide();\n\n    if (this.parent.headerModule) {\n      this.parent.headerModule.hideHeaderPopup();\n    }\n  };\n\n  KeyboardInteraction.prototype.isPreventAction = function (e) {\n    var target = closest(e.target, '.' + cls.RESOURCE_GROUP_CELLS_CLASS);\n\n    if (this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Get module name.\n   */\n\n\n  KeyboardInteraction.prototype.getModuleName = function () {\n    return 'keyboard';\n  };\n  /**\n   * To destroy the keyboard module.\n   * @return {void}\n   * @private\n   */\n\n\n  KeyboardInteraction.prototype.destroy = function () {\n    this.removeEventListener();\n    this.keyboardModule.destroy();\n  };\n\n  return KeyboardInteraction;\n}();\n\nexport { KeyboardInteraction };","map":null,"metadata":{},"sourceType":"module"}