{"ast":null,"code":"import { isUndefined, isNullOrUndefined, merge, setImmediate, setValue } from './util';\nimport { addClass, removeClass } from './dom';\nimport { Observer } from './observer';\n/* tslint:enable:no-any */\n\n/**\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\n * @private\n */\n\nvar Base =\n/** @class */\nfunction () {\n  /**\n   * Base constructor accept options and element\n   */\n  function Base(options, element) {\n    this.isProtectedOnChange = true;\n    this.properties = {};\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.refreshing = false; // tslint:disable-next-line:no-empty\n\n    this.finalUpdate = function () {};\n\n    this.childChangedProperties = {};\n    this.modelObserver = new Observer(this);\n\n    if (!isUndefined(element)) {\n      if ('string' === typeof element) {\n        this.element = document.querySelector(element);\n      } else {\n        this.element = element;\n      }\n\n      if (!isNullOrUndefined(this.element)) {\n        this.isProtectedOnChange = false;\n        this.addInstance();\n      }\n    }\n\n    if (!isUndefined(options)) {\n      this.setProperties(options, true);\n    }\n\n    this.isDestroyed = false;\n  }\n  /** Property base section */\n\n  /**\n   * Function used to set bunch of property at a time.\n   * @private\n   * @param  {Object} prop - JSON object which holds components properties.\n   * @param  {boolean} muteOnChange? - Specifies to true when we set properties.\n   */\n\n\n  Base.prototype.setProperties = function (prop, muteOnChange) {\n    var prevDetection = this.isProtectedOnChange;\n    this.isProtectedOnChange = !!muteOnChange;\n    merge(this, prop);\n\n    if (muteOnChange !== true) {\n      merge(this.changedProperties, prop);\n      this.dataBind();\n    }\n\n    this.finalUpdate();\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.isProtectedOnChange = prevDetection;\n  };\n\n  ;\n  /**\n   * Calls for child element data bind\n   * @param {Object} obj\n   * @param {Object} parent\n   * @returns {void}\n   */\n  // tslint:disable-next-line:no-any\n\n  Base.callChildDataBind = function (obj, parent) {\n    var keys = Object.keys(obj);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n\n      if (parent[key] instanceof Array) {\n        for (var _a = 0, _b = parent[key]; _a < _b.length; _a++) {\n          var obj_1 = _b[_a];\n\n          if (obj_1.dataBind !== undefined) {\n            obj_1.dataBind();\n          }\n        }\n      } else {\n        parent[key].dataBind();\n      }\n    }\n  };\n\n  Base.prototype.clearChanges = function () {\n    this.finalUpdate();\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.childChangedProperties = {};\n  };\n  /**\n   * Bind property changes immediately to components\n   */\n\n\n  Base.prototype.dataBind = function () {\n    Base.callChildDataBind(this.childChangedProperties, this);\n\n    if (Object.getOwnPropertyNames(this.changedProperties).length) {\n      var prevDetection = this.isProtectedOnChange;\n      var newChanges = this.changedProperties;\n      var oldChanges = this.oldProperties;\n      this.clearChanges();\n      this.isProtectedOnChange = true;\n      this.onPropertyChanged(newChanges, oldChanges);\n      this.isProtectedOnChange = prevDetection;\n    }\n  };\n\n  ;\n\n  Base.prototype.saveChanges = function (key, newValue, oldValue) {\n    if (this.isProtectedOnChange) {\n      return;\n    }\n\n    this.oldProperties[key] = oldValue;\n    this.changedProperties[key] = newValue;\n    this.finalUpdate();\n    this.finalUpdate = setImmediate(this.dataBind.bind(this));\n  };\n\n  ;\n  /** Event Base Section */\n\n  /**\n   * Adds the handler to the given event listener.\n   * @param {string} eventName - A String that specifies the name of the event\n   * @param {Function} listener - Specifies the call to run when the event occurs.\n   * @return {void}\n   */\n\n  Base.prototype.addEventListener = function (eventName, handler) {\n    this.modelObserver.on(eventName, handler);\n  };\n  /**\n   * Removes the handler from the given event listener.\n   * @param {string} eventName - A String that specifies the name of the event to remove\n   * @param {Function} listener - Specifies the function to remove\n   * @return {void}\n   */\n\n\n  Base.prototype.removeEventListener = function (eventName, handler) {\n    this.modelObserver.off(eventName, handler);\n  };\n  /**\n   * Triggers the handlers in the specified event.\n   * @private\n   * @param {string} eventName - Specifies the event to trigger for the specified component properties.\n   * Can be a custom event, or any of the standard events.\n   * @param {Event} eventProp - Additional parameters to pass on to the event properties\n   * @return {void}\n   */\n\n\n  Base.prototype.trigger = function (eventName, eventProp) {\n    if (this.isDestroyed !== true) {\n      var prevDetection = this.isProtectedOnChange;\n      this.isProtectedOnChange = false;\n      this.modelObserver.notify(eventName, eventProp);\n      this.isProtectedOnChange = prevDetection;\n    }\n  };\n  /**\n   * To maintain instance in base class\n   */\n\n\n  Base.prototype.addInstance = function () {\n    // Add module class to the root element\n    var moduleClass = 'e-' + this.getModuleName().toLowerCase();\n    addClass([this.element], ['e-control', moduleClass]);\n\n    if (!isNullOrUndefined(this.element.ej2_instances)) {\n      this.element.ej2_instances.push(this);\n    } else {\n      setValue('ej2_instances', [this], this.element);\n    }\n  };\n  /**\n   * To remove the instance from the element\n   */\n\n\n  Base.prototype.destroy = function () {\n    var _this = this;\n\n    this.element.ej2_instances = this.element.ej2_instances.filter(function (i) {\n      return i !== _this;\n    });\n    removeClass([this.element], ['e-' + this.getModuleName()]);\n\n    if (this.element.ej2_instances.length === 0) {\n      // Remove module class from the root element\n      removeClass([this.element], ['e-control']);\n    }\n\n    this.clearChanges();\n    this.modelObserver.destroy();\n    this.isDestroyed = true;\n  };\n\n  return Base;\n}();\n\nexport { Base };\nexport function getComponent(elem, comp) {\n  var instance;\n  var i;\n\n  for (i = 0; i < elem.ej2_instances.length; i++) {\n    instance = elem.ej2_instances[i];\n    var compName = instance.getModuleName();\n\n    if (comp === compName) {\n      return instance;\n    }\n  }\n\n  return undefined;\n}","map":null,"metadata":{},"sourceType":"module"}