{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, Event, EventHandler, L10n, setValue, getValue } from '@syncfusion/ej2-base';\nimport { NotifyPropertyChanges, detach, Internationalization, getUniqueID } from '@syncfusion/ej2-base';\nimport { Input } from '../input/input';\nvar ROOT = 'e-textbox';\nvar CONTROL = 'e-control';\nvar HIDE_CLEAR = 'e-clear-icon-hide';\n/**\n * Represents the TextBox component that allows the user to enter the values based on it's type.\n * ```html\n * <input name='images' id='textbox'/>\n * ```\n * ```typescript\n * <script>\n *   var textboxObj = new TextBox();\n *   textboxObj.appendTo('#textbox');\n * </script>\n * ```\n */\n\nvar TextBox =\n/** @class */\nfunction (_super) {\n  __extends(TextBox, _super);\n\n  function TextBox(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.previousValue = null;\n    return _this;\n  }\n  /**\n   * Calls internally if any of the property value is changed.\n   * @private\n   */\n\n\n  TextBox.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'floatLabelType':\n          Input.removeFloating(this.textboxWrapper);\n          Input.addFloating(this.element, this.floatLabelType, this.placeholder);\n          break;\n\n        case 'enabled':\n          Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container);\n          break;\n\n        case 'value':\n          var prevOnChange = this.isProtectedOnChange;\n          this.isProtectedOnChange = true;\n\n          if (!this.isBlank(this.value)) {\n            this.value = this.value.toString();\n          }\n\n          this.isProtectedOnChange = prevOnChange;\n          Input.setValue(this.value, this.element, this.floatLabelType, this.showClearButton);\n          this.raiseChangeEvent();\n          break;\n\n        case 'readonly':\n          Input.setReadonly(this.readonly, this.element);\n          break;\n\n        case 'type':\n          this.element.setAttribute('type', this.type);\n          this.raiseChangeEvent();\n          break;\n\n        case 'showClearButton':\n          Input.setClearButton(this.showClearButton, this.element, this.textboxWrapper);\n          this.bindClearEvent();\n          break;\n\n        case 'enableRtl':\n          Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(this.placeholder, this.element);\n          break;\n\n        case 'cssClass':\n          Input.setCssClass(this.cssClass, [this.textboxWrapper.container]);\n          break;\n\n        case 'locale':\n          this.globalize = new Internationalization(this.locale);\n          this.l10n.setLocale(this.locale);\n          this.setProperties({\n            placeholder: this.l10n.getConstant('placeholder')\n          }, true);\n          Input.setPlaceholder(this.placeholder, this.element);\n          break;\n      }\n    }\n  };\n  /**\n   * Gets the component name\n   * @private\n   */\n\n\n  TextBox.prototype.getModuleName = function () {\n    return 'textbox';\n  };\n\n  TextBox.prototype.isBlank = function (str) {\n    return !str || /^\\s*$/.test(str);\n  };\n\n  TextBox.prototype.preRender = function () {\n    this.cloneElement = this.element.cloneNode(true);\n    /* istanbul ignore next */\n\n    if (this.element.tagName === 'EJS-TEXTBOX') {\n      var ejInstance = getValue('ej2_instances', this.element);\n      var inputElement = this.createElement('input');\n      var index = 0;\n\n      for (index; index < this.element.attributes.length; index++) {\n        inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n        inputElement.innerHTML = this.element.innerHTML;\n      }\n\n      this.element.appendChild(inputElement);\n      this.element = inputElement;\n      setValue('ej2_instances', ejInstance, this.element);\n    }\n\n    var attributes = this.element.attributes;\n    this.checkAttributes(attributes);\n    this.element.setAttribute('type', this.type);\n    this.globalize = new Internationalization(this.locale);\n    var localeText = {\n      placeholder: this.placeholder\n    };\n    this.l10n = new L10n('textbox', localeText, this.locale);\n\n    if (this.l10n.getConstant('placeholder') !== '') {\n      this.setProperties({\n        placeholder: this.placeholder || this.l10n.getConstant('placeholder')\n      }, true);\n    }\n\n    if (!this.element.hasAttribute('id')) {\n      this.element.setAttribute('id', getUniqueID('textbox'));\n    }\n  };\n\n  TextBox.prototype.checkAttributes = function (attrs) {\n    for (var i = 0; i < attrs.length; i++) {\n      var key = attrs[i].nodeName;\n\n      if (key === 'disabled') {\n        this.setProperties({\n          enabled: false\n        }, true);\n      } else if (key === 'readonly') {\n        this.setProperties({\n          readonly: true\n        }, true);\n      } else if (key === 'placeholder') {\n        this.setProperties({\n          placeholder: attrs[i].nodeValue\n        }, true);\n      }\n    }\n  };\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  TextBox.prototype.render = function () {\n    this.textboxWrapper = Input.createInput({\n      element: this.element,\n      floatLabelType: this.floatLabelType,\n      properties: {\n        enabled: this.enabled,\n        enableRtl: this.enableRtl,\n        cssClass: this.cssClass,\n        readonly: this.readonly,\n        placeholder: this.placeholder,\n        showClearButton: this.showClearButton\n      }\n    });\n    this.wireEvents();\n  };\n\n  TextBox.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'focus', this.focusHandler, this);\n    EventHandler.add(this.element, 'blur', this.focusOutHandler, this);\n    EventHandler.add(this.element, 'input', this.inputHandler, this);\n    EventHandler.add(this.element, 'change', this.changeHandler, this);\n\n    if (this.enabled) {\n      this.bindClearEvent();\n    }\n  };\n\n  TextBox.prototype.focusHandler = function (args) {\n    var eventArgs = {\n      container: this.textboxWrapper.container,\n      event: args,\n      value: this.value\n    };\n    this.trigger('focus', eventArgs);\n  };\n\n  TextBox.prototype.focusOutHandler = function (args) {\n    if (!(this.previousValue === null && this.value === null && this.element.value === '') && this.previousValue !== this.element.value) {\n      this.raiseChangeEvent(args, true);\n    }\n\n    var eventArgs = {\n      container: this.textboxWrapper.container,\n      event: args,\n      value: this.value\n    };\n    this.trigger('blur', eventArgs);\n  };\n\n  TextBox.prototype.inputHandler = function (args) {\n    var eventArgs = {\n      event: args,\n      value: this.element.value,\n      previousValue: this.value,\n      container: this.textboxWrapper.container\n    };\n    this.trigger('input', eventArgs);\n  };\n\n  TextBox.prototype.changeHandler = function (args) {\n    this.setProperties({\n      value: this.element.value\n    }, true);\n    this.raiseChangeEvent(args, true);\n  };\n\n  TextBox.prototype.raiseChangeEvent = function (event, interaction) {\n    var eventArgs = {\n      event: event,\n      value: this.value,\n      previousValue: this.previousValue,\n      container: this.textboxWrapper.container,\n      isInteraction: interaction ? interaction : false\n    };\n    this.trigger('change', eventArgs);\n    this.previousValue = this.value;\n  };\n\n  TextBox.prototype.bindClearEvent = function () {\n    if (this.showClearButton) {\n      EventHandler.add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);\n    }\n  };\n\n  TextBox.prototype.resetInputHandler = function (event) {\n    event.preventDefault();\n\n    if (!this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR)) {\n      Input.setValue('', this.element, this.floatLabelType, this.showClearButton);\n    }\n  };\n\n  TextBox.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'focus', this.focusHandler);\n    EventHandler.remove(this.element, 'blur', this.focusOutHandler);\n    EventHandler.remove(this.element, 'input', this.inputHandler);\n    EventHandler.remove(this.element, 'change', this.changeHandler);\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers.\n   * Also, it maintains the initial TextBox element from the DOM.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  TextBox.prototype.destroy = function () {\n    this.unWireEvents();\n    this.textboxWrapper.container.parentElement.appendChild(this.cloneElement);\n    detach(this.textboxWrapper.container);\n    this.textboxWrapper = null;\n    this.cloneElement.classList.remove(ROOT, CONTROL);\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Gets the properties to be maintained in the persisted state.\n   * @return {string}\n   */\n\n\n  TextBox.prototype.getPersistData = function () {\n    var keyEntity = ['value'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Adding the multiple attributes as key-value pair to the TextBox element.\n   * @param { { [key: string]: string } } attributes - Specifies the attributes to be add to TextBox element.\n   * @return {void}\n   */\n\n\n  TextBox.prototype.addAttributes = function (attributes) {\n    for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (key === 'disabled') {\n        this.setProperties({\n          enabled: false\n        }, true);\n        Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container);\n      } else if (key === 'readonly') {\n        this.setProperties({\n          readonly: true\n        }, true);\n        Input.setReadonly(this.readonly, this.element);\n      } else if (key === 'class') {\n        this.element.classList.add(attributes[key]);\n      } else if (key === 'placeholder') {\n        this.setProperties({\n          placeholder: attributes[key]\n        }, true);\n        Input.setPlaceholder(this.placeholder, this.element);\n      } else {\n        this.element.setAttribute(key, attributes[key]);\n      }\n    }\n  };\n  /**\n   * Removing the multiple attributes as key-value pair to the TextBox element.\n   * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.\n   * @return {void}\n   */\n\n\n  TextBox.prototype.removeAttributes = function (attributes) {\n    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n      var key = attributes_1[_i];\n\n      if (key === 'disabled') {\n        this.setProperties({\n          enabled: true\n        }, true);\n        Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container);\n      } else if (key === 'readonly') {\n        this.setProperties({\n          readonly: false\n        }, true);\n        Input.setReadonly(this.readonly, this.element);\n      } else if (key === 'placeholder') {\n        this.setProperties({\n          placeholder: null\n        }, true);\n        Input.setPlaceholder(this.placeholder, this.element);\n      } else {\n        this.element.removeAttribute(key);\n      }\n    }\n  };\n\n  __decorate([Property('text')], TextBox.prototype, \"type\", void 0);\n\n  __decorate([Property(false)], TextBox.prototype, \"readonly\", void 0);\n\n  __decorate([Property(null)], TextBox.prototype, \"value\", void 0);\n\n  __decorate([Property('Never')], TextBox.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Property('')], TextBox.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(null)], TextBox.prototype, \"placeholder\", void 0);\n\n  __decorate([Property(false)], TextBox.prototype, \"enableRtl\", void 0);\n\n  __decorate([Property(true)], TextBox.prototype, \"enabled\", void 0);\n\n  __decorate([Property(false)], TextBox.prototype, \"showClearButton\", void 0);\n\n  __decorate([Property(false)], TextBox.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Event()], TextBox.prototype, \"created\", void 0);\n\n  __decorate([Event()], TextBox.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], TextBox.prototype, \"change\", void 0);\n\n  __decorate([Event()], TextBox.prototype, \"blur\", void 0);\n\n  __decorate([Event()], TextBox.prototype, \"focus\", void 0);\n\n  __decorate([Event()], TextBox.prototype, \"input\", void 0);\n\n  TextBox = __decorate([NotifyPropertyChanges], TextBox);\n  return TextBox;\n}(Component);\n\nexport { TextBox };","map":null,"metadata":{},"sourceType":"module"}