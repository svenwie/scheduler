{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { EventHandler, formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { createElement, remove, addClass, append, prepend } from '@syncfusion/ej2-base';\nimport { WorkCellInteraction } from '../actions/work-cells';\nimport { ViewBase } from './view-base';\nimport * as util from '../base/util';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\nimport { MonthEvent } from '../event-renderer/month';\n/**\n * month view\n */\n\nvar Month =\n/** @class */\nfunction (_super) {\n  __extends(Month, _super);\n  /**\n   * Constructor for month view\n   */\n\n\n  function Month(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.dayNameFormat = 'wide';\n    _this.viewClass = 'e-month-view';\n    _this.isInverseTableSelect = false;\n    _this.monthDates = {};\n    _this.workCellAction = new WorkCellInteraction(parent);\n    return _this;\n  }\n\n  Month.prototype.addEventListener = function () {\n    this.parent.on(event.scrollUiUpdate, this.onScrollUIUpdate, this);\n    this.parent.on(event.dataReady, this.onDataReady, this);\n    this.parent.on(event.cellClick, this.onCellClick, this);\n  };\n\n  Month.prototype.removeEventListener = function () {\n    this.parent.off(event.scrollUiUpdate, this.onScrollUIUpdate);\n    this.parent.off(event.dataReady, this.onDataReady);\n    this.parent.off(event.cellClick, this.onCellClick);\n  };\n\n  Month.prototype.onDataReady = function (args) {\n    var monthEvent = new MonthEvent(this.parent);\n    monthEvent.renderAppointments();\n  };\n\n  Month.prototype.onCellClick = function (event) {// Here cell click\n  };\n\n  Month.prototype.onContentScroll = function (e) {\n    this.scrollTopPanel(e.target);\n    this.scrollLeftPanel(e.target);\n  };\n\n  Month.prototype.scrollLeftPanel = function (target) {\n    var leftPanel = this.getLeftPanelElement();\n\n    if (leftPanel) {\n      leftPanel.scrollTop = target.scrollTop;\n    }\n  };\n\n  Month.prototype.getLeftPanelElement = function () {\n    return this.element.querySelector('.' + cls.WEEK_NUMBER_WRAPPER_CLASS);\n  };\n\n  Month.prototype.onScrollUIUpdate = function (args) {\n    var headerHeight = this.getHeaderBarHeight();\n    var header = this.getDatesHeaderElement();\n    var content = this.getContentAreaElement();\n    var height = this.parent.element.offsetHeight - headerHeight - header.offsetHeight;\n    var leftPanel = this.getLeftPanelElement();\n    this.setContentHeight(content, leftPanel, height);\n    var scrollBarWidth = util.getScrollBarWidth(); // tslint:disable:no-any\n\n    if (content.offsetWidth - content.clientWidth > 0) {\n      header.firstChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';\n      header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';\n    } else {\n      header.firstChild.style[args.cssProperties.border] = '';\n      header.style[args.cssProperties.padding] = '';\n    } // tslint:enable:no-any\n\n  };\n\n  Month.prototype.setContentHeight = function (content, leftPanelElement, height) {\n    content.style.height = 'auto';\n\n    if (this.parent.currentView === 'Month') {\n      content.style.height = formatUnit(height);\n    }\n\n    if (leftPanelElement) {\n      if (this.parent.currentView === 'MonthAgenda') {\n        height = this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS).offsetHeight;\n      }\n\n      leftPanelElement.style.height = 'auto';\n      leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));\n    }\n  };\n\n  Month.prototype.generateColumnLevels = function () {\n    var colLevels = [];\n    var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      colLevels = this.parent.resourceBase.generateResourceLevels(level);\n\n      if (this.parent.currentView === 'MonthAgenda') {\n        colLevels = [level];\n      }\n\n      if (this.parent.uiStateValues.isGroupAdaptive) {\n        var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n        colLevels = [this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays)];\n      }\n    } else {\n      colLevels.push(level);\n    }\n\n    this.colLevels = colLevels;\n    return colLevels;\n  };\n\n  Month.prototype.getDateSlots = function (renderDates, workDays) {\n    var count = this.parent.activeViewOptions.showWeekend ? util.WEEK_LENGTH : workDays.length;\n    var dateSlots = [];\n\n    for (var col = 0; col < count; col++) {\n      var classList = [cls.HEADER_CELLS_CLASS];\n      var currentDateIndex = renderDates.slice(0, count).map(function (date) {\n        return date.getDay();\n      });\n\n      if (this.isCurrentMonth(this.parent.selectedDate) && currentDateIndex.indexOf(new Date().getDay()) === col) {\n        classList.push(cls.CURRENT_DAY_CLASS);\n      }\n\n      dateSlots.push({\n        date: renderDates[col],\n        type: 'monthDay',\n        className: classList,\n        colSpan: 1,\n        workDays: workDays\n      });\n    }\n\n    return dateSlots;\n  };\n\n  Month.prototype.getDayNameFormat = function () {\n    if (this.parent.isAdaptive || this.parent.activeViewOptions.group.resources.length > 0) {\n      return 'abbreviated';\n    }\n\n    return 'wide';\n  };\n\n  Month.prototype.renderLayout = function (type) {\n    this.dayNameFormat = this.getDayNameFormat();\n    this.setPanel(createElement('div', {\n      className: cls.TABLE_WRAP_CLASS\n    }));\n    var clsList = [this.viewClass];\n    clsList.push(type);\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      clsList.push('e-by-date');\n    }\n\n    addClass([this.element], clsList);\n    this.renderPanel(type);\n    this.element.appendChild(this.createTableLayout(cls.OUTER_TABLE_CLASS));\n    this.colLevels = this.generateColumnLevels();\n    this.renderHeader();\n    this.renderContent();\n    var target = this.parent.currentView === 'MonthAgenda' ? this.parent.activeView.getPanel() : this.parent.element;\n\n    if (this.parent.uiStateValues.isGroupAdaptive && !target.querySelector('.' + cls.RESOURCE_TOOLBAR_CONTAINER)) {\n      this.renderResourceMobileLayout();\n    }\n\n    this.parent.notify(event.contentReady, {});\n  };\n\n  Month.prototype.wireCellEvents = function (element) {\n    EventHandler.add(element, 'mousedown', this.workCellAction.cellMouseDown, this.workCellAction);\n    EventHandler.add(element, 'click', this.workCellAction.cellClick, this.workCellAction);\n    EventHandler.add(element, 'dblclick', this.workCellAction.cellDblClick, this.workCellAction);\n  };\n\n  Month.prototype.renderHeader = function () {\n    var tr = createElement('tr');\n    this.renderLeftIndent(tr);\n    var dateTd = createElement('td');\n    dateTd.appendChild(this.renderDatesHeader());\n    tr.appendChild(dateTd);\n    prepend([tr], this.element.querySelector('tbody'));\n  };\n\n  Month.prototype.renderLeftIndent = function (tr) {\n    if (this.parent.activeViewOptions.showWeekNumber) {\n      tr.appendChild(createElement('td', {\n        className: 'e-left-indent'\n      }));\n    }\n  };\n\n  Month.prototype.renderContent = function () {\n    var tr = createElement('tr');\n\n    if (this.parent.activeViewOptions.showWeekNumber) {\n      tr.appendChild(this.renderWeekNumberContent());\n    }\n\n    var workTd = createElement('td');\n    var wrap = createElement('div', {\n      className: cls.CONTENT_WRAP_CLASS\n    });\n    var contentArea = this.renderContentArea();\n\n    if (this.parent.currentView === 'Month') {\n      wrap.appendChild(contentArea);\n    } else {\n      var monthAgendaWrapper = createElement('div', {\n        className: cls.TABLE_CONTAINER_CLASS\n      });\n      monthAgendaWrapper.appendChild(contentArea);\n      wrap.appendChild(monthAgendaWrapper);\n    }\n\n    EventHandler.add(wrap, 'scroll', this.onContentScroll, this);\n    workTd.appendChild(wrap);\n    tr.appendChild(workTd);\n    this.element.querySelector('tbody').appendChild(tr);\n    this.renderAppointmentContainer();\n  };\n\n  Month.prototype.renderWeekNumberContent = function () {\n    var dateCol = this.renderDates.map(function (date) {\n      return new Date(+date);\n    });\n    var td = createElement('td');\n    var contentWrapper = createElement('div', {\n      className: cls.WEEK_NUMBER_WRAPPER_CLASS\n    });\n    td.appendChild(contentWrapper);\n    var contentWrapTable = this.createTableLayout();\n    contentWrapper.appendChild(contentWrapTable);\n    var noOfDays = this.parent.activeViewOptions.showWeekend ? util.WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;\n\n    for (var i = 0, length_1 = this.renderDates.length / noOfDays; i < length_1; i++) {\n      var dates = dateCol.splice(0, noOfDays);\n      var weekNumber = util.getWeekNumber(dates.slice(-1)[0]).toString();\n      contentWrapTable.querySelector('tbody').appendChild(this.createWeekNumberElement(weekNumber));\n    }\n\n    return td;\n  };\n\n  Month.prototype.renderAppointmentContainer = function () {//Here needs to render mobile view appointment details on selected date\n  };\n\n  Month.prototype.renderDatesHeader = function () {\n    var container = createElement('div', {\n      className: cls.DATE_HEADER_CONTAINER_CLASS\n    });\n    var wrap = createElement('div', {\n      className: cls.DATE_HEADER_WRAP_CLASS\n    });\n    container.appendChild(wrap);\n    var table = this.createTableLayout();\n    this.createColGroup(table, this.colLevels[this.colLevels.length - 1]);\n    var trEle = createElement('tr');\n\n    for (var i = 0; i < this.colLevels.length; i++) {\n      var level = this.colLevels[i];\n      var ntr = trEle.cloneNode();\n\n      for (var j = 0; j < level.length; j++) {\n        var td = level[j];\n        ntr.appendChild(this.createHeaderCell(td));\n      }\n\n      table.querySelector('tbody').appendChild(ntr);\n    }\n\n    wrap.appendChild(table);\n    return container;\n  };\n\n  Month.prototype.createHeaderCell = function (td) {\n    var tdEle = createElement('td');\n    this.addAttributes(td, tdEle);\n\n    if (td.type === 'monthDay') {\n      var ele = createElement('span', {\n        innerHTML: this.parent.getDayNames(this.dayNameFormat)[td.date.getDay()]\n      });\n      tdEle.appendChild(ele);\n    }\n\n    if (td.type === 'resourceHeader') {\n      this.setResourceHeaderContent(tdEle, td);\n    }\n\n    if (td.type === 'dateHeader') {\n      addClass([tdEle], cls.DATE_HEADER_CLASS);\n      tdEle.setAttribute('data-date', td.date.getTime().toString());\n\n      if (this.parent.activeViewOptions.dateHeaderTemplate) {\n        var cellArgs = {\n          date: td.date,\n          type: td.type\n        };\n        var ele = this.parent.getDateHeaderTemplate()(cellArgs);\n\n        if (ele && ele.length) {\n          append([].slice.call(ele), tdEle);\n        }\n      } else {\n        var ele = createElement('span', {\n          className: cls.NAVIGATE_CLASS\n        });\n        var title = this.parent.globalize.formatDate(td.date, {\n          skeleton: 'full'\n        });\n        ele.setAttribute('title', title);\n        ele.innerHTML = td.date.getDate() === 1 && !this.isCurrentDate(td.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(td.date, {\n          format: 'MMM d'\n        }) : this.parent.globalize.formatDate(td.date, {\n          skeleton: 'd'\n        });\n        tdEle.appendChild(ele);\n      }\n\n      this.wireCellEvents(tdEle);\n    }\n\n    var args = {\n      elementType: td.type,\n      element: tdEle,\n      date: td.date,\n      groupIndex: td.groupIndex\n    };\n    this.parent.trigger(event.renderCell, args);\n    return tdEle;\n  };\n\n  Month.prototype.getContentSlots = function () {\n    var slotDatas = [];\n\n    var prepareSlots = function prepareSlots(rowIndex, renderDate, resData, classList) {\n      var data = {\n        date: new Date(+renderDate),\n        groupIndex: resData.groupIndex,\n        workDays: resData.workDays,\n        type: 'monthCells',\n        className: classList || [cls.WORK_CELLS_CLASS]\n      };\n\n      if (!slotDatas[rowIndex]) {\n        slotDatas[rowIndex] = [];\n      }\n\n      slotDatas[rowIndex].push(data);\n    };\n\n    var includeResource = this.parent.currentView !== 'MonthAgenda' && this.parent.activeViewOptions.group.resources.length > 0;\n\n    if (includeResource && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeViewOptions.group.byDate) {\n      for (var _i = 0, _a = this.colLevels[this.colLevels.length - 2]; _i < _a.length; _i++) {\n        var res = _a[_i];\n        var dates = res.renderDates.map(function (date) {\n          return new Date(+date);\n        });\n        var count = this.parent.activeViewOptions.showWeekend ? util.WEEK_LENGTH : res.workDays.length;\n\n        for (var i = 0; i < res.renderDates.length / count; i++) {\n          var colDates = dates.splice(0, count);\n\n          for (var _b = 0, colDates_1 = colDates; _b < colDates_1.length; _b++) {\n            var colDate = colDates_1[_b];\n            prepareSlots(i, colDate, res);\n          }\n        }\n      }\n    } else {\n      var dates = this.renderDates.map(function (date) {\n        return new Date(+date);\n      });\n      var count = this.parent.activeViewOptions.showWeekend ? util.WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;\n\n      for (var i = 0; i < this.renderDates.length / count; i++) {\n        var colDates = dates.splice(0, count);\n\n        for (var _c = 0, colDates_2 = colDates; _c < colDates_2.length; _c++) {\n          var colDate = colDates_2[_c];\n\n          if (includeResource) {\n            var lastRow = this.colLevels[this.colLevels.length - 1];\n            var resourcesTd = lastRow.slice(0, lastRow.length / count);\n\n            for (var resIndex = 0; resIndex < resourcesTd.length; resIndex++) {\n              var clsList = void 0;\n\n              if (resIndex !== 0) {\n                clsList = [cls.WORK_CELLS_CLASS, cls.DISABLE_DATE];\n              }\n\n              prepareSlots(i, colDate, resourcesTd[resIndex], clsList);\n            }\n          } else {\n            prepareSlots(i, colDate, this.colLevels[this.colLevels.length - 1][0]);\n          }\n        }\n      }\n    }\n\n    return slotDatas;\n  };\n\n  Month.prototype.updateClassList = function (data) {\n    if (this.isOtherMonth(data.date)) {\n      data.className.push(cls.OTHERMONTH_CLASS);\n    }\n\n    if (this.parent.currentView === 'MonthAgenda' && this.parent.isSelectedDate(data.date)) {\n      data.className.push(cls.SELECTED_CELL_CLASS);\n    }\n  };\n\n  Month.prototype.isOtherMonth = function (date) {\n    return date.getTime() < this.monthDates.start.getTime() || date.getTime() > this.monthDates.end.getTime();\n  };\n\n  Month.prototype.renderContentArea = function () {\n    var tbl = this.createTableLayout(cls.CONTENT_TABLE_CLASS);\n\n    if (this.parent.currentView === 'TimelineMonth') {\n      this.createColGroup(tbl, this.colLevels[this.colLevels.length - 1]);\n    }\n\n    var monthDate = new Date(this.parent.selectedDate.getTime());\n    this.monthDates = {\n      start: util.firstDateOfMonth(monthDate),\n      end: util.lastDateOfMonth(util.addMonths(monthDate, this.parent.activeViewOptions.interval - 1))\n    };\n    this.renderContentTable(tbl);\n    this.wireCellEvents(tbl.querySelector('tbody'));\n    return tbl;\n  };\n\n  Month.prototype.renderContentTable = function (table) {\n    var tbody = table.querySelector('tbody');\n    var tr = createElement('tr', {\n      attrs: {\n        role: 'row'\n      }\n    });\n    var td = createElement('td', {\n      attrs: {\n        role: 'gridcell',\n        'aria-selected': 'false'\n      }\n    });\n    var slotDatas = this.getContentSlots();\n\n    for (var row = 0; row < slotDatas.length; row++) {\n      var ntr = tr.cloneNode();\n\n      for (var col = 0; col < slotDatas[row].length; col++) {\n        var ntd = this.createContentTd(slotDatas[row][col], td);\n        ntr.appendChild(ntd);\n      }\n\n      tbody.appendChild(ntr);\n    }\n  };\n\n  Month.prototype.createContentTd = function (data, td) {\n    var ntd = td.cloneNode();\n\n    if (data.colSpan) {\n      ntd.setAttribute('colspan', data.colSpan.toString());\n    }\n\n    this.updateClassList(data);\n    var type = data.type;\n\n    if (data.className.indexOf(cls.RESOURCE_PARENT_CLASS) !== -1) {\n      data.className.push(cls.RESOURCE_GROUP_CELLS_CLASS);\n      type = 'resourceGroupCells';\n    }\n\n    if (this.parent.workHours.highlight && this.isWorkDay(data.date, data.workDays)) {\n      data.className.push(cls.WORKDAY_CLASS);\n    }\n\n    if (this.isCurrentDate(data.date)) {\n      data.className.push(cls.CURRENTDATE_CLASS);\n    }\n\n    addClass([ntd], data.className);\n    ntd.setAttribute('data-date', data.date.getTime().toString());\n\n    if (!isNullOrUndefined(data.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {\n      var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : data.groupIndex;\n      ntd.setAttribute('data-group-index', '' + groupIndex);\n    }\n\n    this.renderDateHeaderElement(data, ntd);\n\n    if (this.parent.cellTemplate) {\n      var args_1 = {\n        date: data.date,\n        type: type,\n        groupIndex: data.groupIndex\n      };\n      append([].slice.call(this.parent.getCellTemplate()(args_1)), ntd);\n    }\n\n    var args = {\n      elementType: type,\n      element: ntd,\n      date: data.date,\n      groupIndex: data.groupIndex\n    };\n    this.parent.trigger(event.renderCell, args);\n    return ntd;\n  };\n\n  Month.prototype.getContentAreaElement = function () {\n    return this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n  };\n\n  Month.prototype.renderDateHeaderElement = function (data, ntd) {\n    if (this.parent.currentView === 'TimelineMonth') {\n      return;\n    }\n\n    var dateHeader = createElement('div', {\n      className: cls.DATE_HEADER_CLASS\n    });\n    dateHeader.innerHTML = data.date.getDate() === 1 && !this.isCurrentDate(data.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(data.date, {\n      format: 'MMM d'\n    }) : this.parent.globalize.formatDate(data.date, {\n      skeleton: 'd'\n    });\n    ntd.appendChild(dateHeader);\n\n    if (this.getModuleName() === 'month') {\n      addClass([dateHeader], cls.NAVIGATE_CLASS);\n    }\n  };\n\n  Month.prototype.getMonthStart = function (currentDate) {\n    var monthStart = util.getWeekFirstDate(util.firstDateOfMonth(currentDate), this.parent.firstDayOfWeek);\n    var start = new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());\n    return start;\n  };\n\n  Month.prototype.getMonthEnd = function (currentDate) {\n    var endDate = util.addMonths(currentDate, this.parent.activeViewOptions.interval - 1);\n    var lastWeekOfMonth = util.getWeekFirstDate(util.lastDateOfMonth(endDate), this.parent.firstDayOfWeek);\n    var monthEnd = util.addDays(lastWeekOfMonth, util.WEEK_LENGTH - 1);\n    return monthEnd;\n  };\n\n  Month.prototype.getRenderDates = function (workDays) {\n    var renderDates = [];\n    var currentDate = util.resetTime(this.parent.selectedDate);\n    var start = this.getMonthStart(currentDate);\n    var monthEnd = this.getMonthEnd(currentDate);\n\n    do {\n      if (this.parent.activeViewOptions.showWeekend) {\n        renderDates.push(start);\n      } else {\n        if (this.isWorkDay(start, workDays)) {\n          renderDates.push(start);\n        }\n      }\n\n      start = util.addDays(start, 1);\n    } while (start.getTime() <= monthEnd.getTime());\n\n    if (!workDays) {\n      this.renderDates = renderDates;\n    }\n\n    return renderDates;\n  };\n\n  Month.prototype.getNextPreviousDate = function (type) {\n    if (type === 'next') {\n      return util.addMonths(this.parent.selectedDate, this.parent.activeViewOptions.interval);\n    } else {\n      return util.addMonths(this.parent.selectedDate, -this.parent.activeViewOptions.interval);\n    }\n  };\n\n  Month.prototype.getEndDateFromStartDate = function (start) {\n    return util.addDays(new Date(start.getTime()), 1);\n  };\n\n  Month.prototype.getDateRangeText = function () {\n    if (this.parent.isAdaptive || isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {\n      if (this.parent.activeViewOptions.interval > 1) {\n        var endDate = util.addMonths(util.lastDateOfMonth(this.parent.selectedDate), this.parent.activeViewOptions.interval - 1);\n\n        if (this.parent.selectedDate.getFullYear() === endDate.getFullYear()) {\n          var monthNames = this.parent.globalize.formatDate(this.parent.selectedDate, {\n            format: 'MMMM'\n          }) + ' - ' + this.parent.globalize.formatDate(endDate, {\n            format: 'MMMM '\n          }) + endDate.getFullYear();\n          return monthNames;\n        }\n\n        return this.parent.globalize.formatDate(this.parent.selectedDate, {\n          format: 'MMMM'\n        }) + ' ' + this.parent.selectedDate.getFullYear() + ' - ' + this.parent.globalize.formatDate(endDate, {\n          format: 'MMMM '\n        }) + endDate.getFullYear();\n      }\n\n      return this.parent.globalize.formatDate(this.parent.selectedDate, {\n        format: 'MMMM y'\n      });\n    }\n\n    return this.formatDateRange(this.parent.selectedDate);\n  };\n\n  Month.prototype.getLabelText = function (view) {\n    return this.parent.localeObj.getConstant(view) + ' of ' + this.parent.globalize.formatDate(this.parent.selectedDate, {\n      format: 'MMMM y'\n    });\n  };\n\n  Month.prototype.createWeekNumberElement = function (text) {\n    var tr = createElement('tr');\n    var td = createElement('td', {\n      className: cls.WEEK_NUMBER_CLASS,\n      attrs: {\n        'title': text ? this.parent.localeObj.getConstant('week') + ' ' + text : ''\n      },\n      innerHTML: text || ''\n    });\n    tr.appendChild(td);\n    var args = {\n      elementType: 'weekNumberCell',\n      element: td\n    };\n    this.parent.trigger(event.renderCell, args);\n    return tr;\n  };\n\n  Month.prototype.unwireEvents = function () {// No scroller events for month view\n  };\n  /**\n   * Get module name.\n   */\n\n\n  Month.prototype.getModuleName = function () {\n    return 'month';\n  };\n  /**\n   * To destroy the month.\n   * @return {void}\n   * @private\n   */\n\n\n  Month.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.element) {\n      this.unwireEvents();\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      remove(this.element);\n      this.element = null;\n\n      if (this.parent.scheduleTouchModule) {\n        this.parent.scheduleTouchModule.resetValues();\n      }\n    }\n  };\n\n  return Month;\n}(ViewBase);\n\nexport { Month };","map":null,"metadata":{},"sourceType":"module"}