{"ast":null,"code":"import { createElement, compile, append } from '@syncfusion/ej2-base';\nimport { MS_PER_DAY, getWeekNumber as _getWeekNumber } from '../base/util';\n/**\n * timeline header\n */\n\nvar TimelineHeaderRow =\n/** @class */\nfunction () {\n  function TimelineHeaderRow(parent, renderDates) {\n    this.parent = parent;\n    this.renderDates = renderDates;\n  }\n\n  TimelineHeaderRow.prototype.groupByYear = function (dates) {\n    var result = {};\n\n    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n      var d = dates_1[_i];\n      var key = d.getFullYear();\n      result[key] = result[key] || [];\n      result[key].push(d);\n    }\n\n    return result;\n  };\n\n  TimelineHeaderRow.prototype.groupByMonth = function (dates) {\n    var result = {};\n\n    for (var _i = 0, dates_2 = dates; _i < dates_2.length; _i++) {\n      var d = dates_2[_i];\n      var key = (d.getFullYear() - 1970) * 12 + d.getMonth();\n      result[key] = result[key] || [];\n      result[key].push(d);\n    }\n\n    return result;\n  };\n\n  TimelineHeaderRow.prototype.groupByWeek = function (dates) {\n    var result = {};\n\n    for (var _i = 0, dates_3 = dates; _i < dates_3.length; _i++) {\n      var d = dates_3[_i];\n      var jsDate = +new Date(1970, 0, 1);\n      var key = Math.ceil(((+d - jsDate) / MS_PER_DAY + new Date(jsDate).getDay() + 1) / 7);\n      result[key] = result[key] || [];\n      result[key].push(d);\n    }\n\n    return result;\n  };\n\n  TimelineHeaderRow.prototype.generateSlots = function (data, colspan, template, tempFn, cls, type) {\n    var _this = this;\n\n    var tdDatas = [];\n    var customHelper = {\n      getYear: function getYear(dt) {\n        return _this.parent.globalize.formatDate(dt, {\n          format: 'y'\n        });\n      },\n      getMonth: function getMonth(dt) {\n        return _this.parent.globalize.formatDate(dt, {\n          format: 'MMMM'\n        });\n      },\n      getWeekNumber: function getWeekNumber(dt) {\n        return _getWeekNumber(dt);\n      }\n    };\n    var keys = Object.keys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n      var dates = data[keys[i]];\n      var content = void 0;\n      var ele = createElement('div');\n      var htmlCol = void 0;\n\n      if (!tempFn) {\n        htmlCol = compile(template, customHelper)({\n          date: dates[0]\n        });\n      } else {\n        var args = {\n          date: dates[0],\n          type: type\n        };\n        htmlCol = tempFn(args);\n      }\n\n      append([].slice.call(htmlCol), ele);\n      content = ele.innerHTML;\n      tdDatas.push({\n        date: dates[0],\n        type: type,\n        className: [cls],\n        colSpan: dates.length * colspan,\n        text: content\n      });\n    }\n\n    return tdDatas;\n  };\n\n  TimelineHeaderRow.prototype.generateColumnLevels = function (dateSlots, hourSlots) {\n    var levels = [];\n    var rows = this.parent.activeViewOptions.headerRows;\n    var lastLevelColspan = 1;\n\n    if (rows[rows.length - 1].option === 'Hour' && hourSlots.length > 0) {\n      lastLevelColspan = hourSlots.length / dateSlots.length;\n    }\n\n    var tdDatas = [];\n    var templateFn;\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n\n      switch (row.option) {\n        case 'Year':\n          templateFn = row.template ? this.parent.templateParser(row.template) : undefined;\n          var yearTemplate = '<span class=\"e-header-year\">${getYear(date)}</span>';\n          var byYear = this.groupByYear(this.renderDates);\n          tdDatas = this.generateSlots(byYear, lastLevelColspan, yearTemplate, templateFn, 'e-header-year-cell', 'yearHeader');\n          levels.push(tdDatas);\n          break;\n\n        case 'Month':\n          templateFn = row.template ? this.parent.templateParser(row.template) : undefined;\n          var monthTemp = '<span class=\"e-header-month\">${getMonth(date)}</span>';\n          var byMonth = this.groupByMonth(this.renderDates);\n          tdDatas = this.generateSlots(byMonth, lastLevelColspan, monthTemp, templateFn, 'e-header-month-cell', 'monthHeader');\n          levels.push(tdDatas);\n          break;\n\n        case 'Week':\n          templateFn = row.template ? this.parent.templateParser(row.template) : undefined;\n          var weekTemplate = '<span class=\"e-header-week\">${getWeekNumber(date)}</span>';\n          var byWeek = this.groupByWeek(this.renderDates);\n          tdDatas = this.generateSlots(byWeek, lastLevelColspan, weekTemplate, templateFn, 'e-header-week-cell', 'weekHeader');\n          levels.push(tdDatas);\n          break;\n\n        case 'Date':\n          tdDatas = dateSlots;\n          tdDatas = tdDatas.map(function (value) {\n            value.colSpan = lastLevelColspan;\n            return value;\n          });\n          levels.push(tdDatas);\n          break;\n\n        case 'Hour':\n          if (hourSlots.length > 0) {\n            levels.push(hourSlots);\n          }\n\n          break;\n      }\n    }\n\n    return levels;\n  };\n\n  return TimelineHeaderRow;\n}();\n\nexport { TimelineHeaderRow };","map":null,"metadata":{},"sourceType":"module"}