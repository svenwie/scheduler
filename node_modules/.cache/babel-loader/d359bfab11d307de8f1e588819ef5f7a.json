{"ast":null,"code":"import { createElement, append, prepend, isNullOrUndefined, getValue, getDefaultDateObject, cldrData, addClass } from '@syncfusion/ej2-base';\nimport { getDateInMs, addDays, resetTime, WEEK_LENGTH, getWeekFirstDate, getOuterHeight, getScrollBarWidth } from '../base/util';\nimport * as cls from '../base/css-constant';\n/**\n * view base\n */\n\nvar ViewBase =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   */\n  function ViewBase(parent) {\n    var _this = this;\n\n    this.customHelper = {\n      getDayName: function getDayName(dt) {\n        return _this.parent.getDayNames('abbreviated')[dt.getDay()];\n      },\n      getDate: function getDate(dt) {\n        return _this.parent.globalize.formatDate(dt, {\n          format: 'd'\n        });\n      },\n      getTime: function getTime(dt) {\n        if (_this.parent.isAdaptive) {\n          return _this.parent.globalize.formatDate(dt, {\n            skeleton: 'h'\n          });\n        }\n\n        return _this.parent.getTimeString(dt);\n      },\n      getTimelineDate: function getTimelineDate(dt) {\n        return _this.parent.globalize.formatDate(dt, {\n          skeleton: 'MMMd'\n        }) + ', ' + _this.parent.getDayNames('wide')[dt.getDay()];\n      }\n    };\n    this.parent = parent;\n  }\n\n  ViewBase.prototype.isTimelineView = function () {\n    return this.parent.currentView.indexOf('Timeline') !== -1;\n  };\n\n  ViewBase.prototype.createEventTable = function (trCount) {\n    var eventTable = createElement('div', {\n      className: cls.EVENT_TABLE_CLASS\n    });\n\n    for (var row = 0; row < trCount; row++) {\n      eventTable.appendChild(createElement('div', {\n        className: cls.APPOINTMENT_CONTAINER_CLASS\n      }));\n    }\n\n    return eventTable;\n  };\n\n  ViewBase.prototype.collapseRows = function (wrap) {\n    if (!this.isTimelineView()) {\n      return;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.resourceBase.hideResourceRows(wrap.querySelector('tbody'));\n      this.parent.resourceBase.hideResourceRows(wrap.querySelector('.' + cls.EVENT_TABLE_CLASS));\n    }\n  };\n\n  ViewBase.prototype.createTableLayout = function (className) {\n    var clsName = className || '';\n    var table = createElement('table', {\n      className: cls.SCHEDULE_TABLE_CLASS + ' ' + clsName\n    });\n    var tbody = createElement('tbody');\n    table.appendChild(tbody);\n    return table;\n  };\n\n  ViewBase.prototype.createColGroup = function (table, lastRow) {\n    var length = lastRow.length;\n\n    if (lastRow[0].colSpan) {\n      length = lastRow.map(function (value) {\n        return value.colSpan;\n      }).reduce(function (prev, next) {\n        return prev + next;\n      });\n    }\n\n    var colGroupEle = createElement('colgroup');\n\n    for (var i = 0; i < length; i++) {\n      colGroupEle.appendChild(createElement('col'));\n    }\n\n    prepend([colGroupEle], table);\n  };\n\n  ViewBase.prototype.getScrollXIndent = function (content) {\n    return content.offsetHeight - content.clientHeight > 0 ? getScrollBarWidth() : 0;\n  };\n\n  ViewBase.prototype.scrollTopPanel = function (target) {\n    this.getDatesHeaderElement().firstChild.scrollLeft = target.scrollLeft;\n  };\n\n  ViewBase.prototype.scrollHeaderLabels = function (target) {\n    var _this = this;\n\n    var headerTable = this.element.querySelector('.e-date-header-wrap table');\n    var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll('colgroup col').length;\n\n    var applyLeft = function applyLeft(headerCells, isRtl) {\n      var currentCell;\n      var tdLeft = 0;\n      var colSpan = 0;\n      var hiddenLeft = isRtl ? target.scrollWidth - target.offsetWidth - target.scrollLeft : target.scrollLeft;\n\n      for (var i = 0; i < headerCells.length; i++) {\n        colSpan += parseInt(headerCells[i].getAttribute('colSpan'), 10);\n\n        if (colSpan > Math.floor(hiddenLeft / colWidth)) {\n          currentCell = headerCells[i];\n          break;\n        }\n\n        tdLeft += headerCells[i].offsetWidth;\n      }\n\n      currentCell.children[0].style[isRtl ? 'right' : 'left'] = hiddenLeft - tdLeft + 'px';\n    };\n\n    var className = ['.e-header-year-cell', '.e-header-month-cell', '.e-header-week-cell', '.e-header-cells'];\n\n    for (var i = 0; i < className.length; i++) {\n      var headerCells = [].slice.call(this.element.querySelectorAll(className[i]));\n\n      if (headerCells.length > 0) {\n        headerCells.forEach(function (element) {\n          element.children[0].style[_this.parent.enableRtl ? 'right' : 'left'] = '';\n        });\n        applyLeft(headerCells, this.parent.enableRtl);\n      }\n    }\n  };\n\n  ViewBase.prototype.addAttributes = function (td, element) {\n    if (td.text) {\n      element.innerHTML = td.text;\n    }\n\n    if (td.colSpan) {\n      element.setAttribute('colspan', td.colSpan.toString());\n    }\n\n    if (td.className) {\n      addClass([element], td.className);\n    }\n  };\n\n  ViewBase.prototype.getHeaderBarHeight = function () {\n    var headerBarHeight = 2;\n\n    if (this.parent.headerModule) {\n      headerBarHeight += getOuterHeight(this.parent.headerModule.getHeaderElement());\n    }\n\n    if (this.parent.uiStateValues.isGroupAdaptive) {\n      headerBarHeight += this.parent.element.querySelector('.' + cls.RESOURCE_HEADER_TOOLBAR).offsetHeight;\n    }\n\n    return headerBarHeight;\n  };\n\n  ViewBase.prototype.renderPanel = function (type) {\n    if (type === cls.PREVIOUS_PANEL_CLASS) {\n      prepend([this.element], this.parent.element.querySelector('.' + cls.TABLE_CONTAINER_CLASS));\n    } else {\n      this.parent.element.querySelector('.' + cls.TABLE_CONTAINER_CLASS).appendChild(this.element);\n    }\n  };\n\n  ViewBase.prototype.setPanel = function (panel) {\n    this.element = panel;\n  };\n\n  ViewBase.prototype.getPanel = function () {\n    return this.element;\n  };\n\n  ViewBase.prototype.getDatesHeaderElement = function () {\n    return this.element.querySelector('.' + cls.DATE_HEADER_CONTAINER_CLASS);\n  };\n\n  ViewBase.prototype.adjustEventWrapper = function () {// Here adjust the events wrapper width based in work cells\n  };\n\n  ViewBase.prototype.getDateSlots = function (renderDates, workDays) {\n    // Here getDateSlots only need in vertical and month views\n    return [];\n  };\n\n  ViewBase.prototype.generateColumnLevels = function () {\n    // Here generateColumnLevels only need in vertical and month views\n    return [];\n  };\n\n  ViewBase.prototype.highlightCurrentTime = function () {// Here showTimeIndicator functionalities\n  };\n\n  ViewBase.prototype.startDate = function () {\n    return this.renderDates[0];\n  };\n\n  ViewBase.prototype.endDate = function () {\n    return addDays(this.renderDates[this.renderDates.length - 1], 1);\n  };\n\n  ViewBase.prototype.getStartHour = function () {\n    var startHour = this.parent.globalize.parseDate(this.parent.activeViewOptions.startHour, {\n      skeleton: 'Hm'\n    });\n\n    if (isNullOrUndefined(startHour)) {\n      startHour = new Date(2000, 0, 0, 0);\n    }\n\n    return startHour;\n  };\n\n  ViewBase.prototype.getEndHour = function () {\n    var endHour = this.parent.globalize.parseDate(this.parent.activeViewOptions.endHour, {\n      skeleton: 'Hm'\n    });\n\n    if (isNullOrUndefined(endHour)) {\n      endHour = new Date(2000, 0, 0, 0);\n    }\n\n    return endHour;\n  };\n\n  ViewBase.prototype.isCurrentDate = function (date) {\n    return date.setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0);\n  };\n\n  ViewBase.prototype.isCurrentMonth = function (date) {\n    return date.getFullYear() === new Date().getFullYear() && date.getMonth() === new Date().getMonth();\n  };\n\n  ViewBase.prototype.isWorkDay = function (date, workDays) {\n    if (workDays === void 0) {\n      workDays = this.parent.activeViewOptions.workDays;\n    }\n\n    if (workDays.indexOf(date.getDay()) >= 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  ViewBase.prototype.isWorkHour = function (date, startHour, endHour, workDays) {\n    if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour)) {\n      return false;\n    }\n\n    startHour.setMilliseconds(0);\n    endHour.setMilliseconds(0);\n\n    if (getDateInMs(date) < getDateInMs(startHour) || getDateInMs(date) >= getDateInMs(endHour) || !this.isWorkDay(date, workDays)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  ViewBase.prototype.getRenderDates = function (workDays) {\n    var renderDates = []; // Due to same code for vertical and time line, week & work week views, if condition has used\n\n    if (this.parent.currentView === 'Week' || this.parent.currentView === 'TimelineWeek') {\n      var selectedDate = resetTime(this.parent.selectedDate);\n      var start = getWeekFirstDate(selectedDate, this.parent.firstDayOfWeek);\n\n      for (var i = 0, length_1 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {\n        if (this.parent.activeViewOptions.showWeekend) {\n          renderDates.push(start);\n        } else {\n          if (this.isWorkDay(start, workDays)) {\n            renderDates.push(start);\n          }\n        }\n\n        start = addDays(start, 1);\n      }\n    } else if (this.parent.currentView === 'WorkWeek' || this.parent.currentView === 'TimelineWorkWeek') {\n      var start = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.firstDayOfWeek);\n\n      for (var i = 0, length_2 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {\n        if (this.isWorkDay(start, workDays)) {\n          renderDates.push(start);\n        }\n\n        start = addDays(start, 1);\n      }\n    } else {\n      for (var i = 0, length_3 = this.parent.activeViewOptions.interval; i < length_3; i++) {\n        renderDates.push(addDays(resetTime(this.parent.selectedDate), i));\n      }\n    }\n\n    if (!workDays) {\n      this.renderDates = renderDates;\n    }\n\n    return renderDates;\n  };\n\n  ViewBase.prototype.getNextPreviousDate = function (type) {\n    if (this.parent.currentView === 'Day' || this.parent.currentView === 'TimelineDay') {\n      var daysCount = type === 'next' ? this.parent.activeViewOptions.interval : -this.parent.activeViewOptions.interval;\n\n      if (this.parent.activeViewOptions.showWeekend) {\n        return addDays(this.parent.selectedDate, daysCount);\n      } else {\n        var date = addDays(this.parent.selectedDate, daysCount);\n\n        while (!this.isWorkDay(date)) {\n          date = addDays(date, daysCount);\n        }\n\n        return date;\n      }\n    }\n\n    if (type === 'next') {\n      return addDays(this.parent.selectedDate, WEEK_LENGTH * this.parent.activeViewOptions.interval);\n    } else {\n      return addDays(this.parent.selectedDate, -WEEK_LENGTH * this.parent.activeViewOptions.interval);\n    }\n  };\n\n  ViewBase.prototype.getLabelText = function (view) {\n    return this.parent.localeObj.getConstant(view) + ' of ' + this.parent.globalize.formatDate(this.parent.selectedDate, {\n      skeleton: 'long'\n    });\n  };\n\n  ViewBase.prototype.getDateRangeText = function () {\n    if (this.parent.isAdaptive) {\n      return this.parent.globalize.formatDate(this.parent.selectedDate, {\n        format: 'MMMM y'\n      });\n    }\n\n    return this.formatDateRange(this.renderDates[0], this.renderDates[this.renderDates.length - 1]);\n  };\n\n  ViewBase.prototype.formatDateRange = function (startDate, endDate) {\n    var globalize = this.parent.globalize;\n\n    if (startDate === endDate) {\n      endDate = null;\n    }\n\n    if (!isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {\n      if (!endDate) {\n        return globalize.formatDate(startDate, {\n          format: this.parent.activeViewOptions.dateFormat\n        });\n      }\n\n      return globalize.formatDate(startDate, {\n        format: this.parent.activeViewOptions.dateFormat\n      }) + ' - ' + globalize.formatDate(endDate, {\n        format: this.parent.activeViewOptions.dateFormat\n      });\n    }\n\n    var formattedStr;\n    var longDateFormat;\n\n    if (this.parent.locale === 'en' || this.parent.locale === 'en-US') {\n      longDateFormat = getValue('dateFormats.long', getDefaultDateObject());\n    } else {\n      longDateFormat = getValue('main.' + '' + this.parent.locale + '.dates.calendars.gregorian.dateFormats.long', cldrData);\n    }\n\n    if (!endDate) {\n      return globalize.formatDate(startDate, {\n        format: longDateFormat\n      });\n    }\n\n    var dateFormat = longDateFormat.trim().toLocaleLowerCase();\n\n    if (dateFormat.substr(0, 1) === 'd') {\n      if (startDate.getFullYear() === endDate.getFullYear()) {\n        if (startDate.getMonth() === endDate.getMonth()) {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'dd'\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd MMMM yyyy'\n          });\n        } else {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'dd MMM'\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd MMM yyyy'\n          });\n        }\n      } else {\n        formattedStr = globalize.formatDate(startDate, {\n          format: 'dd MMM yyyy'\n        }) + ' - ' + globalize.formatDate(endDate, {\n          format: 'dd MMM yyyy'\n        });\n      }\n    } else if (dateFormat.substr(0, 1) === 'm') {\n      if (startDate.getFullYear() === endDate.getFullYear()) {\n        if (startDate.getMonth() === endDate.getMonth()) {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'MMMM dd'\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd, yyyy'\n          });\n        } else {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'MMM dd'\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'MMM dd, yyyy'\n          });\n        }\n      } else {\n        formattedStr = globalize.formatDate(startDate, {\n          format: 'MMM dd, yyyy'\n        }) + ' - ' + globalize.formatDate(endDate, {\n          format: 'MMM dd, yyyy'\n        });\n      }\n    } else {\n      formattedStr = globalize.formatDate(startDate, {\n        format: longDateFormat\n      }) + ' - ' + globalize.formatDate(endDate, {\n        format: longDateFormat\n      });\n    }\n\n    return formattedStr;\n  };\n\n  ViewBase.prototype.getMobileDateElement = function (date, className) {\n    var wrap = createElement('div', {\n      className: className,\n      innerHTML: '<div class=\"e-m-date\">' + this.parent.globalize.formatDate(date, {\n        format: 'd'\n      }) + '</div>' + '<div class=\"e-m-day\">' + this.parent.globalize.formatDate(date, {\n        format: 'E'\n      }) + '</div>'\n    });\n    return wrap;\n  };\n\n  ViewBase.prototype.setResourceHeaderContent = function (tdElement, tdData, className) {\n    if (className === void 0) {\n      className = 'e-text-ellipsis';\n    }\n\n    if (this.parent.activeViewOptions.resourceHeaderTemplate) {\n      var cntEle = void 0;\n      var data = {\n        resource: tdData.resource,\n        resourceData: tdData.resourceData\n      };\n      cntEle = this.parent.getResourceHeaderTemplate()(data);\n\n      if (cntEle && cntEle.length) {\n        append([].slice.call(cntEle), tdElement);\n      }\n    } else {\n      tdElement.appendChild(createElement('div', {\n        className: className,\n        innerHTML: tdData.resourceData[tdData.resource.textField]\n      }));\n    }\n  };\n\n  ViewBase.prototype.renderResourceMobileLayout = function () {\n    this.parent.resourceBase.renderResourceHeader();\n    this.parent.resourceBase.renderResourceTree();\n  };\n\n  return ViewBase;\n}();\n\nexport { ViewBase };","map":null,"metadata":{},"sourceType":"module"}