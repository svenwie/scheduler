{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { append, createElement, extend, EventHandler, prepend, Animation, formatUnit } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, setStyleAttribute, remove, removeClass, addClass } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Predicate } from '@syncfusion/ej2-data';\nimport { EventBase } from './event-base';\nimport * as util from '../base/util';\nimport * as events from '../base/constant';\nimport * as cls from '../base/css-constant';\n/**\n * Vertical view appointment rendering\n */\n\nvar VerticalEvent =\n/** @class */\nfunction (_super) {\n  __extends(VerticalEvent, _super);\n  /**\n   * Constructor for vertical view\n   */\n\n\n  function VerticalEvent(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.dateRender = [];\n    _this.renderedEvents = [];\n    _this.renderedAllDayEvents = [];\n    _this.overlapEvents = [];\n    _this.moreEvents = [];\n    _this.overlapList = [];\n    _this.allDayEvents = [];\n    _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;\n    _this.interval = _this.parent.activeViewOptions.timeScale.interval;\n    _this.allDayLevel = 0;\n    _this.startHour = _this.parent.activeView.getStartHour();\n    _this.endHour = _this.parent.activeView.getEndHour();\n    _this.element = _this.parent.activeView.getPanel();\n    _this.fields = _this.parent.eventFields;\n    _this.animation = new Animation({\n      progress: _this.animationUiUpdate.bind(_this)\n    });\n\n    _this.addEventListener();\n\n    return _this;\n  }\n\n  VerticalEvent.prototype.renderAppointments = function () {\n    var _this = this;\n\n    var wrapperElements = [].slice.call(this.parent.element.querySelectorAll('.' + cls.APPOINTMENT_CLASS + ',.' + cls.ROW_COUNT_WRAPPER_CLASS));\n    wrapperElements.forEach(function (element) {\n      return remove(element);\n    });\n    this.allDayElement = [].slice.call(this.element.querySelectorAll('.' + cls.ALLDAY_CELLS_CLASS));\n    this.setAllDayRowHeight(0);\n\n    if (this.parent.eventsProcessed.length === 0) {\n      return;\n    }\n\n    var expandCollapse = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_SECTION_CLASS);\n    EventHandler.remove(expandCollapse, 'click', this.rowExpandCollapse);\n    EventHandler.add(expandCollapse, 'click', this.rowExpandCollapse, this);\n    this.renderedEvents = [];\n    this.renderedAllDayEvents = [];\n    this.resources = this.parent.activeViewOptions.group.resources.length > 0 ? this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.lastResourceLevel : [];\n    this.cellHeight = this.element.querySelector('.' + cls.WORK_CELLS_CLASS).offsetHeight;\n    this.dateRender[0] = this.parent.activeView.renderDates;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.resources.forEach(function (resource, index) {\n        return _this.dateRender[index] = resource.renderDates;\n      });\n    }\n\n    this.renderEvents('normalEvents');\n\n    if (this.allDayEvents.length > 0) {\n      this.allDayEvents = this.allDayEvents.filter(function (item, index, arr) {\n        return index === arr.map(function (item) {\n          return item.Guid;\n        }).indexOf(item.Guid);\n      });\n      removeClass(this.allDayElement, cls.ALLDAY_ROW_ANIMATE_CLASS);\n      this.slots.push(this.parent.activeView.renderDates.map(function (date) {\n        return +date;\n      }));\n      this.renderEvents('allDayEvents');\n    }\n\n    this.parent.notify(events.contentReady, {});\n    addClass(this.allDayElement, cls.ALLDAY_ROW_ANIMATE_CLASS);\n  };\n\n  VerticalEvent.prototype.renderEvents = function (eventType) {\n    removeClass(this.allDayElement, cls.ALLDAY_ROW_ANIMATE_CLASS);\n    var eventCollection = eventType === 'allDayEvents' ? this.sortByDateTime(this.allDayEvents) : undefined;\n    var resources = this.getResourceList();\n    var dateCount = 0;\n\n    for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n      var resource = resources_1[_i];\n      var renderDates = this.dateRender[resource];\n\n      for (var day = 0, length_1 = renderDates.length; day < length_1; day++) {\n        this.renderedEvents = [];\n        var startDate = new Date(renderDates[day].getTime());\n        var endDate = util.addDays(renderDates[day], 1);\n        var filterEvents = this.filterEvents(startDate, endDate, eventCollection, this.resources[resource]);\n\n        for (var _a = 0, filterEvents_1 = filterEvents; _a < filterEvents_1.length; _a++) {\n          var event_1 = filterEvents_1[_a];\n\n          if (this.parent.resourceBase) {\n            this.setValues(event_1, resource);\n          }\n\n          if (eventType === 'allDayEvents') {\n            this.renderAllDayEvents(event_1, day, resource, dateCount);\n          } else {\n            if (this.isAllDayAppointment(event_1)) {\n              this.allDayEvents.push(extend({}, event_1, null, true));\n            } else {\n              this.renderNormalEvents(event_1, day, resource, dateCount);\n            }\n          }\n\n          this.cssClass = null;\n          this.groupOrder = null;\n        }\n\n        dateCount += 1;\n      }\n    }\n  };\n\n  VerticalEvent.prototype.setValues = function (event, resourceIndex) {\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.cssClass = this.resources[resourceIndex].cssClass;\n      this.groupOrder = this.resources[resourceIndex].groupOrder;\n    } else {\n      this.cssClass = this.parent.resourceBase.getCssClass(event);\n    }\n  };\n\n  VerticalEvent.prototype.getResourceList = function () {\n    var resources = Array.apply(null, {\n      length: this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive ? this.resources.length : 1\n    }).map(function (value, index) {\n      return index;\n    });\n    return resources;\n  };\n\n  VerticalEvent.prototype.createAppointmentElement = function (record, isAllDay, data, resource) {\n    var fieldMapping = this.parent.eventFields;\n    var recordSubject = record[fieldMapping.subject] || this.parent.eventSettings.fields.subject.default;\n    var appointmentWrapper = createElement('div', {\n      className: cls.APPOINTMENT_CLASS,\n      attrs: {\n        'data-id': 'Appointment_' + record[fieldMapping.id],\n        'data-guid': record.Guid,\n        'role': 'button',\n        'tabindex': '0',\n        'aria-readonly': 'false',\n        'aria-selected': 'false',\n        'aria-grabbed': 'true',\n        'aria-label': recordSubject\n      }\n    });\n    var appointmentDetails = createElement('div', {\n      className: cls.APPOINTMENT_DETAILS\n    });\n    appointmentWrapper.appendChild(appointmentDetails);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var resourceIndex = this.parent.isAdaptive ? this.parent.uiStateValues.groupIndex : resource;\n      appointmentWrapper.setAttribute('data-group-index', resourceIndex.toString());\n    }\n\n    var templateElement;\n    var eventData = data;\n\n    if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {\n      templateElement = this.parent.getAppointmentTemplate()(record);\n    } else {\n      var appointmentSubject = createElement('div', {\n        className: cls.SUBJECT_CLASS,\n        innerHTML: recordSubject\n      });\n\n      if (isAllDay) {\n        if (record[fieldMapping.isAllDay]) {\n          templateElement = [appointmentSubject];\n        } else {\n          templateElement = [];\n          var appointmentStartTime = createElement('div', {\n            className: cls.APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + cls.DISABLE_CLASS : ''),\n            innerHTML: this.parent.getTimeString(record[fieldMapping.startTime])\n          });\n          var appointmentEndTime = createElement('div', {\n            className: cls.APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + cls.DISABLE_CLASS : ''),\n            innerHTML: this.parent.getTimeString(record[fieldMapping.endTime])\n          });\n          addClass([appointmentSubject], 'e-text-center');\n\n          if (!eventData.isLeft) {\n            templateElement.push(appointmentStartTime);\n          }\n\n          templateElement.push(appointmentSubject);\n\n          if (!eventData.isRight) {\n            templateElement.push(appointmentEndTime);\n          }\n        }\n      } else {\n        var timeStr = this.parent.getTimeString(record[fieldMapping.startTime]) + ' - ' + this.parent.getTimeString(record[fieldMapping.endTime]);\n        var appointmentTime = createElement('div', {\n          className: cls.APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + cls.DISABLE_CLASS : ''),\n          innerHTML: timeStr\n        });\n        var appointmentLocation = createElement('div', {\n          className: cls.LOCATION_CLASS,\n          innerHTML: record[fieldMapping.location] || this.parent.eventSettings.fields.location.default || ''\n        });\n        templateElement = [appointmentSubject, appointmentTime, appointmentLocation];\n      }\n    }\n\n    append(templateElement, appointmentDetails);\n\n    if (!this.parent.isAdaptive && !isNullOrUndefined(record[fieldMapping.recurrenceRule])) {\n      var iconClass = record[fieldMapping.id] === record[fieldMapping.recurrenceID] ? cls.EVENT_RECURRENCE_ICON_CLASS : cls.EVENT_RECURRENCE_EDIT_ICON_CLASS;\n      var recurrenceIcon = createElement('div', {\n        className: cls.ICON + ' ' + iconClass\n      });\n      isAllDay ? appointmentDetails.appendChild(recurrenceIcon) : appointmentWrapper.appendChild(recurrenceIcon);\n    }\n\n    this.renderSpannedIcon(isAllDay ? appointmentDetails : appointmentWrapper, eventData);\n\n    if (!isNullOrUndefined(this.cssClass)) {\n      addClass([appointmentWrapper], this.cssClass);\n    }\n\n    this.applyResourceColor(appointmentWrapper, record, 'backgroundColor', this.groupOrder);\n    this.renderResizeHandler(appointmentWrapper, eventData);\n    return appointmentWrapper;\n  };\n\n  VerticalEvent.prototype.createMoreIndicator = function (allDayRow, count, currentDay) {\n    var index = currentDay + count;\n    var countWrapper = allDayRow[index];\n\n    if (countWrapper.childElementCount <= 0) {\n      var innerCountWrap = createElement('div', {\n        className: cls.ROW_COUNT_WRAPPER_CLASS,\n        id: cls.ROW_COUNT_WRAPPER_CLASS + '-' + index.toString()\n      });\n      var moreIndicatorElement = createElement('div', {\n        className: cls.MORE_INDICATOR_CLASS,\n        attrs: {\n          'tabindex': '0',\n          'data-index': index.toString(),\n          'data-count': '1'\n        },\n        innerHTML: '+1&nbsp;' + (this.parent.isAdaptive ? '' : this.parent.localeObj.getConstant('more'))\n      });\n      innerCountWrap.appendChild(moreIndicatorElement);\n      countWrapper.appendChild(innerCountWrap);\n      EventHandler.add(moreIndicatorElement, 'click', this.rowExpandCollapse, this);\n    } else {\n      var countCell = countWrapper.querySelector('.' + cls.MORE_INDICATOR_CLASS);\n      var moreCount = parseInt(countCell.getAttribute('data-count'), 10) + 1;\n      countCell.setAttribute('data-count', moreCount.toString());\n      countCell.innerHTML = countCell.innerHTML.replace(/[0-9]/g, moreCount.toString());\n    }\n  };\n\n  VerticalEvent.prototype.renderSpannedIcon = function (element, spanEvent) {\n    var iconElement = createElement('div', {\n      className: cls.EVENT_INDICATOR_CLASS + ' ' + cls.ICON\n    });\n\n    if (spanEvent.isLeft) {\n      var iconLeft = iconElement.cloneNode();\n      addClass([iconLeft], cls.EVENT_ICON_LEFT_CLASS);\n      prepend([iconLeft], element);\n    }\n\n    if (spanEvent.isRight) {\n      var iconRight = iconElement.cloneNode();\n      addClass([iconRight], cls.EVENT_ICON_RIGHT_CLASS);\n      append([iconRight], element);\n    }\n\n    if (spanEvent.isTop) {\n      var iconTop = iconElement.cloneNode();\n      addClass([iconTop], cls.EVENT_ICON_UP_CLASS);\n      prepend([iconTop], element);\n    }\n\n    if (spanEvent.isBottom) {\n      var iconBottom = iconElement.cloneNode();\n      addClass([iconBottom], cls.EVENT_ICON_DOWN_CLASS);\n      append([iconBottom], element);\n    }\n  };\n\n  VerticalEvent.prototype.isSpannedEvent = function (record, day, resource) {\n    var currentDate = util.resetTime(this.dateRender[resource][day]);\n    var fieldMapping = this.parent.eventFields;\n    var startEndHours = util.getStartEndHours(currentDate, this.startHour, this.endHour);\n    var event = extend({}, record, null, true);\n    event.isSpanned = {\n      isBottom: false,\n      isTop: false\n    };\n\n    if (record[fieldMapping.startTime].getTime() < startEndHours.startHour.getTime()) {\n      event[fieldMapping.startTime] = startEndHours.startHour;\n      event.isSpanned.isTop = true;\n    }\n\n    if (record[fieldMapping.endTime].getTime() > startEndHours.endHour.getTime()) {\n      event[fieldMapping.endTime] = startEndHours.endHour;\n      event.isSpanned.isBottom = true;\n    }\n\n    return event;\n  };\n\n  VerticalEvent.prototype.renderAllDayEvents = function (eventObj, dayIndex, resource, dayCount) {\n    var _this = this;\n\n    var currentDates = this.dateRender[resource];\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      this.slots[0] = [this.dateRender[resource][dayIndex].getTime()];\n      currentDates = [this.dateRender[resource][dayIndex]];\n    }\n\n    var record = this.splitEvent(eventObj, currentDates)[0];\n    var allDayRowCell = this.element.querySelector('.' + cls.ALLDAY_CELLS_CLASS + ':first-child');\n    var cellTop = allDayRowCell.offsetTop;\n    var eStart = new Date(record[this.parent.eventFields.startTime].getTime());\n    var eEnd = new Date(record[this.parent.eventFields.endTime].getTime());\n    var appWidth = 0;\n    var appLeft = '0%';\n    var topValue = 1;\n    var appLevel = 0;\n    var isDateRange = currentDates[0].getTime() <= eStart.getTime() && util.addDays(currentDates.slice(-1)[0], 1).getTime() >= eStart.getTime();\n\n    if (eStart <= eEnd && isDateRange) {\n      var isAlreadyRendered = [];\n\n      if (this.renderedAllDayEvents[resource]) {\n        isAlreadyRendered = this.renderedAllDayEvents[resource].filter(function (event) {\n          return event.Guid === eventObj.Guid;\n        });\n\n        if (this.parent.activeViewOptions.group.byDate) {\n          isAlreadyRendered = isAlreadyRendered.filter(function (event) {\n            return event[_this.parent.eventFields.startTime] >= currentDates[dayIndex] && event[_this.parent.eventFields.endTime] <= util.addDays(new Date(+currentDates[dayIndex]), 1);\n          });\n        }\n      }\n\n      if (isAlreadyRendered.length === 0) {\n        var allDayDifference = record.data.count;\n        var allDayIndex = this.getOverlapIndex(record, dayIndex, true, resource);\n        record.Index = allDayIndex;\n        this.allDayLevel = this.allDayLevel < allDayIndex ? allDayIndex : this.allDayLevel;\n        var widthAdjustment = record.data.isRight ? 0 : this.parent.currentView === 'Day' ? 4 : 7;\n\n        if (allDayDifference >= 0) {\n          appWidth = allDayDifference * 100 - widthAdjustment;\n        }\n\n        if (isNullOrUndefined(this.renderedAllDayEvents[resource])) {\n          this.renderedAllDayEvents[resource] = [];\n        }\n\n        this.renderedAllDayEvents[resource].push(extend({}, record, null, true));\n        var allDayRow = [].slice.call(this.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).children);\n        var wIndex = this.parent.activeViewOptions.group.byDate ? this.resources.length * dayIndex + resource : dayCount;\n        var eventWrapper = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS + ':nth-child(' + (wIndex + 1) + ')');\n        var appointmentElement = this.createAppointmentElement(eventObj, true, record.data, resource);\n        addClass([appointmentElement], cls.ALLDAY_APPOINTMENT_CLASS);\n        var args = {\n          data: eventObj,\n          element: appointmentElement,\n          cancel: false\n        };\n        this.parent.trigger(events.eventRendered, args);\n\n        if (args.cancel) {\n          return;\n        }\n\n        eventWrapper.appendChild(appointmentElement);\n        var appHeight = appointmentElement.offsetHeight;\n        topValue += (allDayIndex === 0 ? cellTop : cellTop + allDayIndex * appHeight) + 1;\n        setStyleAttribute(appointmentElement, {\n          'width': appWidth + '%',\n          'top': topValue + 'px'\n        });\n\n        if (allDayIndex > 1) {\n          this.moreEvents.push(appointmentElement);\n\n          for (var count = 0, length_2 = allDayDifference; count < length_2; count++) {\n            this.createMoreIndicator(allDayRow, count, wIndex);\n          }\n        }\n\n        allDayRowCell.setAttribute('data-count', this.allDayLevel.toString());\n        var allDayRowHeight = (!this.parent.uiStateValues.expand && this.allDayLevel > 2 ? 3 * appHeight : (this.allDayLevel + 1) * appHeight) + 4;\n        this.setAllDayRowHeight(allDayRowHeight);\n        this.addOrRemoveClass();\n        this.wireAppointmentEvents(appointmentElement, true);\n      }\n    }\n  };\n\n  VerticalEvent.prototype.renderNormalEvents = function (eventObj, dayIndex, resource, dayCount) {\n    var record = this.isSpannedEvent(eventObj, dayIndex, resource);\n    var eStart = record[this.fields.startTime];\n    var eEnd = record[this.fields.endTime];\n    var appWidth = '0%';\n    var appLeft = '0%';\n    var topValue = 0;\n    var currentDate = util.resetTime(new Date(this.dateRender[resource][dayIndex].getTime()));\n    var schedule = util.getStartEndHours(currentDate, this.startHour, this.endHour);\n    var isHourRange = eEnd.getTime() > schedule.startHour.getTime() && eStart.getTime() < schedule.endHour.getTime();\n    var isSameRange = schedule.startHour.getTime() <= eStart.getTime() && eventObj[this.fields.startTime].getTime() >= schedule.startHour.getTime() && eventObj[this.fields.endTime].getTime() < schedule.endHour.getTime() && eStart.getTime() === eEnd.getTime();\n\n    if (eStart <= eEnd && (isHourRange || isSameRange)) {\n      var appHeight = (eEnd.getTime() - eStart.getTime()) / (60 * 1000) * (this.cellHeight * this.slotCount) / this.interval;\n      appHeight = appHeight < this.cellHeight ? this.cellHeight : appHeight;\n\n      if (eStart.getTime() > schedule.startHour.getTime()) {\n        topValue = this.getTopValue(eStart, dayIndex, resource);\n      }\n\n      var appIndex = this.getOverlapIndex(record, dayIndex, false, resource);\n      record.Index = appIndex;\n      this.overlapList.push(record);\n\n      if (this.overlapList.length > 1) {\n        if (isNullOrUndefined(this.overlapEvents[appIndex])) {\n          this.overlapEvents[appIndex] = [];\n        }\n\n        this.overlapEvents[appIndex].push(record);\n      } else {\n        this.overlapEvents = [];\n        this.overlapEvents.push([record]);\n      }\n\n      var width = this.parent.currentView === 'Day' ? 97 : 94;\n      appWidth = (width - this.overlapEvents.length) / this.overlapEvents.length + '%';\n      var argsData = {\n        index: appIndex,\n        left: appLeft,\n        width: appWidth,\n        day: dayIndex,\n        dayIndex: dayCount,\n        record: record,\n        resource: resource\n      };\n      var tempData = this.adjustOverlapElements(argsData);\n      appWidth = tempData.appWidth;\n\n      if (isNullOrUndefined(this.renderedEvents[resource])) {\n        this.renderedEvents[resource] = [];\n      }\n\n      this.renderedEvents[resource].push(extend({}, record, null, true));\n      var appointmentWrap = [].slice.call(this.element.querySelectorAll('.' + cls.APPOINTMENT_WRAPPER_CLASS));\n      var appointmentElement = this.createAppointmentElement(eventObj, false, record.isSpanned, resource);\n      setStyleAttribute(appointmentElement, {\n        'width': tempData.appWidth,\n        'height': appHeight + 'px',\n        'top': topValue + 'px'\n      });\n      var iconHeight = appointmentElement.querySelectorAll('.' + cls.EVENT_INDICATOR_CLASS).length * 15;\n      var maxHeight = appHeight - 40 - iconHeight;\n      var subjectElement = appointmentElement.querySelector('.' + cls.SUBJECT_CLASS);\n\n      if (!this.parent.isAdaptive && subjectElement) {\n        subjectElement.style.maxHeight = formatUnit(maxHeight);\n      }\n\n      if (this.parent.enableRtl) {\n        setStyleAttribute(appointmentElement, {\n          'right': tempData.appLeft\n        });\n      } else {\n        setStyleAttribute(appointmentElement, {\n          'left': tempData.appLeft\n        });\n      }\n\n      var index = this.parent.activeViewOptions.group.byDate ? this.resources.length * dayIndex + resource : dayCount;\n      var args = {\n        data: eventObj,\n        element: appointmentElement,\n        cancel: false\n      };\n      this.parent.trigger(events.eventRendered, args);\n\n      if (args.cancel) {\n        return;\n      }\n\n      appointmentWrap[index].appendChild(appointmentElement);\n      this.wireAppointmentEvents(appointmentElement, false);\n    }\n  };\n\n  VerticalEvent.prototype.getTopValue = function (date, day, resource) {\n    var startEndHours = util.getStartEndHours(util.resetTime(this.dateRender[resource][day]), this.startHour, this.endHour);\n    var startHour = startEndHours.startHour;\n    var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());\n    return diffInMinutes * this.cellHeight * this.slotCount / this.interval;\n  };\n\n  VerticalEvent.prototype.getOverlapIndex = function (record, day, isAllDay, resource) {\n    var _this = this;\n\n    var fieldMapping = this.parent.eventFields;\n    var predicate;\n    var eventsList = [];\n    var appIndex = -1;\n    this.overlapEvents = [];\n\n    if (isAllDay) {\n      if (!isNullOrUndefined(this.renderedAllDayEvents[resource])) {\n        var date_1 = util.resetTime(new Date(this.dateRender[resource][day].getTime()));\n        eventsList = this.renderedAllDayEvents[resource].filter(function (app) {\n          return util.resetTime(app[fieldMapping.startTime]).getTime() <= date_1.getTime() && util.resetTime(app[fieldMapping.endTime]).getTime() >= date_1.getTime();\n        });\n\n        if (this.parent.activeViewOptions.group.resources.length > 0) {\n          eventsList = this.filterEventsByResource(this.resources[resource], eventsList);\n        }\n      }\n    } else {\n      var appointmentList_1 = !isNullOrUndefined(this.renderedEvents[resource]) ? this.renderedEvents[resource] : [];\n      var appointment_1 = [];\n      predicate = new Predicate(fieldMapping.endTime, 'greaterthan', record[fieldMapping.startTime]).and(new Predicate(fieldMapping.startTime, 'lessthan', record[fieldMapping.endTime]));\n      this.overlapList = new DataManager({\n        json: appointmentList_1\n      }).executeLocal(new Query().where(predicate));\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        this.overlapList = this.filterEventsByResource(this.resources[resource], this.overlapList);\n      }\n\n      this.overlapList.forEach(function (obj) {\n        predicate = new Predicate(fieldMapping.endTime, 'greaterthanorequal', obj[fieldMapping.startTime]).and(new Predicate(fieldMapping.startTime, 'lessthanorequal', obj[fieldMapping.endTime]));\n        var filterList = new DataManager({\n          json: appointmentList_1\n        }).executeLocal(new Query().where(predicate));\n\n        if (_this.parent.activeViewOptions.group.resources.length > 0) {\n          filterList = _this.filterEventsByResource(_this.resources[resource], filterList);\n        }\n\n        var collection = _this.overlapList.filter(function (val) {\n          return filterList.indexOf(val) === -1;\n        });\n\n        return appointment_1.concat(collection);\n      });\n      this.overlapList = this.overlapList.concat(appointment_1);\n      eventsList = this.overlapList;\n\n      for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {\n        var event_2 = eventsList_1[_i];\n        var record_1 = event_2;\n        var index = record_1.Index;\n        isNullOrUndefined(this.overlapEvents[index]) ? this.overlapEvents[index] = [event_2] : this.overlapEvents[index].push(event_2);\n      }\n    }\n\n    if (eventsList.length > 0) {\n      var appLevel = eventsList.map(function (obj) {\n        return obj.Index;\n      });\n      appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;\n    }\n\n    return appIndex === -1 ? 0 : appIndex;\n  };\n\n  VerticalEvent.prototype.adjustOverlapElements = function (args) {\n    var data = {\n      appWidth: args.width,\n      appLeft: args.left\n    };\n\n    for (var i = 0, length1 = this.overlapEvents.length; i < length1; i++) {\n      if (!isNullOrUndefined(this.overlapEvents[i])) {\n        for (var j = 0, length2 = this.overlapEvents[i].length; j < length2; j++) {\n          var dayCount = this.parent.activeViewOptions.group.byDate ? this.resources.length * args.day + args.resource : args.dayIndex;\n          var element = this.element.querySelector('#e-appointment-wrapper-' + dayCount);\n\n          if (element.childElementCount > 0) {\n            var eleGuid = this.overlapEvents[i][j].Guid;\n\n            if (element.querySelectorAll('div[data-guid=\"' + eleGuid + '\"]').length > 0 && eleGuid !== args.record.Guid) {\n              var apps = element.querySelector('div[data-guid=\"' + eleGuid + '\"]');\n\n              if (parseFloat(args.width) <= parseFloat(apps.style.width)) {\n                this.parent.enableRtl ? apps.style.right = (parseFloat(args.width) + 1) * i + '%' : apps.style.left = (parseFloat(args.width) + 1) * i + '%';\n                apps.style.width = parseFloat(args.width) + '%';\n                data.appWidth = apps.style.width;\n              }\n            } else {\n              var appWidth = args.width;\n\n              if (isNullOrUndefined(this.overlapEvents[i - 1])) {\n                var width = this.parent.currentView === 'Day' ? 97 : 94;\n                appWidth = (width - this.overlapEvents.length) / this.overlapEvents.length + '%';\n              }\n\n              data.appWidth = appWidth;\n              data.appLeft = (parseInt(appWidth, 0) + 1) * args.index + '%';\n            }\n          }\n        }\n      }\n    }\n\n    return data;\n  };\n\n  VerticalEvent.prototype.setAllDayRowHeight = function (height) {\n    for (var _i = 0, _a = this.allDayElement; _i < _a.length; _i++) {\n      var element = _a[_i];\n      element.style.height = height / 12 + 'em';\n    }\n\n    this.animation.animate(this.allDayElement[0]);\n  };\n\n  VerticalEvent.prototype.addOrRemoveClass = function () {\n    var _this = this;\n\n    this.moreEvents.filter(function (element) {\n      if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {\n        addClass([element], cls.EVENT_COUNT_CLASS);\n        element.setAttribute('tabindex', '-1');\n      } else {\n        removeClass([element], cls.EVENT_COUNT_CLASS);\n        element.setAttribute('tabindex', '0');\n      }\n    });\n    var moreEventCount = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_SECTION_CLASS);\n\n    if (this.parent.uiStateValues.expand) {\n      removeClass([moreEventCount], cls.APPOINTMENT_ROW_EXPAND_CLASS);\n      addClass([moreEventCount], cls.APPOINTMENT_ROW_COLLAPSE_CLASS);\n    } else {\n      removeClass([moreEventCount], cls.APPOINTMENT_ROW_COLLAPSE_CLASS);\n      addClass([moreEventCount], cls.APPOINTMENT_ROW_EXPAND_CLASS);\n    }\n\n    this.allDayLevel > 2 ? removeClass([moreEventCount], cls.DISABLE_CLASS) : addClass([moreEventCount], cls.DISABLE_CLASS);\n    var countCell = [].slice.call(this.element.querySelectorAll('.' + cls.ROW_COUNT_WRAPPER_CLASS));\n    countCell.filter(function (element) {\n      !_this.parent.uiStateValues.expand && _this.allDayLevel > 2 ? removeClass([element], cls.DISABLE_CLASS) : addClass([element], cls.DISABLE_CLASS);\n    });\n  };\n\n  VerticalEvent.prototype.getEventHeight = function () {\n    var eventElement = createElement('div', {\n      className: cls.APPOINTMENT_CLASS,\n      styles: 'visibility:hidden'\n    });\n    var eventWrapper = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS + ':first-child');\n    eventWrapper.appendChild(eventElement);\n    var height = eventElement.offsetHeight;\n    eventElement.remove();\n    return height;\n  };\n\n  VerticalEvent.prototype.rowExpandCollapse = function () {\n    var target = this.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_SECTION_CLASS);\n    this.parent.uiStateValues.expand = target.classList.contains(cls.APPOINTMENT_ROW_EXPAND_CLASS);\n    var rowHeight;\n\n    if (this.parent.uiStateValues.expand) {\n      target.setAttribute('title', 'Collapse-all-day-section');\n      target.setAttribute('aria-label', 'Collapse section');\n      rowHeight = (this.allDayLevel + 1) * this.getEventHeight() + 4;\n    } else {\n      target.setAttribute('title', 'Expand-all-day-section');\n      target.setAttribute('aria-label', 'Expand section');\n      rowHeight = 3 * this.getEventHeight() + 4;\n    }\n\n    this.setAllDayRowHeight(rowHeight);\n    this.addOrRemoveClass();\n    this.animation.animate(target);\n  };\n\n  VerticalEvent.prototype.animationUiUpdate = function () {\n    this.parent.notify(events.contentReady, {});\n  };\n\n  return VerticalEvent;\n}(EventBase);\n\nexport { VerticalEvent };","map":null,"metadata":{},"sourceType":"module"}