{"ast":null,"code":"import { createElement, remove } from '@syncfusion/ej2-base';\nimport { FormValidator } from '@syncfusion/ej2-inputs';\nimport * as cls from '../base/css-constant';\n/**\n * Appointment window field validation\n */\n\nvar FieldValidator =\n/** @class */\nfunction () {\n  function FieldValidator() {}\n\n  FieldValidator.prototype.renderFormValidator = function (form, rules, element) {\n    var _this = this;\n\n    this.element = element;\n    this.formObj = new FormValidator(form, {\n      customPlacement: function customPlacement(inputElement, error) {\n        _this.errorPlacement(inputElement, error);\n      },\n      rules: rules,\n      validationComplete: function validationComplete(args) {\n        _this.validationComplete(args);\n      }\n    });\n  };\n\n  FieldValidator.prototype.validationComplete = function (args) {\n    var elem = this.element.querySelector('#' + args.inputName + '_Error');\n\n    if (elem) {\n      elem.style.display = args.status === 'failure' ? '' : 'none';\n    }\n  };\n\n  FieldValidator.prototype.errorPlacement = function (inputElement, error) {\n    var id = error.getAttribute('for');\n    var elem = this.element.querySelector('#' + id + '_Error');\n\n    if (!elem) {\n      this.createTooltip(inputElement, error, id, '');\n    }\n  };\n\n  FieldValidator.prototype.createTooltip = function (element, error, name, display) {\n    var dlgContent;\n    var client;\n    var inputClient = element.getBoundingClientRect();\n\n    if (this.element.classList.contains(cls.POPUP_WRAPPER_CLASS)) {\n      dlgContent = this.element;\n      client = this.element.getBoundingClientRect();\n    } else {\n      dlgContent = this.element.querySelector('.e-schedule-dialog .e-dlg-content');\n      client = dlgContent.getBoundingClientRect();\n    }\n\n    var div = createElement('div', {\n      className: 'e-tooltip-wrap e-popup ' + cls.ERROR_VALIDATION_CLASS,\n      id: name + '_Error',\n      styles: 'display:' + display + ';top:' + (inputClient.bottom - client.top + dlgContent.scrollTop + 9) + 'px;left:' + (inputClient.left - client.left + dlgContent.scrollLeft + inputClient.width / 2) + 'px;'\n    });\n    var content = createElement('div', {\n      className: 'e-tip-content'\n    });\n    content.appendChild(error);\n    var arrow = createElement('div', {\n      className: 'e-arrow-tip e-tip-top'\n    });\n    arrow.appendChild(createElement('div', {\n      className: 'e-arrow-tip-outer e-tip-top'\n    }));\n    arrow.appendChild(createElement('div', {\n      className: 'e-arrow-tip-inner e-tip-top'\n    }));\n    div.appendChild(content);\n    div.appendChild(arrow);\n    dlgContent.appendChild(div);\n    div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + 'px';\n  };\n\n  FieldValidator.prototype.destroyToolTip = function () {\n    if (this.element) {\n      var elements = [].slice.call(this.element.querySelectorAll('.' + cls.ERROR_VALIDATION_CLASS));\n\n      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n        var elem = elements_1[_i];\n        remove(elem);\n      }\n    }\n\n    if (this.formObj) {\n      this.formObj.reset();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  FieldValidator.prototype.destroy = function () {\n    if (this.formObj && !this.formObj.isDestroyed) {\n      this.formObj.destroy();\n    }\n  };\n\n  return FieldValidator;\n}();\n\nexport { FieldValidator };","map":null,"metadata":{},"sourceType":"module"}