{"ast":null,"code":"import { isNullOrUndefined, createElement, remove, closest, addClass, removeClass, extend } from '@syncfusion/ej2-base';\nimport { Toolbar } from '@syncfusion/ej2-navigations';\nimport { Calendar } from '@syncfusion/ej2-calendars';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\nimport * as cls from '../base/css-constant';\n/**\n * Header module\n */\n\nvar HeaderRenderer =\n/** @class */\nfunction () {\n  /**\n   * Constructor for render module\n   */\n  function HeaderRenderer(parent) {\n    this.parent = parent;\n    this.l10n = this.parent.localeObj;\n    this.renderHeader();\n    this.addEventListener();\n  }\n\n  HeaderRenderer.prototype.addEventListener = function () {\n    this.parent.on(events.documentClick, this.closeHeaderPopup, this);\n  };\n\n  HeaderRenderer.prototype.removeEventListener = function () {\n    this.parent.off(events.documentClick, this.closeHeaderPopup);\n  };\n\n  HeaderRenderer.prototype.closeHeaderPopup = function (e) {\n    var closestEle = closest(e.event.target, '.e-date-range,.e-header-popup,.e-day,.e-selected');\n\n    if (!isNullOrUndefined(closestEle)) {\n      return;\n    }\n\n    this.hideHeaderPopup();\n  };\n  /** @hidden */\n\n\n  HeaderRenderer.prototype.hideHeaderPopup = function () {\n    if (this.headerPopup) {\n      this.headerPopup.hide();\n    }\n  };\n\n  HeaderRenderer.prototype.renderHeader = function () {\n    this.element = createElement('div', {\n      className: cls.TOOLBAR_CONTAINER\n    });\n    var toolbarEle = createElement('div', {\n      className: cls.HEADER_TOOLBAR\n    });\n    this.element.appendChild(toolbarEle);\n    this.parent.element.insertBefore(this.element, this.parent.element.firstElementChild);\n    this.renderToolbar();\n  };\n\n  HeaderRenderer.prototype.renderToolbar = function () {\n    var items = this.getItems();\n    var args = {\n      requestType: 'toolbarItemRendering',\n      items: items\n    };\n    this.parent.trigger(events.actionBegin, args);\n    this.toolbarObj = new Toolbar({\n      items: args.items,\n      overflowMode: 'Popup',\n      clicked: this.toolbarClickHandler.bind(this),\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale\n    });\n    this.toolbarObj.appendTo(this.parent.element.querySelector('.' + cls.HEADER_TOOLBAR));\n    var prevNavEle = this.toolbarObj.element.querySelector('.e-prev');\n\n    if (prevNavEle) {\n      prevNavEle.firstChild.setAttribute('title', this.l10n.getConstant('previous'));\n    }\n\n    var nextNavEle = this.toolbarObj.element.querySelector('.e-next');\n\n    if (nextNavEle) {\n      nextNavEle.firstChild.setAttribute('title', this.l10n.getConstant('next'));\n    }\n\n    this.updateActiveView();\n    this.parent.trigger(events.actionComplete, {\n      requestType: 'toolBarItemRendered',\n      items: this.toolbarObj.items\n    });\n  };\n\n  HeaderRenderer.prototype.updateItems = function () {\n    if (this.toolbarObj) {\n      var items = this.getItems();\n      var args = {\n        requestType: 'toolbarItemRendering',\n        items: items\n      };\n      this.parent.trigger(events.actionBegin, args);\n      this.toolbarObj.items = args.items;\n      this.toolbarObj.dataBind();\n      this.parent.trigger(events.actionComplete, {\n        requestType: 'toolBarItemRendered',\n        items: this.toolbarObj.items\n      });\n    }\n  };\n\n  HeaderRenderer.prototype.getPopUpRelativeElement = function () {\n    if (this.parent.isAdaptive) {\n      return this.toolbarObj.element;\n    }\n\n    return this.element.querySelector('.e-date-range');\n  };\n\n  HeaderRenderer.prototype.setDayOfWeek = function (index) {\n    if (this.headerCalendar) {\n      this.headerCalendar.firstDayOfWeek = index;\n      this.headerCalendar.dataBind();\n    }\n  };\n\n  HeaderRenderer.prototype.setCalendarDate = function (date) {\n    if (this.headerCalendar) {\n      this.headerCalendar.value = date;\n      this.headerCalendar.dataBind();\n    }\n  };\n\n  HeaderRenderer.prototype.getCalendarView = function () {\n    if (this.parent.currentView === 'Month' || this.parent.currentView === 'MonthAgenda') {\n      return 'Year';\n    }\n\n    return 'Month';\n  };\n\n  HeaderRenderer.prototype.setCalendarView = function () {\n    if (this.headerCalendar) {\n      var calendarView = this.getCalendarView();\n      this.headerCalendar.depth = calendarView;\n      this.headerCalendar.start = calendarView;\n      this.headerCalendar.refresh();\n    }\n  };\n\n  HeaderRenderer.prototype.updateActiveView = function () {\n    var selEle = this.toolbarObj.element.querySelectorAll('.e-views');\n    removeClass(selEle, ['e-active-view']);\n\n    if (selEle.length > 0 && selEle[this.parent.viewIndex]) {\n      addClass([selEle[this.parent.viewIndex]], ['e-active-view']);\n    }\n  };\n\n  HeaderRenderer.prototype.updateDateRange = function (text) {\n    var selEle = this.toolbarObj.element.querySelector('.e-date-range');\n\n    if (selEle) {\n      selEle.setAttribute('aria-label', text);\n      selEle.querySelector('.e-tbar-btn-text').innerHTML = text;\n      this.toolbarObj.refreshOverflow();\n    }\n  };\n\n  HeaderRenderer.prototype.getDateRangeText = function () {\n    return this.parent.globalize.formatDate(this.parent.selectedDate, {\n      format: 'MMMM y'\n    });\n  };\n\n  HeaderRenderer.prototype.getItems = function () {\n    var items = [];\n    var showInPopup = this.parent.isAdaptive;\n    items.push({\n      align: 'Left',\n      prefixIcon: 'e-icon-prev',\n      tooltipText: 'Previous',\n      overflow: 'Show',\n      cssClass: 'e-prev',\n      htmlAttributes: {\n        'aria-label': 'previous period'\n      }\n    });\n    items.push({\n      align: 'Left',\n      prefixIcon: 'e-icon-next',\n      tooltipText: 'Next',\n      overflow: 'Show',\n      cssClass: 'e-next',\n      htmlAttributes: {\n        'aria-label': 'next period'\n      }\n    });\n    items.push({\n      align: 'Left',\n      text: this.getDateRangeText(),\n      suffixIcon: 'e-icon-down-arrow',\n      cssClass: 'e-date-range',\n      overflow: 'Show',\n      htmlAttributes: {\n        'aria-atomic': 'true',\n        'aria-live': 'assertive',\n        'aria-label': 'title'\n      }\n    });\n\n    if (this.parent.isAdaptive) {\n      items.push({\n        align: 'Right',\n        showAlwaysInPopup: showInPopup,\n        prefixIcon: 'e-icon-add',\n        text: this.l10n.getConstant('newEvent'),\n        cssClass: 'e-add',\n        overflow: 'Show'\n      });\n      items.push({\n        align: 'Right',\n        showAlwaysInPopup: showInPopup,\n        prefixIcon: 'e-icon-today',\n        text: this.l10n.getConstant('today'),\n        cssClass: 'e-today',\n        overflow: 'Show'\n      });\n    } else {\n      items.push({\n        align: 'Right',\n        showAlwaysInPopup: showInPopup,\n        prefixIcon: 'e-icon-day',\n        text: this.l10n.getConstant('today'),\n        cssClass: 'e-today',\n        overflow: 'Show'\n      });\n\n      if (this.parent.views.length > 1) {\n        items.push({\n          align: 'Right',\n          type: 'Separator',\n          cssClass: 'e-schedule-seperator'\n        });\n      }\n    }\n\n    if (this.parent.views.length > 1) {\n      for (var _i = 0, _a = this.parent.views; _i < _a.length; _i++) {\n        var item = _a[_i];\n        typeof item === 'string' ? items.push(this.getItemObject(item.toLowerCase(), null)) : items.push(this.getItemObject(item.option.toLowerCase(), item.displayName));\n      }\n    }\n\n    return items;\n  };\n\n  HeaderRenderer.prototype.getItemObject = function (viewName, displayName) {\n    var view;\n    var showInPopup = this.parent.isAdaptive;\n\n    switch (viewName) {\n      case 'day':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-day',\n          text: displayName || this.l10n.getConstant('day'),\n          cssClass: 'e-views e-day'\n        };\n        break;\n\n      case 'week':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-week',\n          text: displayName || this.l10n.getConstant('week'),\n          cssClass: 'e-views e-week'\n        };\n        break;\n\n      case 'workweek':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-workweek',\n          text: displayName || this.l10n.getConstant('workWeek'),\n          cssClass: 'e-views e-work-week'\n        };\n        break;\n\n      case 'month':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-month',\n          text: displayName || this.l10n.getConstant('month'),\n          cssClass: 'e-views e-month'\n        };\n        break;\n\n      case 'agenda':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-agenda',\n          text: this.l10n.getConstant('agenda'),\n          cssClass: 'e-views e-agenda'\n        };\n        break;\n\n      case 'monthagenda':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-month-agenda',\n          text: this.l10n.getConstant('monthAgenda'),\n          cssClass: 'e-views e-month-agenda'\n        };\n        break;\n\n      case 'timelineday':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-timeline-day',\n          text: displayName || this.l10n.getConstant('timelineDay'),\n          cssClass: 'e-views e-timeline-day'\n        };\n        break;\n\n      case 'timelineweek':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-timeline-week',\n          text: displayName || this.l10n.getConstant('timelineWeek'),\n          cssClass: 'e-views e-timeline-week'\n        };\n        break;\n\n      case 'timelineworkweek':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-timeline-workweek',\n          text: displayName || this.l10n.getConstant('timelineWorkWeek'),\n          cssClass: 'e-views e-timeline-work-week'\n        };\n        break;\n\n      case 'timelinemonth':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: showInPopup,\n          prefixIcon: 'e-icon-timeline-month',\n          text: displayName || this.l10n.getConstant('timelineMonth'),\n          cssClass: 'e-views e-timeline-month'\n        };\n        break;\n    }\n\n    return view;\n  };\n\n  HeaderRenderer.prototype.renderHeaderPopup = function () {\n    var headerPopupEle = createElement('div', {\n      className: cls.HEADER_POPUP_CLASS\n    });\n    var headerCalendarEle = createElement('div', {\n      className: cls.HEADER_CALENDAR_CLASS\n    });\n    headerPopupEle.appendChild(headerCalendarEle);\n    this.element.appendChild(headerPopupEle);\n    this.headerPopup = new Popup(headerPopupEle, {\n      actionOnScroll: 'hide',\n      targetType: 'relative',\n      relateTo: this.getPopUpRelativeElement(),\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      enableRtl: this.parent.enableRtl\n    });\n    var calendarView = this.getCalendarView();\n    this.headerCalendar = new Calendar({\n      value: this.parent.selectedDate,\n      firstDayOfWeek: this.parent.firstDayOfWeek,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      depth: calendarView,\n      start: calendarView,\n      change: this.calendarChange.bind(this)\n    });\n    this.headerCalendar.appendTo(headerCalendarEle);\n    this.headerPopup.hide();\n  };\n\n  HeaderRenderer.prototype.calendarChange = function (args) {\n    if (args.value.getTime() !== this.parent.selectedDate.getTime()) {\n      this.parent.changeDate(args.value);\n    }\n\n    this.headerPopup.hide();\n  };\n\n  HeaderRenderer.prototype.calculateViewIndex = function (args) {\n    var target = closest(args.originalEvent.target, '.e-views');\n    var views = [].slice.call(this.element.querySelectorAll('.e-views'));\n    return views.indexOf(target);\n  };\n\n  HeaderRenderer.prototype.toolbarClickHandler = function (args) {\n    if (!args.item) {\n      return;\n    }\n\n    var strClass = args.item.cssClass.replace('e-views ', '');\n\n    switch (strClass) {\n      case 'e-date-range':\n        if (!this.headerPopup) {\n          this.renderHeaderPopup();\n        }\n\n        if (this.headerPopup.element.classList.contains(cls.POPUP_OPEN)) {\n          this.headerPopup.hide();\n        } else {\n          this.headerPopup.show();\n        }\n\n        break;\n\n      case 'e-day':\n        this.parent.changeView('Day', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-week':\n        this.parent.changeView('Week', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-work-week':\n        this.parent.changeView('WorkWeek', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-month':\n        this.parent.changeView('Month', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-agenda':\n        this.parent.changeView('Agenda', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n      // case 'e-week-agenda':\n      //     this.parent.changeView('weekAgenda', args.originalEvent);\n      //     break;\n      // case 'e-work-week-agenda':\n      //     this.parent.changeView('workWeekAgenda', args.originalEvent);\n      //     break;\n\n      case 'e-month-agenda':\n        this.parent.changeView('MonthAgenda', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-day':\n        this.parent.changeView('TimelineDay', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-week':\n        this.parent.changeView('TimelineWeek', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-work-week':\n        this.parent.changeView('TimelineWorkWeek', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-month':\n        this.parent.changeView('TimelineMonth', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-today':\n        if (!this.parent.isSelectedDate(util.resetTime(new Date()))) {\n          this.parent.changeDate(util.resetTime(new Date()), args.originalEvent);\n        }\n\n        break;\n\n      case 'e-prev':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), args.originalEvent);\n        break;\n\n      case 'e-next':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), args.originalEvent);\n        break;\n\n      case 'e-add':\n        var data = void 0;\n        var isSameTime = this.parent.activeCellsData.startTime.getTime() === this.parent.activeCellsData.endTime.getTime();\n\n        if (this.parent.activeCellsData && !isSameTime) {\n          data = this.parent.activeCellsData;\n        } else {\n          var interval = this.parent.activeViewOptions.timeScale.interval;\n          var slotCount = this.parent.activeViewOptions.timeScale.slotCount;\n          var msInterval = interval * util.MS_PER_MINUTE / slotCount;\n          var startTime = new Date(this.parent.selectedDate.getTime());\n          startTime.setHours(new Date().getHours(), Math.round(startTime.getMinutes() / msInterval) * msInterval, 0);\n          var endTime = new Date(new Date(startTime.getTime()).setMilliseconds(startTime.getMilliseconds() + msInterval));\n          data = {\n            startTime: startTime,\n            endTime: endTime,\n            isAllDay: false\n          };\n        }\n\n        this.parent.eventWindow.openEditor(extend(data, {\n          cancel: false,\n          event: args.originalEvent\n        }), 'Add');\n        break;\n    }\n\n    var toolbarPopUp = this.toolbarObj.element.querySelector('.e-toolbar-pop');\n\n    if (toolbarPopUp) {\n      toolbarPopUp.ej2_instances[0].hide({\n        name: 'SlideUp',\n        duration: 100\n      });\n    }\n  };\n\n  HeaderRenderer.prototype.getHeaderElement = function () {\n    return this.toolbarObj.element;\n  };\n\n  HeaderRenderer.prototype.updateHeaderItems = function (classType) {\n    var prevNavEle = this.toolbarObj.element.querySelector('.e-prev');\n    var nextNavEle = this.toolbarObj.element.querySelector('.e-next');\n    var dateRangeEle = this.toolbarObj.element.querySelector('.e-date-range');\n\n    if (prevNavEle) {\n      classType === 'add' ? addClass([prevNavEle], cls.HIDDEN_CLASS) : removeClass([prevNavEle], cls.HIDDEN_CLASS);\n    }\n\n    if (nextNavEle) {\n      classType === 'add' ? addClass([nextNavEle], cls.HIDDEN_CLASS) : removeClass([nextNavEle], cls.HIDDEN_CLASS);\n    }\n\n    if (dateRangeEle) {\n      classType === 'add' ? addClass([dateRangeEle], cls.TEXT_ELLIPSIS) : removeClass([dateRangeEle], cls.TEXT_ELLIPSIS);\n    }\n  };\n  /**\n   * Get module name.\n   */\n\n\n  HeaderRenderer.prototype.getModuleName = function () {\n    return 'headerbar';\n  };\n  /**\n   * To destroy the headerbar.\n   * @return {void}\n   * @private\n   */\n\n\n  HeaderRenderer.prototype.destroy = function () {\n    if (this.headerPopup) {\n      this.headerPopup.destroy();\n    }\n\n    if (this.headerCalendar) {\n      this.headerCalendar.destroy();\n    }\n\n    if (!this.toolbarObj.isDestroyed) {\n      this.toolbarObj.destroy();\n      this.removeEventListener();\n      remove(this.element);\n    }\n  };\n\n  return HeaderRenderer;\n}();\n\nexport { HeaderRenderer };","map":null,"metadata":{},"sourceType":"module"}