{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { createElement, closest, Draggable, extend, formatUnit, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { addClass, remove, removeClass, setStyleAttribute } from '@syncfusion/ej2-base';\nimport { ActionBase } from '../actions/action-base';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\nimport * as cls from '../base/css-constant';\n/**\n * Schedule events drag actions\n */\n\nvar DragAndDrop =\n/** @class */\nfunction (_super) {\n  __extends(DragAndDrop, _super);\n\n  function DragAndDrop() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DragAndDrop.prototype.wireDragEvent = function (element, isAllDay) {\n    var dragAreaTarget = isAllDay ? cls.DATE_HEADER_WRAP_CLASS : cls.CONTENT_WRAP_CLASS;\n    new Draggable(element, {\n      abort: '.' + cls.EVENT_RESIZE_CLASS,\n      clone: true,\n      cursorAt: {\n        left: 0,\n        top: 0\n      },\n      dragArea: this.parent.element.querySelector('.' + dragAreaTarget),\n      dragStart: this.dragStart.bind(this),\n      drag: this.drag.bind(this),\n      dragStop: this.dragStop.bind(this),\n      enableAutoScroll: false,\n      helper: this.dragHelper.bind(this),\n      queryPositionInfo: this.dragPosition.bind(this)\n    });\n  };\n\n  DragAndDrop.prototype.dragHelper = function (e) {\n    this.setDragActionDefaultValues();\n    this.actionObj.element = e.element;\n    this.actionObj.action = 'drag';\n    this.actionObj.clone = this.createCloneElement(this.actionObj.element);\n\n    if (this.parent.currentView !== 'Month' && this.parent.timeScale.enable && !this.parent.activeView.isTimelineView() && !this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n      setStyleAttribute(this.actionObj.clone, {\n        left: '0%',\n        right: '0%',\n        width: '100%'\n      });\n    }\n\n    this.actionObj.clone.style.top = formatUnit(this.actionObj.element.offsetTop);\n    this.actionObj.cloneElement = [this.actionObj.clone];\n    this.actionObj.originalElement = [this.actionObj.element];\n    return this.actionObj.clone;\n  };\n\n  DragAndDrop.prototype.dragPosition = function (e) {\n    var slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n    var cellWidth = this.parent.activeView.isTimelineView() ? this.actionObj.cellWidth / slotInterval * this.actionObj.interval : this.actionObj.cellWidth;\n    var cellHeight = this.actionObj.cellHeight / slotInterval * this.actionObj.interval;\n    var leftOffset = this.parent.enableRtl ? parseInt(e.left, 10) : Math.abs(parseInt(e.left, 10));\n    var leftValue;\n\n    if (this.parent.currentView === 'Month' || this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n      leftValue = e.left;\n    } else {\n      leftValue = formatUnit(Math.floor(leftOffset / cellWidth) * cellWidth);\n    }\n\n    var topValue;\n\n    if (this.parent.activeView.isTimelineView() || this.actionObj.element.offsetParent.classList.contains(cls.MORE_EVENT_POPUP_CLASS)) {\n      topValue = formatUnit(this.actionObj.clone.offsetTop);\n    } else if (this.parent.currentView === 'Month') {\n      topValue = formatUnit(0);\n    } else if (this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS) && !this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n      topValue = formatUnit(this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS).scrollTop);\n    } else if (this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n      topValue = formatUnit(this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).offsetTop);\n    } else {\n      topValue = formatUnit(Math.ceil(parseInt(e.top, 10) / cellHeight) * cellHeight);\n      var scrollHeight = this.parent.element.querySelector('.e-content-wrap').scrollHeight;\n      var cloneBottom = parseInt(topValue, 10) + this.actionObj.clone.offsetHeight;\n\n      if (cloneBottom > scrollHeight) {\n        topValue = parseInt(topValue, 10) - (cloneBottom - scrollHeight) + 'px';\n      }\n    }\n\n    return {\n      left: leftValue,\n      top: topValue\n    };\n  };\n\n  DragAndDrop.prototype.setDragActionDefaultValues = function () {\n    this.actionObj.action = 'drag';\n    this.actionObj.isAllDay = null;\n    this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n    this.actionObj.interval = this.actionObj.slotInterval;\n    var workCell = this.parent.element.querySelector('.' + cls.WORK_CELLS_CLASS);\n    this.actionObj.cellWidth = workCell.offsetWidth;\n    this.actionObj.cellHeight = workCell.offsetHeight;\n  };\n\n  DragAndDrop.prototype.dragStart = function (e) {\n    this.parent.quickPopup.quickPopupHide();\n    this.eventArgs = this.getPageCoordinates(e);\n    var eventGuid = this.actionObj.element.getAttribute('data-guid');\n    this.actionObj.event = this.parent.eventBase.getEventByGuid(eventGuid);\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var dragArgs = {\n      cancel: false,\n      data: eventObj,\n      event: e,\n      excludeSelectors: null,\n      element: this.actionObj.element,\n      interval: this.actionObj.interval,\n      scroll: {\n        enable: true,\n        scrollBy: 10\n      }\n    };\n    this.parent.trigger(events.dragStart, dragArgs);\n\n    if (dragArgs.cancel) {\n      this.removeCloneElement();\n      return;\n    }\n\n    this.actionClass('addClass');\n    this.parent.uiStateValues.action = true;\n    this.actionObj.start = eventObj[this.parent.eventFields.startTime];\n    this.actionObj.end = eventObj[this.parent.eventFields.endTime];\n    this.actionObj.groupIndex = parseInt(this.actionObj.element.getAttribute('data-group-index') || '0', 10);\n    this.actionObj.interval = dragArgs.interval;\n    this.actionObj.scroll = dragArgs.scroll;\n    this.actionObj.excludeSelectors = dragArgs.excludeSelectors;\n  };\n\n  DragAndDrop.prototype.drag = function (e) {\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventArgs = this.getPageCoordinates(e);\n    this.actionObj.Y = eventArgs.pageY;\n\n    if (this.autoScrollValidation(e) && !this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n      this.autoScroll();\n    }\n\n    this.updateDraggingDateTime(e);\n    var dragArgs = {\n      data: eventObj,\n      event: e,\n      element: this.actionObj.element\n    };\n    this.parent.trigger(events.drag, dragArgs);\n  };\n\n  DragAndDrop.prototype.dragStop = function (e) {\n    this.removeCloneElement();\n    this.actionClass('removeClass');\n    this.parent.uiStateValues.action = false;\n\n    if (this.isAllowDrop(e)) {\n      return;\n    }\n\n    var dragArgs = {\n      cancel: false,\n      data: this.getChangedData(),\n      event: e,\n      element: this.actionObj.element\n    };\n    this.parent.trigger(events.dragStop, dragArgs);\n\n    if (dragArgs.cancel) {\n      return;\n    }\n\n    this.saveChangedData(dragArgs);\n  };\n\n  DragAndDrop.prototype.updateDraggingDateTime = function (e) {\n    if (this.actionObj.element.offsetParent.classList.contains(cls.MORE_EVENT_POPUP_CLASS)) {\n      this.morePopupEventDragging(e);\n    } else if (this.parent.activeView.isTimelineView()) {\n      if (this.parent.currentView === 'TimelineMonth') {\n        this.calculateTimelineDate(e);\n      } else {\n        this.calculateTimelineTime(e);\n      }\n    } else {\n      if (this.parent.currentView === 'Month') {\n        this.calculateVerticalDate(e);\n      } else {\n        this.calculateVerticalTime(e);\n      }\n    }\n  };\n\n  DragAndDrop.prototype.morePopupEventDragging = function (e) {\n    if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, 'td'))) {\n      return;\n    }\n\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();\n    var td = closest(e.target, 'td');\n    var dragStart = new Date(parseInt(td.getAttribute('data-date'), 10));\n    var dragEnd = new Date(dragStart.getTime());\n    dragEnd.setMilliseconds(eventDuration);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);\n    }\n\n    this.actionObj.start = new Date(dragStart.getTime());\n    this.actionObj.end = new Date(dragEnd.getTime());\n    this.actionObj.clone.style.top = formatUnit(td.offsetParent.offsetTop);\n    this.actionObj.clone.style.left = formatUnit(td.offsetLeft);\n    this.actionObj.clone.style.width = formatUnit(td.offsetWidth);\n    var eventContainer = td;\n    var eventWrapper;\n\n    if (this.parent.activeView.isTimelineView()) {\n      var rowIndex = closest(td, 'tr').rowIndex;\n      eventContainer = this.parent.element.querySelectorAll('.e-appointment-container').item(rowIndex);\n    }\n\n    eventWrapper = eventContainer.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);\n\n    if (!eventWrapper) {\n      eventWrapper = createElement('div', {\n        className: cls.APPOINTMENT_WRAPPER_CLASS\n      });\n      eventContainer.appendChild(eventWrapper);\n    }\n\n    eventWrapper.appendChild(this.actionObj.clone);\n  };\n\n  DragAndDrop.prototype.calculateVerticalTime = function (e) {\n    if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, 'tr'))) {\n      return;\n    }\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      this.swapDragging(e);\n    }\n\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventStart = eventObj[this.parent.eventFields.startTime];\n    var eventEnd = eventObj[this.parent.eventFields.endTime];\n    var eventDuration = eventEnd.getTime() - eventStart.getTime();\n    var offsetTop = Math.floor(this.actionObj.clone.offsetTop / this.actionObj.cellHeight) * this.actionObj.cellHeight;\n    offsetTop = offsetTop < 0 ? 0 : offsetTop;\n    var rowIndex = offsetTop / this.actionObj.cellHeight;\n    var heightPerMinute = this.actionObj.cellHeight / this.actionObj.slotInterval;\n    var diffInMinutes = this.actionObj.clone.offsetTop - offsetTop;\n    var isAllDayDrag = this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS);\n    var tr;\n\n    if (isAllDayDrag) {\n      tr = this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS);\n    } else {\n      var trCollections = this.parent.getContentTable().querySelectorAll('tr');\n      tr = trCollections.item(rowIndex);\n    }\n\n    var index = closest(e.target, 'td').cellIndex;\n    var colIndex = isNullOrUndefined(index) ? closest(this.actionObj.clone, 'td').cellIndex : index;\n    var td = tr.childNodes.item(colIndex);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);\n    }\n\n    var dragStart;\n    var dragEnd;\n\n    if (this.parent.activeViewOptions.timeScale.enable && !isAllDayDrag) {\n      this.getEventWrapper(colIndex).appendChild(this.actionObj.clone);\n      var spanHours = -(this.actionObj.slotInterval / this.actionObj.cellHeight * diffInMinutes * (1000 * 60));\n\n      if (this.actionObj.clone.querySelector('.' + cls.EVENT_ICON_UP_CLASS)) {\n        var startTime = new Date(eventStart.getTime());\n        spanHours = util.addDays(util.resetTime(new Date(startTime.getTime())), 1).getTime() - startTime.getTime();\n      }\n\n      dragStart = new Date(parseInt(td.getAttribute('data-date'), 10));\n      dragStart.setMinutes(dragStart.getMinutes() + diffInMinutes * heightPerMinute);\n      dragStart.setMilliseconds(-spanHours);\n      dragStart = this.calculateIntervalTime(dragStart);\n      dragStart.setMilliseconds(spanHours);\n      dragEnd = new Date(dragStart.getTime());\n\n      if (this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n        dragEnd.setMinutes(dragEnd.getMinutes() + this.actionObj.slotInterval);\n      } else {\n        dragEnd.setMilliseconds(eventDuration);\n      }\n    } else {\n      this.getEventWrapper(colIndex).appendChild(this.actionObj.clone);\n      dragStart = new Date(parseInt(td.getAttribute('data-date'), 10));\n      dragStart.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());\n      dragEnd = new Date(dragStart.getTime());\n      dragEnd.setMilliseconds(eventDuration);\n\n      if (!this.actionObj.element.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS) && this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n        dragEnd = util.addDays(util.resetTime(dragEnd), 1);\n      }\n    }\n\n    this.actionObj.start = new Date(+dragStart);\n    this.actionObj.end = new Date(+dragEnd);\n    this.updateTimePosition(this.actionObj.start);\n  };\n\n  DragAndDrop.prototype.swapDragging = function (e) {\n    var _this = this;\n\n    var colIndex = closest(e.target, 'td').cellIndex;\n\n    var setDragArea = function setDragArea(isAllDay) {\n      var dragAreaTarget = isAllDay ? cls.DATE_HEADER_WRAP_CLASS : cls.CONTENT_WRAP_CLASS;\n      var dragObj = _this.actionObj.element.ej2_instances[0];\n      dragObj.dragArea = _this.parent.element.querySelector('.' + dragAreaTarget);\n      dragObj.dataBind();\n    };\n\n    if (closest(e.target, '.' + cls.DATE_HEADER_WRAP_CLASS) && !closest(this.actionObj.clone, '.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS)) {\n      addClass([this.actionObj.clone], cls.ALLDAY_APPOINTMENT_CLASS);\n      this.getEventWrapper(colIndex).appendChild(this.actionObj.clone);\n      this.actionObj.isAllDay = true;\n      setDragArea(this.actionObj.isAllDay);\n      var eventHeight_1 = this.getAllDayEventHeight();\n      var allDayElement = [].slice.call(this.parent.element.querySelectorAll('.' + cls.ALLDAY_CELLS_CLASS + ':first-child'));\n\n      if (allDayElement[0].offsetHeight < eventHeight_1) {\n        allDayElement.forEach(function (element) {\n          return element.style.height = (eventHeight_1 + 2) / 12 + 'em';\n        });\n      }\n\n      setStyleAttribute(this.actionObj.clone, {\n        height: formatUnit(eventHeight_1),\n        top: formatUnit(this.parent.element.querySelector('.' + cls.ALLDAY_ROW_CLASS).offsetTop)\n      });\n    }\n\n    if (closest(e.target, '.' + cls.WORK_CELLS_CLASS) && !closest(this.actionObj.clone, '.' + cls.DAY_WRAPPER_CLASS)) {\n      removeClass([this.actionObj.clone], cls.ALLDAY_APPOINTMENT_CLASS);\n      this.getEventWrapper(colIndex).appendChild(this.actionObj.clone);\n      this.actionObj.isAllDay = false;\n      setDragArea(this.actionObj.isAllDay);\n      var cursorElement = this.getCursorElement(e);\n      setStyleAttribute(this.actionObj.clone, {\n        left: formatUnit(0),\n        top: formatUnit(cursorElement.offsetTop),\n        height: formatUnit(this.actionObj.element.offsetHeight),\n        width: formatUnit(this.actionObj.cellWidth)\n      });\n    }\n  };\n\n  DragAndDrop.prototype.calculateVerticalDate = function (e) {\n    if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, 'tr'))) {\n      return;\n    }\n\n    this.actionObj.clone.style.top = formatUnit(0);\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();\n    var td = closest(e.target, 'td');\n    var tr = td.parentElement;\n    var colIndex = tr.rowIndex * tr.childNodes.length + td.cellIndex; // let cellIndex: number = td.cellIndex;\n    // let daysCount: number = Math.floor(this.actionObj.element.offsetWidth / this.actionObj.cellWidth);\n    // let maxIndex: number = (tr.lastChild as HTMLTableCellElement).cellIndex;\n    // if (cellIndex + daysCount > maxIndex) {\n    //     this.actionObj.clone.style.width = formatUnit((this.actionObj.cellWidth - 2) * ((maxIndex + 1) - cellIndex));\n    // } else {\n    //     this.actionObj.clone.style.width = formatUnit(this.actionObj.element.offsetWidth);\n    // }\n\n    var outerWrapper = this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);\n    }\n\n    var targetWrapper = outerWrapper.item(colIndex).querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);\n\n    if (!targetWrapper) {\n      targetWrapper = createElement('div', {\n        className: cls.APPOINTMENT_WRAPPER_CLASS\n      });\n      outerWrapper.item(colIndex).appendChild(targetWrapper);\n    }\n\n    if (!targetWrapper.querySelector('.' + cls.CLONE_ELEMENT_CLASS)) {\n      targetWrapper.appendChild(this.actionObj.clone);\n    }\n\n    var timeString = td.getAttribute('data-date') || eventObj[this.parent.eventFields.startTime].getTime().toString();\n    var dragStart = new Date(parseInt(timeString, 10));\n    var dragEnd = new Date(dragStart.getTime());\n\n    if (this.parent.enableRtl) {\n      var endTimeDiff = eventObj[this.parent.eventFields.endTime].getTime() - util.resetTime(new Date(+eventObj[this.parent.eventFields.endTime])).getTime();\n      dragEnd = new Date(dragStart.getTime() + endTimeDiff);\n      dragStart = new Date(dragEnd.getTime() - eventDuration);\n    } else {\n      var startTimeDiff = eventObj[this.parent.eventFields.startTime].getTime() - util.resetTime(new Date(+eventObj[this.parent.eventFields.startTime])).getTime();\n      dragStart = new Date(dragStart.getTime() + startTimeDiff);\n      dragEnd = new Date(dragStart.getTime() + eventDuration);\n    }\n\n    this.actionObj.start = new Date(dragStart.getTime());\n    this.actionObj.end = new Date(dragEnd.getTime());\n    this.updateTimePosition(this.actionObj.start);\n  };\n\n  DragAndDrop.prototype.calculateTimelineTime = function (e) {\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();\n    var offsetLeft = this.parent.enableRtl ? Math.abs(this.actionObj.clone.offsetLeft) - this.actionObj.clone.offsetWidth : parseInt(this.actionObj.clone.style.left, 10);\n    offsetLeft = Math.floor(offsetLeft / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n    var diffInMinutes = this.actionObj.clone.offsetLeft - offsetLeft;\n\n    if (this.parent.enableRtl) {\n      var rightOffset = Math.abs(parseInt(this.actionObj.clone.style.left, 10)) - this.actionObj.clone.offsetWidth;\n      this.actionObj.clone.style.right = formatUnit(rightOffset);\n      diffInMinutes = rightOffset - offsetLeft;\n    }\n\n    var widthPerMinute = this.actionObj.slotInterval / this.actionObj.cellWidth;\n    var colIndex = this.getIndex(Math.floor(offsetLeft / this.actionObj.cellWidth));\n    var tr = this.parent.getContentTable().querySelector('tr');\n    var eventStart = new Date(parseInt(tr.childNodes.item(colIndex).getAttribute('data-date'), 10));\n    eventStart.setMinutes(eventStart.getMinutes() + Math.round(widthPerMinute * diffInMinutes));\n    eventStart = this.calculateIntervalTime(eventStart);\n    var eventEnd = new Date(eventStart.getTime());\n    eventEnd.setMilliseconds(eventDuration);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.calculateResourceGroupingPosition(e);\n    }\n\n    this.actionObj.start = new Date(eventStart.getTime());\n    this.actionObj.end = new Date(eventEnd.getTime());\n    this.updateTimePosition(this.actionObj.start);\n  };\n\n  DragAndDrop.prototype.calculateTimelineDate = function (e) {\n    var cloneIndex = 0;\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();\n\n    if (this.parent.enableRtl) {\n      cloneIndex = Math.floor(parseInt(this.actionObj.clone.style.right, 10)) / this.actionObj.cellWidth;\n      var rightOffset = Math.abs(parseInt(this.actionObj.clone.style.left, 10)) - this.actionObj.clone.offsetWidth;\n      this.actionObj.clone.style.right = formatUnit(rightOffset);\n    } else {\n      cloneIndex = Math.floor(this.actionObj.clone.offsetLeft / this.actionObj.cellWidth);\n      var leftOffset = parseInt(this.actionObj.clone.style.left, 10);\n      this.actionObj.clone.style.left = formatUnit(leftOffset);\n    }\n\n    cloneIndex = this.getIndex(cloneIndex);\n    var tr = this.parent.getContentTable().querySelector('tr');\n    var dragDate = new Date(parseInt(tr.childNodes.item(cloneIndex).getAttribute('data-date'), 10));\n    var dragStart = new Date(dragDate.getTime());\n    var srtDateDiff = eventObj[this.parent.eventFields.startTime].getTime() - util.resetTime(new Date(+eventObj[this.parent.eventFields.startTime])).getTime();\n    dragStart = new Date(dragStart.getTime() + srtDateDiff);\n    var dragEnd = new Date(dragStart.getTime() + eventDuration);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.calculateResourceGroupingPosition(e);\n    }\n\n    this.actionObj.start = new Date(dragStart.getTime());\n    this.actionObj.end = new Date(dragEnd.getTime());\n    this.updateTimePosition(this.actionObj.start);\n  };\n\n  DragAndDrop.prototype.calculateResourceGroupingPosition = function (e) {\n    var dragArea = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    var trCollection = this.parent.element.querySelectorAll('.e-content-wrap .e-content-table tr:not(.e-hidden)');\n    var rowIndex = Math.floor(Math.floor(this.actionObj.Y + dragArea.scrollTop - dragArea.getBoundingClientRect().top) / this.actionObj.cellHeight);\n    rowIndex = rowIndex < 0 ? 0 : rowIndex > trCollection.length - 1 ? trCollection.length - 1 : rowIndex;\n    var eventContainer = this.parent.element.querySelectorAll('.e-appointment-container:not(.e-hidden)').item(rowIndex);\n    var eventWrapper = eventContainer.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);\n\n    if (!eventWrapper) {\n      eventWrapper = createElement('div', {\n        className: cls.APPOINTMENT_WRAPPER_CLASS\n      });\n      eventContainer.appendChild(eventWrapper);\n    }\n\n    eventWrapper.appendChild(this.actionObj.clone);\n    var td = closest(e.target, 'td');\n    this.actionObj.groupIndex = td ? parseInt(td.getAttribute('data-group-index'), 10) : this.actionObj.groupIndex;\n    this.actionObj.clone.style.top = formatUnit(trCollection.item(rowIndex).offsetTop);\n  };\n\n  DragAndDrop.prototype.getEventWrapper = function (index) {\n    var eventWrapper;\n    var isAllDayDrag = this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS);\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      var wrapperClass = isAllDayDrag ? '.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS : '.' + cls.APPOINTMENT_WRAPPER_CLASS;\n      eventWrapper = this.parent.element.querySelectorAll(wrapperClass).item(index);\n    } else {\n      var targetWrapper = this.parent.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS).item(index);\n      eventWrapper = targetWrapper.querySelector('.' + cls.APPOINTMENT_WRAPPER_CLASS);\n\n      if (!eventWrapper) {\n        eventWrapper = createElement('div', {\n          className: cls.APPOINTMENT_WRAPPER_CLASS\n        });\n        targetWrapper.appendChild(eventWrapper);\n      }\n    }\n\n    return eventWrapper;\n  };\n\n  DragAndDrop.prototype.getAllDayEventHeight = function () {\n    var eventWrapper = createElement('div', {\n      className: cls.APPOINTMENT_CLASS\n    });\n    this.parent.element.querySelector('.' + cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS).appendChild(eventWrapper);\n    var eventHeight = eventWrapper.offsetHeight;\n    remove(eventWrapper);\n    return eventHeight;\n  };\n\n  DragAndDrop.prototype.isAllowDrop = function (e) {\n    if (!this.actionObj.excludeSelectors) {\n      return false;\n    }\n\n    var dropSelectors = this.actionObj.excludeSelectors.split(',');\n    var isAllowDrop = false;\n\n    for (var _i = 0, dropSelectors_1 = dropSelectors; _i < dropSelectors_1.length; _i++) {\n      var selector = dropSelectors_1[_i];\n\n      if (e.target.classList.contains(selector)) {\n        isAllowDrop = true;\n        break;\n      }\n    }\n\n    return isAllowDrop;\n  };\n  /**\n   * Get module name.\n   */\n\n\n  DragAndDrop.prototype.getModuleName = function () {\n    return 'dragAndDrop';\n  };\n\n  return DragAndDrop;\n}(ActionBase);\n\nexport { DragAndDrop };","map":null,"metadata":{},"sourceType":"module"}