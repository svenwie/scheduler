{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { compile, isNullOrUndefined, extend, EventHandler, formatUnit, Browser } from '@syncfusion/ej2-base';\nimport { createElement, remove, addClass, removeClass, append, prepend } from '@syncfusion/ej2-base';\nimport { WorkCellInteraction } from '../actions/work-cells';\nimport { ViewBase } from './view-base';\nimport { VerticalEvent } from '../event-renderer/vertical-view';\nimport { MonthEvent } from '../event-renderer/month';\nimport * as util from '../base/util';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\nvar MAJOR_SLOT_TEMPLATE = '<span>${getTime(date)}</span>';\nvar MINOR_SLOT_TEMPLATE = '&nbsp;';\n/**\n * vertical view\n */\n\nvar VerticalView =\n/** @class */\nfunction (_super) {\n  __extends(VerticalView, _super);\n  /**\n   * Constructor for vertical view\n   */\n\n\n  function VerticalView(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-day-view';\n    _this.isInverseTableSelect = true;\n    _this.baseCssClass = 'e-vertical-view';\n    _this.dateHeaderTemplate = '<div class=\"e-header-day\">${getDayName(date)}</div>' + '<div class=\"e-header-date e-navigate\" role=\"link\">${getDate(date)}</div>';\n    _this.workCellAction = new WorkCellInteraction(parent);\n    return _this;\n  }\n\n  VerticalView.prototype.addEventListener = function () {\n    this.parent.on(event.scrollUiUpdate, this.scrollUiUpdate, this);\n    this.parent.on(event.dataReady, this.renderEvents, this);\n  };\n\n  VerticalView.prototype.removeEventListener = function () {\n    this.parent.off(event.scrollUiUpdate, this.scrollUiUpdate);\n    this.parent.off(event.dataReady, this.renderEvents);\n  };\n\n  VerticalView.prototype.renderEvents = function () {\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      var appointment = new VerticalEvent(this.parent);\n      appointment.renderAppointments();\n    } else {\n      var appointment = new MonthEvent(this.parent);\n      appointment.renderAppointments();\n    }\n  };\n\n  VerticalView.prototype.onContentScroll = function (e) {\n    var target = e.target;\n    this.scrollLeftPanel(target);\n    this.scrollTopPanel(target);\n\n    if (!this.parent.isAdaptive) {\n      this.parent.uiStateValues.top = target.scrollTop;\n    }\n\n    this.parent.uiStateValues.left = target.scrollLeft;\n\n    if (!isNullOrUndefined(this.parent.quickPopup)) {\n      this.parent.quickPopup.quickPopupHide();\n    }\n  };\n\n  VerticalView.prototype.onApaptiveMove = function (e) {\n    if (this.parent.uiStateValues.action) {\n      e.preventDefault();\n    }\n  };\n\n  VerticalView.prototype.onApaptiveScroll = function (e) {\n    this.parent.uiStateValues.top = e.target.scrollTop;\n  };\n\n  VerticalView.prototype.scrollLeftPanel = function (target) {\n    var leftPanel = this.getLeftPanelElement();\n\n    if (!isNullOrUndefined(leftPanel)) {\n      leftPanel.scrollTop = target.scrollTop;\n    }\n  };\n\n  VerticalView.prototype.scrollUiUpdate = function (args) {\n    var headerBarHeight = this.getHeaderBarHeight();\n    var timecells = this.getLeftPanelElement();\n    var content = this.getScrollableElement();\n    var header = this.getDatesHeaderElement();\n    var scrollerHeight = this.parent.element.offsetHeight - headerBarHeight - header.offsetHeight;\n    this.setContentHeight(content, timecells, scrollerHeight);\n    var scrollBarWidth = util.getScrollBarWidth(); // tslint:disable:no-any\n\n    if (content.offsetWidth - content.clientWidth > 0) {\n      header.firstChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';\n      header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';\n    } else {\n      header.firstChild.style[args.cssProperties.border] = '';\n      header.style[args.cssProperties.padding] = '';\n    } // tslint:enable:no-any\n\n\n    if (this.parent.uiStateValues.isInitial || this.isTimelineView()) {\n      this.scrollToWorkHour();\n      this.parent.uiStateValues.isInitial = this.isTimelineView();\n    } else {\n      content.scrollTop = this.parent.uiStateValues.top;\n    }\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      this.highlightCurrentTime();\n    }\n  };\n\n  VerticalView.prototype.setContentHeight = function (element, leftPanelElement, height) {\n    if (this.parent.isAdaptive && !this.isTimelineView()) {\n      element.style.height = formatUnit(height);\n    } else {\n      if (!isNullOrUndefined(leftPanelElement)) {\n        leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(element));\n      }\n\n      element.style.height = formatUnit(height);\n    }\n  };\n\n  VerticalView.prototype.scrollToWorkHour = function () {\n    if (this.parent.workHours.highlight) {\n      var firstWorkHourCell = this.element.querySelector('.' + cls.WORK_HOURS_CLASS);\n\n      if (firstWorkHourCell) {\n        this.getScrollableElement().scrollTop = firstWorkHourCell.offsetTop;\n        this.parent.uiStateValues.top = firstWorkHourCell.offsetTop;\n        this.parent.uiStateValues.left = 0;\n      }\n    }\n  };\n\n  VerticalView.prototype.scrollToHour = function (hour) {\n    var date = this.parent.globalize.parseDate(hour, {\n      skeleton: 'Hm'\n    });\n\n    if (isNullOrUndefined(date)) {\n      return;\n    }\n\n    this.getScrollableElement().scrollTop = this.getTopFromDateTime(date);\n  };\n\n  VerticalView.prototype.generateColumnLevels = function () {\n    var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n    var columnLevels = [];\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      columnLevels = this.parent.resourceBase.generateResourceLevels(level);\n\n      if (this.parent.uiStateValues.isGroupAdaptive) {\n        var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n        var resStartHour = resourceLevel.resourceData[resourceLevel.resource.startHourField];\n        var resEndHour = resourceLevel.resourceData[resourceLevel.resource.endHourField];\n        var dateSlots = this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays, resStartHour, resEndHour);\n        columnLevels = [dateSlots];\n      }\n    } else {\n      columnLevels.push(level);\n    }\n\n    this.colLevels = columnLevels;\n    return columnLevels;\n  };\n\n  VerticalView.prototype.getDateSlots = function (renderDates, workDays, workStartHour, workEndHour) {\n    if (workStartHour === void 0) {\n      workStartHour = this.parent.workHours.start;\n    }\n\n    if (workEndHour === void 0) {\n      workEndHour = this.parent.workHours.end;\n    }\n\n    var dateCol = [];\n    var start = this.parent.globalize.parseDate(workStartHour, {\n      skeleton: 'Hm'\n    });\n    var end = this.parent.globalize.parseDate(workEndHour, {\n      skeleton: 'Hm'\n    });\n\n    for (var _i = 0, renderDates_1 = renderDates; _i < renderDates_1.length; _i++) {\n      var col = renderDates_1[_i];\n      var classList = [cls.HEADER_CELLS_CLASS];\n\n      if (this.isCurrentDate(col)) {\n        classList.push(cls.CURRENT_DAY_CLASS);\n      }\n\n      dateCol.push({\n        date: col,\n        type: 'dateHeader',\n        className: classList,\n        colSpan: 1,\n        workDays: workDays,\n        startHour: new Date(+start),\n        endHour: new Date(+end)\n      });\n    }\n\n    return dateCol;\n  };\n\n  VerticalView.prototype.isWorkHourRange = function (date) {\n    return this.getStartHour().getTime() <= date.getTime() && this.getEndHour().getTime() >= date.getTime();\n  };\n\n  VerticalView.prototype.highlightCurrentTime = function () {\n    var _this = this;\n\n    if (this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {\n      return;\n    }\n\n    if (this.parent.showTimeIndicator && this.isWorkHourRange(new Date())) {\n      var currentDateIndex = this.getCurrentTimeIndicatorIndex();\n\n      if (currentDateIndex.length > 0) {\n        this.changeCurrentTimePosition();\n\n        if (isNullOrUndefined(this.currentTimeIndicatorTimer)) {\n          this.currentTimeIndicatorTimer = window.setInterval(function () {\n            _this.changeCurrentTimePosition();\n          }, util.MS_PER_MINUTE);\n        }\n      } else {\n        this.clearCurrentTimeIndicatorTimer();\n      }\n    } else {\n      this.clearCurrentTimeIndicatorTimer();\n    }\n  };\n\n  VerticalView.prototype.getCurrentTimeIndicatorIndex = function () {\n    var currentDateIndex = [];\n\n    if (!isNullOrUndefined(this.parent.resourceBase) && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      var count = 0;\n\n      for (var _i = 0, _a = this.parent.resourceBase.lastResourceLevel; _i < _a.length; _i++) {\n        var resource = _a[_i];\n        var index = this.parent.getIndexOfDate(resource.renderDates, util.resetTime(new Date()));\n\n        if (index >= 0) {\n          var resIndex = this.parent.activeViewOptions.group.byDate ? this.parent.resourceBase.lastResourceLevel.length * index + count : count + index;\n          currentDateIndex.push(resIndex);\n        }\n\n        count += this.parent.activeViewOptions.group.byDate ? 1 : resource.renderDates.length;\n      }\n    } else {\n      var renderDates = this.parent.uiStateValues.isGroupAdaptive ? this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].renderDates : this.renderDates;\n      var index = this.parent.getIndexOfDate(renderDates, util.resetTime(new Date()));\n\n      if (index >= 0) {\n        currentDateIndex.push(index);\n      }\n    }\n\n    return currentDateIndex;\n  };\n\n  VerticalView.prototype.clearCurrentTimeIndicatorTimer = function () {\n    if (!isNullOrUndefined(this.currentTimeIndicatorTimer)) {\n      window.clearInterval(this.currentTimeIndicatorTimer);\n      this.currentTimeIndicatorTimer = null;\n      this.removeCurrentTimeIndicatorElements();\n    }\n  };\n\n  VerticalView.prototype.removeCurrentTimeIndicatorElements = function () {\n    var queryString = '.' + cls.PREVIOUS_TIMELINE_CLASS + ',.' + cls.CURRENT_TIMELINE_CLASS + ',.' + cls.CURRENT_TIME_CLASS;\n    var timeIndicator = [].slice.call(this.element.querySelectorAll(queryString));\n    timeIndicator.forEach(function (indicator) {\n      return remove(indicator);\n    });\n  };\n\n  VerticalView.prototype.changeCurrentTimePosition = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeCurrentTimeIndicatorElements();\n    var currentDateIndex = this.getCurrentTimeIndicatorIndex();\n    var firstRow = this.parent.getContentTable().rows[0];\n    var top = this.getTopFromDateTime(new Date());\n    var topInPx = formatUnit(top);\n    var rowIndex = Math.floor(top / firstRow.cells[0].offsetHeight);\n\n    if (isNullOrUndefined(rowIndex) || isNaN(rowIndex)) {\n      return;\n    }\n\n    var curTimeWrap = this.element.querySelectorAll('.' + cls.TIMELINE_WRAPPER_CLASS);\n\n    for (var i = 0, length_1 = currentDateIndex[0]; i < length_1; i++) {\n      curTimeWrap[i].appendChild(createElement('div', {\n        className: cls.PREVIOUS_TIMELINE_CLASS,\n        styles: 'top:' + topInPx\n      }));\n    }\n\n    for (var _i = 0, currentDateIndex_1 = currentDateIndex; _i < currentDateIndex_1.length; _i++) {\n      var day = currentDateIndex_1[_i];\n      curTimeWrap[day].appendChild(createElement('div', {\n        className: cls.CURRENT_TIMELINE_CLASS,\n        styles: 'top:' + topInPx\n      }));\n    }\n\n    var currentTimeEle = createElement('div', {\n      innerHTML: this.parent.getTimeString(new Date()),\n      className: cls.CURRENT_TIME_CLASS,\n      styles: 'top:' + topInPx\n    });\n    var timeCellsWrap = this.getLeftPanelElement();\n    removeClass(timeCellsWrap.querySelectorAll('.' + cls.HIDE_CHILDS_CLASS), cls.HIDE_CHILDS_CLASS);\n    addClass([timeCellsWrap.querySelectorAll('tr')[rowIndex].lastChild], cls.HIDE_CHILDS_CLASS);\n    prepend([currentTimeEle], timeCellsWrap);\n    currentTimeEle.style.top = formatUnit(currentTimeEle.offsetTop - currentTimeEle.offsetHeight / 2);\n  };\n\n  VerticalView.prototype.getTopFromDateTime = function (date) {\n    var startHour = this.getStartHour();\n    var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());\n    return diffInMinutes * this.getWorkCellHeight() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;\n  };\n\n  VerticalView.prototype.getWorkCellHeight = function () {\n    return this.element.querySelector('.e-work-cells').offsetHeight;\n  };\n\n  VerticalView.prototype.getTdContent = function (date, type, groupIndex) {\n    var cntEle;\n\n    switch (type) {\n      case 'dateHeader':\n        if (this.parent.activeViewOptions.dateHeaderTemplate) {\n          var args = {\n            date: date,\n            type: type\n          };\n          cntEle = this.parent.getDateHeaderTemplate()(args);\n        } else {\n          cntEle = compile(this.dateHeaderTemplate, this.customHelper)({\n            date: date\n          });\n        }\n\n        break;\n\n      case 'majorSlot':\n        if (this.parent.activeViewOptions.timeScale.majorSlotTemplate) {\n          var args = {\n            date: date,\n            type: type\n          };\n          cntEle = this.parent.getMajorSlotTemplate()(args);\n        } else {\n          cntEle = compile(MAJOR_SLOT_TEMPLATE, this.customHelper)({\n            date: date\n          });\n        }\n\n        break;\n\n      case 'minorSlot':\n        if (this.parent.activeViewOptions.timeScale.minorSlotTemplate) {\n          var args = {\n            date: date,\n            type: type\n          };\n          cntEle = this.parent.getMinorSlotTemplate()(args);\n        } else {\n          cntEle = compile(MINOR_SLOT_TEMPLATE, this.customHelper)({\n            date: date\n          });\n        }\n\n        break;\n\n      case 'alldayCells':\n        if (this.parent.cellTemplate) {\n          var args = {\n            date: date,\n            type: type,\n            groupIndex: groupIndex\n          };\n          cntEle = this.parent.getCellTemplate()(args);\n        }\n\n        break;\n    }\n\n    return cntEle;\n  };\n\n  VerticalView.prototype.renderLayout = function (type) {\n    this.setPanel(createElement('div', {\n      className: cls.TABLE_WRAP_CLASS\n    }));\n    var clsList = [this.baseCssClass, this.viewClass];\n    clsList.push(type);\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      clsList.push('e-by-date');\n    }\n\n    if (!this.parent.activeViewOptions.timeScale.enable) {\n      addClass([this.element], [cls.TIMESCALE_DISABLE, this.viewClass]);\n    }\n\n    this.renderPanel(type);\n    addClass([this.element], clsList);\n    this.element.appendChild(this.createTableLayout(cls.OUTER_TABLE_CLASS));\n    this.colLevels = this.generateColumnLevels();\n    this.renderHeader();\n    this.renderContent();\n\n    if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector('.' + cls.RESOURCE_TOOLBAR_CONTAINER)) {\n      this.renderResourceMobileLayout();\n    }\n\n    this.parent.notify(event.contentReady, {});\n  };\n\n  VerticalView.prototype.renderHeader = function () {\n    var tr = createElement('tr');\n    var dateTd = createElement('td');\n    dateTd.appendChild(this.renderDatesHeader());\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      var indentTd = createElement('td', {\n        className: cls.LEFT_INDENT_CLASS\n      });\n      indentTd.appendChild(this.renderLeftIndent());\n      tr.appendChild(indentTd);\n    }\n\n    tr.appendChild(dateTd);\n    prepend([tr], this.element.querySelector('tbody'));\n  };\n\n  VerticalView.prototype.renderContent = function () {\n    var tr = createElement('tr');\n    var workTd = createElement('td');\n\n    if (this.parent.isAdaptive) {\n      workTd.setAttribute('colspan', this.parent.activeViewOptions.timeScale.enable ? '2' : '1');\n      var scrollContainer = createElement('div', {\n        className: cls.SCROLL_CONTAINER_CLASS\n      });\n\n      if (this.parent.activeViewOptions.timeScale.enable) {\n        scrollContainer.appendChild(this.renderTimeCells());\n      }\n\n      scrollContainer.appendChild(this.renderContentArea());\n      workTd.appendChild(scrollContainer);\n      EventHandler.add(scrollContainer, 'scroll', this.onApaptiveScroll, this);\n      EventHandler.add(scrollContainer, Browser.touchMoveEvent, this.onApaptiveMove, this);\n      tr.appendChild(workTd);\n    } else {\n      workTd.appendChild(this.renderContentArea());\n\n      if (this.parent.activeViewOptions.timeScale.enable) {\n        var timesTd = createElement('td');\n        timesTd.appendChild(this.renderTimeCells());\n        tr.appendChild(timesTd);\n      }\n\n      tr.appendChild(workTd);\n    }\n\n    this.element.querySelector('tbody').appendChild(tr);\n  };\n\n  VerticalView.prototype.renderLeftIndent = function () {\n    var wrap = createElement('div', {\n      className: cls.LEFT_INDENT_WRAP_CLASS\n    });\n    var tbl = this.createTableLayout();\n    var trEle = createElement('tr');\n    var rowCount = this.colLevels.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      var ntr_1 = trEle.cloneNode();\n      var data_1 = {\n        className: [this.colLevels[i][0].className[0]],\n        type: 'emptyCells'\n      };\n\n      if (this.parent.activeViewOptions.showWeekNumber && data_1.className.indexOf(cls.HEADER_CELLS_CLASS) !== -1) {\n        data_1.className.push(cls.WEEK_NUMBER_CLASS);\n        var weekNo = util.getWeekNumber(this.renderDates.slice(-1)[0]);\n        data_1.text = '<span title=\"' + this.parent.localeObj.getConstant('week') + ' ' + weekNo + '\">' + weekNo + '</span>';\n      }\n\n      ntr_1.appendChild(this.createTd(data_1));\n      tbl.querySelector('tbody').appendChild(ntr_1);\n    }\n\n    var ntr = trEle.cloneNode();\n    var appointmentExpandCollapse = createElement('div', {\n      attrs: {\n        'tabindex': '0',\n        title: 'Expand-all-day-section',\n        'aria-disabled': 'false',\n        'aria-label': 'Expand section'\n      },\n      className: cls.ALLDAY_APPOINTMENT_SECTION_CLASS + ' ' + cls.APPOINTMENT_ROW_EXPAND_CLASS + ' ' + cls.ICON + ' ' + cls.DISABLE_CLASS\n    });\n    var data = {\n      className: [cls.ALLDAY_CELLS_CLASS],\n      type: 'emptyCells'\n    };\n    var nth = this.createTd(data);\n    nth.appendChild(appointmentExpandCollapse);\n    ntr.appendChild(nth);\n    tbl.querySelector('tbody').appendChild(ntr);\n    wrap.appendChild(tbl);\n    return wrap;\n  };\n\n  VerticalView.prototype.renderDatesHeader = function () {\n    var container = createElement('div', {\n      className: cls.DATE_HEADER_CONTAINER_CLASS\n    });\n    var wrap = createElement('div', {\n      className: cls.DATE_HEADER_WRAP_CLASS\n    });\n    container.appendChild(wrap);\n    var tbl = this.createTableLayout();\n    var trEle = createElement('tr');\n    var rowCount = this.colLevels.length;\n    var lastLevel = this.colLevels[rowCount - 1];\n    this.createColGroup(tbl, lastLevel);\n\n    for (var i = 0; i < rowCount; i++) {\n      var ntr = trEle.cloneNode();\n      addClass([ntr], cls.HEADER_ROW_CLASS);\n      var level = this.colLevels[i];\n\n      for (var j = 0; j < level.length; j++) {\n        ntr.appendChild(this.createTd(level[j]));\n      }\n\n      tbl.querySelector('tbody').appendChild(ntr);\n    }\n\n    this.createAllDayRow(tbl, lastLevel);\n    wrap.appendChild(tbl);\n    return container;\n  };\n\n  VerticalView.prototype.createAllDayRow = function (table, tdData) {\n    var ntr = createElement('tr');\n    addClass([ntr], cls.ALLDAY_ROW_CLASS);\n\n    for (var j = 0; j < tdData.length; j++) {\n      var td = extend({}, tdData[j]);\n      td.className = [cls.ALLDAY_CELLS_CLASS];\n      td.type = 'alldayCells';\n      var ntd = this.createTd(td);\n      ntd.setAttribute('data-date', td.date.getTime().toString());\n\n      if (!isNullOrUndefined(td.groupIndex)) {\n        ntd.setAttribute('data-group-index', '' + td.groupIndex);\n      }\n\n      this.wireCellEvents(ntd);\n      ntr.appendChild(ntd);\n    }\n\n    table.querySelector('tbody').appendChild(ntr);\n    var thead = createElement('thead');\n    thead.appendChild(this.createEventWrapper('allDay'));\n    prepend([thead], table);\n  };\n\n  VerticalView.prototype.createTd = function (td) {\n    var tdEle = createElement('td');\n    this.addAttributes(td, tdEle);\n\n    if (td.date && td.type) {\n      var ele = this.getTdContent(td.date, td.type, td.groupIndex);\n\n      if (ele && ele.length) {\n        append([].slice.call(ele), tdEle);\n      }\n    }\n\n    if (td.type === 'resourceHeader') {\n      this.setResourceHeaderContent(tdEle, td);\n    }\n\n    if (td.type === 'dateHeader' && td.className.indexOf(cls.HEADER_CELLS_CLASS) >= 0) {\n      tdEle.setAttribute('data-date', td.date.getTime().toString());\n\n      if (!isNullOrUndefined(td.groupIndex)) {\n        tdEle.setAttribute('data-group-index', '' + td.groupIndex);\n      }\n\n      EventHandler.add(tdEle, 'click', this.workCellAction.cellClick, this.workCellAction);\n      EventHandler.add(tdEle, 'dblclick', this.workCellAction.cellDblClick, this.workCellAction);\n    }\n\n    var args = {\n      elementType: td.type,\n      element: tdEle,\n      date: td.date,\n      groupIndex: td.groupIndex\n    };\n    this.parent.trigger(event.renderCell, args);\n    return tdEle;\n  };\n\n  VerticalView.prototype.wireCellEvents = function (element) {\n    EventHandler.add(element, 'mousedown', this.workCellAction.cellMouseDown, this.workCellAction);\n    EventHandler.add(element, 'click', this.workCellAction.cellClick, this.workCellAction);\n    EventHandler.add(element, 'dblclick', this.workCellAction.cellDblClick, this.workCellAction);\n  };\n\n  VerticalView.prototype.renderTimeCells = function () {\n    var _this = this;\n\n    var wrap = createElement('div', {\n      className: cls.TIME_CELLS_WRAP_CLASS\n    });\n    var tbl = this.createTableLayout();\n    var trEle = createElement('tr');\n\n    var handler = function handler(r) {\n      r.type = r.first ? 'majorSlot' : 'minorSlot';\n      r.className = r.last ? [cls.TIME_CELLS_CLASS] : [];\n      var ntr = trEle.cloneNode();\n      var data = {\n        date: r.date,\n        type: r.type,\n        className: r.className\n      };\n      ntr.appendChild(_this.createTd(data));\n      tbl.querySelector('tbody').appendChild(ntr);\n      return r;\n    };\n\n    this.getTimeSlotRows(handler);\n    wrap.appendChild(tbl);\n    return wrap;\n  };\n\n  VerticalView.prototype.renderContentArea = function () {\n    var wrap = createElement('div', {\n      className: cls.CONTENT_WRAP_CLASS\n    });\n    var tbl = this.createTableLayout(cls.CONTENT_TABLE_CLASS);\n    this.createColGroup(tbl, this.colLevels.slice(-1)[0]);\n    this.renderContentTable(tbl);\n    wrap.appendChild(tbl);\n    this.wireCellEvents(tbl.querySelector('tbody'));\n    EventHandler.add(wrap, 'scroll', this.onContentScroll, this);\n    EventHandler.add(wrap, Browser.touchMoveEvent, this.onApaptiveMove, this);\n    return wrap;\n  };\n\n  VerticalView.prototype.renderContentTable = function (table) {\n    var _this = this;\n\n    var tr = createElement('tr', {\n      attrs: {\n        role: 'row'\n      }\n    });\n    var td = createElement('td', {\n      attrs: {\n        role: 'gridcell',\n        'aria-selected': 'false'\n      }\n    });\n    var tbody = table.querySelector('tbody');\n\n    var handler = function handler(r) {\n      var ntr = tr.cloneNode();\n\n      for (var _i = 0, _a = _this.colLevels[_this.colLevels.length - 1]; _i < _a.length; _i++) {\n        var tdData = _a[_i];\n\n        var ntd = _this.createContentTd(tdData, r, td);\n\n        ntr.appendChild(ntd);\n      }\n\n      tbody.appendChild(ntr);\n      return r;\n    };\n\n    this.getTimeSlotRows(handler);\n    this.renderContentTableHeader(table);\n  };\n\n  VerticalView.prototype.createContentTd = function (tdData, r, td) {\n    var ntd = td.cloneNode();\n\n    if (tdData.colSpan) {\n      ntd.setAttribute('colspan', tdData.colSpan.toString());\n    }\n\n    var clsName = this.getContentTdClass(r);\n    var cellDate = util.resetTime(new Date('' + tdData.date));\n    util.setTime(cellDate, util.getDateInMs(r.date));\n    var type = 'workCells';\n\n    if (tdData.className.indexOf(cls.RESOURCE_PARENT_CLASS) !== -1) {\n      clsName.push(cls.RESOURCE_GROUP_CELLS_CLASS);\n      type = 'resourceGroupCells';\n    }\n\n    if (this.parent.workHours.highlight && (this.parent.activeViewOptions.timeScale.enable && this.isWorkHour(cellDate, tdData.startHour, tdData.endHour, tdData.workDays) || !this.parent.activeViewOptions.timeScale.enable && this.isWorkDay(cellDate, tdData.workDays))) {\n      clsName.push(cls.WORK_HOURS_CLASS);\n    }\n\n    addClass([ntd], clsName);\n\n    if (this.parent.cellTemplate) {\n      var args_1 = {\n        date: cellDate,\n        type: type,\n        groupIndex: tdData.groupIndex\n      };\n      append([].slice.call(this.parent.getCellTemplate()(args_1)), ntd);\n    }\n\n    ntd.setAttribute('data-date', cellDate.getTime().toString());\n\n    if (!isNullOrUndefined(tdData.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {\n      var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : tdData.groupIndex;\n      ntd.setAttribute('data-group-index', '' + groupIndex);\n    }\n\n    var args = {\n      elementType: type,\n      element: ntd,\n      date: cellDate,\n      groupIndex: tdData.groupIndex\n    };\n    this.parent.trigger(event.renderCell, args);\n    return ntd;\n  };\n\n  VerticalView.prototype.getContentTdClass = function (r) {\n    return r.last ? [cls.WORK_CELLS_CLASS] : [cls.WORK_CELLS_CLASS, cls.ALTERNATE_CELLS_CLASS];\n  };\n\n  VerticalView.prototype.renderContentTableHeader = function (table) {\n    var thead = createElement('thead');\n    thead.appendChild(this.createEventWrapper());\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      thead.appendChild(this.createEventWrapper('timeIndicator'));\n    }\n\n    prepend([thead], table);\n  };\n\n  VerticalView.prototype.createEventWrapper = function (type) {\n    if (type === void 0) {\n      type = '';\n    }\n\n    var tr = createElement('tr');\n    this.colLevels.slice(-1)[0].forEach(function (col, day) {\n      var appointmentWrap = createElement('td', {\n        className: type === 'allDay' ? cls.ALLDAY_APPOINTMENT_WRAPPER_CLASS : type === 'timeIndicator' ? cls.TIMELINE_WRAPPER_CLASS : cls.DAY_WRAPPER_CLASS,\n        attrs: {\n          'data-date': col.date.getTime().toString()\n        }\n      });\n\n      if (!isNullOrUndefined(col.groupIndex)) {\n        appointmentWrap.setAttribute('data-group-index', col.groupIndex.toString());\n      }\n\n      if (type === '') {\n        var innerWrapper = createElement('div', {\n          id: cls.APPOINTMENT_WRAPPER_CLASS + '-' + day.toString(),\n          className: cls.APPOINTMENT_WRAPPER_CLASS\n        });\n        appointmentWrap.appendChild(innerWrapper);\n      }\n\n      tr.appendChild(appointmentWrap);\n    });\n    return tr;\n  };\n\n  VerticalView.prototype.getScrollableElement = function () {\n    if (this.parent.isAdaptive && this.parent.currentView.indexOf('Timeline') === -1) {\n      return this.element.querySelector('.' + cls.SCROLL_CONTAINER_CLASS);\n    } else {\n      return this.getContentAreaElement();\n    }\n  };\n\n  VerticalView.prototype.getLeftPanelElement = function () {\n    return this.element.querySelector('.' + cls.TIME_CELLS_WRAP_CLASS);\n  };\n\n  VerticalView.prototype.getContentAreaElement = function () {\n    return this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n  };\n\n  VerticalView.prototype.getEndDateFromStartDate = function (start) {\n    var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * util.MS_PER_MINUTE;\n    var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;\n    var end = new Date(start.getTime());\n    end.setMilliseconds(end.getMilliseconds() + msInterval);\n    return end;\n  };\n\n  VerticalView.prototype.getTimeSlotRows = function (handler) {\n    var rows = [];\n    var startHour = this.getStartHour();\n    var endHour = this.getEndHour();\n    var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * util.MS_PER_MINUTE;\n    var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;\n    var length = Math.round(util.MS_PER_DAY / msInterval);\n    var msStartHour = startHour.getTime();\n    var msEndHour = endHour.getTime();\n\n    if (msStartHour !== msEndHour) {\n      length = Math.round((msEndHour - msStartHour) / msInterval);\n    }\n\n    if (!this.parent.activeViewOptions.timeScale.enable) {\n      length = 1;\n    }\n\n    var dt = new Date(msStartHour);\n    var start = this.parent.globalize.parseDate(this.parent.workHours.start, {\n      skeleton: 'Hm'\n    });\n    var end = this.parent.globalize.parseDate(this.parent.workHours.end, {\n      skeleton: 'Hm'\n    });\n\n    for (var i = 0; i < length; i++) {\n      var majorTickDivider = i % (msMajorInterval / msInterval);\n      var row = {\n        date: new Date('' + dt),\n        startHour: start,\n        endHour: end,\n        first: majorTickDivider === 0,\n        middle: majorTickDivider < this.parent.activeViewOptions.timeScale.slotCount - 1,\n        last: majorTickDivider === this.parent.activeViewOptions.timeScale.slotCount - 1,\n        type: ''\n      };\n\n      if (handler) {\n        handler(row);\n      }\n\n      rows.push(row);\n      dt.setMilliseconds(msInterval);\n    }\n\n    return rows;\n  };\n  /**\n   * Get module name.\n   */\n\n\n  VerticalView.prototype.getModuleName = function () {\n    return 'verticalView';\n  };\n  /**\n   * To destroy the vertical view.\n   * @return {void}\n   * @private\n   */\n\n\n  VerticalView.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.clearCurrentTimeIndicatorTimer();\n\n    if (this.element) {\n      EventHandler.remove(this.getContentAreaElement(), 'scroll', this.onContentScroll);\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      remove(this.element);\n      this.element = null;\n\n      if (this.parent.scheduleTouchModule) {\n        this.parent.scheduleTouchModule.resetValues();\n      }\n    }\n  };\n\n  return VerticalView;\n}(ViewBase);\n\nexport { VerticalView };","map":null,"metadata":{},"sourceType":"module"}