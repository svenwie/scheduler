{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, ChildProperty, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents, Touch } from '@syncfusion/ej2-base';\nimport { attributes, Animation } from '@syncfusion/ej2-base';\nimport { Browser, Collection, setValue, getValue, getUniqueID, getInstance, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { select, selectAll, closest, detach, append, rippleEffect, isVisible, Complex } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { getZindexPartial, calculatePosition, isCollide, fit } from '@syncfusion/ej2-popups';\nimport { getScrollableParent } from '@syncfusion/ej2-popups';\nvar ENTER = 'enter';\nvar ESCAPE = 'escape';\nvar FOCUSED = 'e-focused';\nvar HEADER = 'e-menu-header';\nvar SELECTED = 'e-selected';\nvar SEPARATOR = 'e-separator';\nvar UPARROW = 'uparrow';\nvar DOWNARROW = 'downarrow';\nvar LEFTARROW = 'leftarrow';\nvar RIGHTARROW = 'rightarrow';\nvar HOME = 'home';\nvar END = 'end';\nvar CARET = 'e-caret';\nvar ITEM = 'e-menu-item';\nvar DISABLED = 'e-disabled';\nvar HIDE = 'e-menu-hide';\nvar ICONS = 'e-icons';\nvar RTL = 'e-rtl';\n/**\n * Configures the field options of the Menu.\n */\n\nvar FieldSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldSettings, _super);\n\n  function FieldSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('id')], FieldSettings.prototype, \"itemId\", void 0);\n\n  __decorate([Property('parentId')], FieldSettings.prototype, \"parentId\", void 0);\n\n  __decorate([Property('text')], FieldSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('iconCss')], FieldSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('url')], FieldSettings.prototype, \"url\", void 0);\n\n  __decorate([Property('separator')], FieldSettings.prototype, \"separator\", void 0);\n\n  __decorate([Property('items')], FieldSettings.prototype, \"children\", void 0);\n\n  return FieldSettings;\n}(ChildProperty);\n\nexport { FieldSettings };\n/**\n * Specifies menu items.\n */\n\nvar MenuItem =\n/** @class */\nfunction (_super) {\n  __extends(MenuItem, _super);\n\n  function MenuItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property(null)], MenuItem.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('')], MenuItem.prototype, \"id\", void 0);\n\n  __decorate([Property(false)], MenuItem.prototype, \"separator\", void 0);\n\n  __decorate([Collection([], MenuItem)], MenuItem.prototype, \"items\", void 0);\n\n  __decorate([Property('')], MenuItem.prototype, \"text\", void 0);\n\n  __decorate([Property('')], MenuItem.prototype, \"url\", void 0);\n\n  return MenuItem;\n}(ChildProperty);\n\nexport { MenuItem };\n/**\n * @private\n * Base class for Menu and ContextMenu components.\n */\n\nvar MenuBase =\n/** @class */\nfunction (_super) {\n  __extends(MenuBase, _super);\n  /**\n   * Constructor for creating the widget.\n   * @private\n   */\n\n\n  function MenuBase(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.navIdx = [];\n    _this.animation = new Animation({});\n    _this.isTapHold = false;\n    return _this;\n  }\n  /**\n   * Initialized third party configuration settings.\n   * @private\n   */\n\n\n  MenuBase.prototype.preRender = function () {\n    if (this.element.tagName === 'EJS-CONTEXTMENU') {\n      this.element.style.display = 'none';\n      this.element.classList.remove('e-' + this.getModuleName());\n      this.element.classList.remove('e-control');\n      var ejInst = getValue('ej2_instances', this.element);\n      var ul = this.createElement('ul');\n      this.ngElement = this.element;\n      this.element = ul;\n      this.element.classList.add('e-control');\n      this.element.classList.add('e-' + this.getModuleName());\n      setValue('ej2_instances', ejInst, this.element);\n\n      if (!this.element.id) {\n        this.element.id = getUniqueID(this.getModuleName());\n      }\n    }\n\n    if (this.element.tagName === 'EJS-MENU') {\n      var ele = this.element;\n      var ejInstance = getValue('ej2_instances', ele);\n      var ul = this.createElement('ul');\n      var wrapper = this.createElement('EJS-MENU', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n      wrapper.style.display = 'block';\n\n      for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {\n        ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n      }\n\n      ele.parentNode.insertBefore(wrapper, ele);\n      detach(ele);\n      ele = ul;\n      wrapper.appendChild(ele);\n      setValue('ej2_instances', ejInstance, ele);\n      this.ngElement = wrapper;\n      this.element = ele;\n\n      if (!this.element.id) {\n        this.element.id = getUniqueID(this.getModuleName());\n      }\n    }\n  };\n  /**\n   * Initialize the control rendering\n   * @private\n   */\n\n\n  MenuBase.prototype.render = function () {\n    this.initialize();\n    this.renderItems();\n    this.wireEvents();\n  };\n\n  MenuBase.prototype.initialize = function () {\n    var wrapper = this.getWrapper();\n\n    if (!wrapper) {\n      wrapper = this.createElement('div', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      if (this.isMenu) {\n        this.element.parentElement.insertBefore(wrapper, this.element);\n      } else {\n        document.body.appendChild(wrapper);\n      }\n    }\n\n    if (this.cssClass) {\n      wrapper.classList.add(this.cssClass);\n    }\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL);\n    }\n\n    attributes(this.element, {\n      'role': this.isMenu ? 'menubar' : 'menu',\n      'tabindex': '0'\n    });\n    wrapper.appendChild(this.element);\n    this.element.style.zIndex = getZindexPartial(this.element).toString();\n  };\n\n  MenuBase.prototype.renderItems = function () {\n    if (!this.items.length) {\n      var items = ListBase.createJsonFromElement(this.element, {\n        fields: {\n          child: 'items'\n        }\n      });\n      this.setProperties({\n        items: items\n      }, true);\n      this.element.innerHTML = '';\n    }\n\n    var ul = this.createItems(this.items);\n    append(Array.prototype.slice.call(ul.children), this.element);\n    this.element.classList.add('e-menu-parent');\n  };\n\n  MenuBase.prototype.wireEvents = function () {\n    var wrapper = this.getWrapper();\n\n    if (this.target) {\n      var target = void 0;\n      var targetElems = selectAll(this.target);\n\n      for (var i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (Browser.isIos) {\n          new Touch(target, {\n            tapHold: this.touchHandler.bind(this)\n          });\n        } else {\n          EventHandler.add(target, 'contextmenu', this.cmenuHandler, this);\n        }\n      }\n\n      this.targetElement = target;\n\n      for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {\n        var parent_1 = _a[_i];\n        EventHandler.add(parent_1, 'scroll', this.scrollHandler, this);\n      }\n    }\n\n    if (!Browser.isDevice) {\n      EventHandler.add(this.isMenu ? document : wrapper, 'mouseover', this.moverHandler, this);\n      EventHandler.add(document, 'mousedown', this.mouseDownHandler, this);\n    }\n\n    this.delegateClickHandler = this.clickHandler.bind(this);\n    EventHandler.add(document, 'click', this.delegateClickHandler, this);\n    var keyConfigs = {\n      downarrow: DOWNARROW,\n      uparrow: UPARROW,\n      enter: ENTER,\n      leftarrow: LEFTARROW,\n      rightarrow: RIGHTARROW,\n      escape: ESCAPE\n    };\n\n    if (this.isMenu) {\n      keyConfigs.home = HOME;\n      keyConfigs.end = END;\n    }\n\n    new KeyboardEvents(wrapper, {\n      keyAction: this.keyBoardHandler.bind(this),\n      keyConfigs: keyConfigs\n    });\n    this.rippleFn = rippleEffect(wrapper, {\n      selector: '.' + ITEM\n    });\n  };\n\n  MenuBase.prototype.mouseDownHandler = function (e) {\n    if (closest(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper()) {\n      this.closeMenu(this.navIdx.length, e);\n    }\n  };\n\n  MenuBase.prototype.keyBoardHandler = function (e) {\n    var actionName = '';\n    var actionNeeded = this.isMenu && !this.element.classList.contains('e-vertical') && this.navIdx.length < 1;\n    e.preventDefault();\n\n    if (actionNeeded) {\n      switch (e.action) {\n        case RIGHTARROW:\n          actionName = RIGHTARROW;\n          e.action = DOWNARROW;\n          break;\n\n        case LEFTARROW:\n          actionName = LEFTARROW;\n          e.action = UPARROW;\n          break;\n\n        case DOWNARROW:\n          actionName = DOWNARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case UPARROW:\n          actionName = UPARROW;\n          e.action = '';\n          break;\n      }\n    } else if (this.enableRtl) {\n      switch (e.action) {\n        case LEFTARROW:\n          actionNeeded = true;\n          actionName = LEFTARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case RIGHTARROW:\n          actionNeeded = true;\n          actionName = RIGHTARROW;\n          e.action = LEFTARROW;\n          break;\n      }\n    }\n\n    switch (e.action) {\n      case DOWNARROW:\n      case UPARROW:\n      case END:\n      case HOME:\n        this.upDownKeyHandler(e);\n        break;\n\n      case RIGHTARROW:\n        this.rightEnterKeyHandler(e);\n        break;\n\n      case LEFTARROW:\n        this.leftEscKeyHandler(e);\n        break;\n\n      case ENTER:\n        this.rightEnterKeyHandler(e);\n        break;\n\n      case ESCAPE:\n        this.leftEscKeyHandler(e);\n        break;\n    }\n\n    if (actionNeeded) {\n      e.action = actionName;\n    }\n  };\n\n  MenuBase.prototype.upDownKeyHandler = function (e) {\n    var wrapper = this.getWrapper();\n    var cul = wrapper.children[this.navIdx.length];\n    var defaultIdx = e.action === DOWNARROW || e.action === HOME ? 0 : cul.childElementCount - 1;\n    var fliIdx = defaultIdx;\n    var fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      if (e.action !== END && e.action !== HOME) {\n        fliIdx = this.getIdx(cul, fli);\n      }\n\n      fli.classList.remove(FOCUSED);\n\n      if (e.action !== END && e.action !== HOME) {\n        e.action === DOWNARROW ? fliIdx++ : fliIdx--;\n\n        if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {\n          fliIdx = defaultIdx;\n        }\n      }\n    }\n\n    var cli = cul.children[fliIdx];\n    fliIdx = this.isValidLI(cli, fliIdx, e.action);\n    cul.children[fliIdx].classList.add(FOCUSED);\n    cul.children[fliIdx].focus();\n  };\n\n  MenuBase.prototype.isValidLI = function (cli, index, action) {\n    var wrapper = this.getWrapper();\n    var cul = wrapper.children[this.navIdx.length];\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      action === DOWNARROW || action === RIGHTARROW ? index++ : index--;\n    }\n\n    cli = cul.children[index];\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      index = this.isValidLI(cli, index, action);\n    }\n\n    return index;\n  };\n\n  MenuBase.prototype.rightEnterKeyHandler = function (e) {\n    var eventArgs;\n    var wrapper = this.getWrapper();\n    var cul = wrapper.children[this.navIdx.length];\n    var fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      var fliIdx = this.getIdx(cul, fli);\n      var navIdx = this.navIdx.concat(fliIdx);\n      var index = void 0;\n      var item = this.getItem(navIdx);\n\n      if (item.items.length) {\n        this.navIdx.push(fliIdx);\n        this.openMenu(fli, item, null, null, e);\n        fli.classList.remove(FOCUSED);\n        fli.classList.add(SELECTED);\n\n        if (e.action === ENTER) {\n          eventArgs = {\n            element: fli,\n            item: item\n          };\n          this.trigger('select', eventArgs);\n        }\n\n        fli.focus();\n        cul = wrapper.children[this.navIdx.length];\n        index = this.isValidLI(cul.children[0], 0, e.action);\n        cul.children[index].classList.add(FOCUSED);\n        cul.children[index].focus();\n      } else {\n        if (e.action === ENTER) {\n          fli.classList.remove(FOCUSED);\n          fli.classList.add(SELECTED);\n          eventArgs = {\n            element: fli,\n            item: item\n          };\n          this.trigger('select', eventArgs);\n          this.closeMenu(null, e);\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.leftEscKeyHandler = function (e) {\n    if (this.navIdx.length) {\n      var wrapper = this.getWrapper();\n      this.closeMenu(this.navIdx.length, e);\n      var cul = wrapper.children[this.navIdx.length];\n      var sli = this.getLIByClass(cul, SELECTED);\n\n      if (sli) {\n        sli.setAttribute('aria-expanded', 'false');\n        sli.classList.remove(SELECTED);\n        sli.classList.add(FOCUSED);\n        sli.focus();\n      }\n    } else {\n      if (e.action === ESCAPE) {\n        this.closeMenu(null, e);\n      }\n    }\n  };\n\n  MenuBase.prototype.scrollHandler = function (e) {\n    this.closeMenu(null, e);\n  };\n\n  MenuBase.prototype.touchHandler = function (e) {\n    this.isTapHold = true;\n    this.cmenuHandler(e.originalEvent);\n  };\n\n  MenuBase.prototype.cmenuHandler = function (e) {\n    e.preventDefault();\n    this.closeMenu(null, e);\n\n    if (this.canOpen(e.target)) {\n      if (e.changedTouches) {\n        this.openMenu(null, null, e.changedTouches[0].pageY + 1, e.changedTouches[0].pageX + 1, e);\n      } else {\n        this.openMenu(null, null, e.pageY + 1, e.pageX + 1, e);\n      }\n    }\n  };\n\n  MenuBase.prototype.closeMenu = function (ulIndex, e) {\n    if (ulIndex === void 0) {\n      ulIndex = 0;\n    }\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    if (this.isMenuVisible()) {\n      var ul = void 0;\n      var sli = void 0;\n      var item = void 0;\n      var items = void 0;\n      var closeArgs = void 0;\n      var beforeCloseArgs = void 0;\n      var wrapper = this.getWrapper();\n\n      for (var cnt = wrapper.childElementCount; cnt > ulIndex; cnt--) {\n        ul = wrapper.children[cnt - 1];\n\n        if (this.isMenu && ul.classList.contains('e-menu')) {\n          sli = this.getLIByClass(ul, SELECTED);\n\n          if (sli) {\n            sli.classList.remove(SELECTED);\n          }\n\n          break;\n        }\n\n        item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n        items = item ? item.items : this.items;\n        beforeCloseArgs = {\n          element: ul,\n          parentItem: item,\n          items: items,\n          event: e,\n          cancel: false\n        };\n        this.trigger('beforeClose', beforeCloseArgs);\n\n        if (!beforeCloseArgs.cancel) {\n          this.toggleAnimation(ul, false);\n          this.navIdx.length = ulIndex ? ulIndex - 1 : ulIndex;\n          closeArgs = {\n            element: ul,\n            parentItem: item,\n            items: items\n          };\n          this.trigger('onClose', closeArgs);\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.isMenuVisible = function () {\n    return this.navIdx.length > 0 || this.element.classList.contains('e-contextmenu') && isVisible(this.element).valueOf();\n  };\n\n  MenuBase.prototype.canOpen = function (target) {\n    var canOpen = true;\n\n    if (this.filter) {\n      canOpen = false;\n      var filter = this.filter.split(' ');\n\n      for (var i = 0, len = target.classList.length; i < len; i++) {\n        if (filter.indexOf(target.classList[i]) > -1) {\n          canOpen = true;\n          break;\n        }\n      }\n    }\n\n    return canOpen;\n  };\n\n  MenuBase.prototype.openMenu = function (li, item, top, left, e, target) {\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    if (target === void 0) {\n      target = this.targetElement;\n    }\n\n    var ul;\n    var navIdx;\n    var wrapper = this.getWrapper();\n\n    if (li) {\n      ul = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);\n\n      if (!this.isMenu && Browser.isDevice) {\n        wrapper.lastChild.style.display = 'none';\n        var data = {\n          text: item[this.getField('text')].toString(),\n          iconCss: ICONS + ' e-previous'\n        };\n        var hdata = new MenuItem(this.items[0], null, data, true);\n        var hli = this.createItems([hdata]).children[0];\n        hli.classList.add(HEADER);\n        ul.insertBefore(hli, ul.children[0]);\n      }\n\n      ul.style.zIndex = this.element.style.zIndex;\n      wrapper.appendChild(ul);\n    } else {\n      ul = this.element;\n      ul.style.zIndex = getZindexPartial(target ? target : this.element).toString();\n    }\n\n    navIdx = this.getIndex(li ? li.id : null, true);\n    var items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;\n    var eventArgs = {\n      element: ul,\n      items: items,\n      parentItem: item,\n      event: e,\n      cancel: false,\n      top: top,\n      left: left\n    };\n    this.trigger('beforeOpen', eventArgs);\n    top = eventArgs.top;\n    left = eventArgs.left;\n\n    if (eventArgs.cancel) {\n      this.navIdx.pop();\n    } else {\n      this.setPosition(li, ul, top, left);\n      this.toggleAnimation(ul);\n    }\n  };\n\n  MenuBase.prototype.setPosition = function (li, ul, top, left) {\n    var px = 'px';\n    this.toggleVisiblity(ul);\n\n    if (ul === this.element || !isNullOrUndefined(left) && !isNullOrUndefined(top)) {\n      var collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('right') > -1) {\n        left = left - ul.offsetWidth;\n      }\n\n      if (collide.indexOf('bottom') > -1) {\n        var offset = fit(ul, null, {\n          X: false,\n          Y: true\n        }, {\n          top: top,\n          left: left\n        });\n        top = offset.top - 20;\n      }\n\n      collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('left') > -1) {\n        var offset = fit(ul, null, {\n          X: true,\n          Y: false\n        }, {\n          top: top,\n          left: left\n        });\n        left = offset.left;\n      }\n    } else {\n      var offset = void 0;\n      var isRelative = this.isMenu && this.element.offsetParent.tagName !== 'BODY';\n\n      if (!this.isMenu && Browser.isDevice) {\n        top = Number(this.element.style.top.replace(px, ''));\n        left = Number(this.element.style.left.replace(px, ''));\n      } else {\n        var x = 'right';\n        var y = 'top';\n\n        if (this.isMenu && !this.element.classList.contains('e-vertical') && this.navIdx.length < 2) {\n          x = this.enableRtl ? 'right' : 'left';\n          y = 'bottom';\n        } else {\n          x = this.enableRtl ? 'left' : 'right';\n        }\n\n        offset = calculatePosition(li, x, y);\n        top = offset.top;\n        left = offset.left;\n      }\n\n      var collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);\n      var xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;\n      var yCollision = collide.indexOf('bottom') > -1;\n\n      if (xCollision) {\n        offset = calculatePosition(li, this.enableRtl ? 'right' : 'left', 'top');\n        left = offset.left;\n      }\n\n      if (this.enableRtl || xCollision) {\n        left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;\n\n        if (this.isMenu && xCollision && !this.element.classList.contains('e-vertical') && this.navIdx && this.navIdx.length < 2) {\n          left = this.enableRtl ? left - li.getBoundingClientRect().width : left + li.getBoundingClientRect().width;\n        }\n      }\n\n      if (yCollision) {\n        offset = fit(ul, null, {\n          X: false,\n          Y: true\n        }, {\n          top: top,\n          left: left\n        });\n        top = offset.top;\n      }\n\n      collide = isCollide(ul, null, left, top);\n      xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;\n\n      if (xCollision) {\n        offset = fit(ul, null, {\n          X: true,\n          Y: false\n        }, {\n          top: top,\n          left: left\n        });\n        top = offset.top;\n        left = offset.left;\n      }\n\n      if (isRelative) {\n        var boundRect = ul.offsetParent.getBoundingClientRect();\n        top -= boundRect.top + pageYOffset;\n        left -= boundRect.left + pageXOffset;\n      }\n    }\n\n    this.toggleVisiblity(ul, false);\n\n    if (this.isMenu) {\n      if (this.element.classList.contains('e-vertical') && this.navIdx && this.navIdx[this.navIdx.length - 1] === 0) {\n        top = top - 1;\n      } else {\n        if (this.navIdx && this.navIdx[this.navIdx.length - 1] === 0) {\n          if (this.navIdx.length === 1) {\n            left = left - 1;\n          } else {\n            top = top - 1;\n          }\n        }\n      }\n    }\n\n    ul.style.top = top + px;\n    ul.style.left = left + px;\n  };\n\n  MenuBase.prototype.toggleVisiblity = function (ul, isVisible) {\n    if (isVisible === void 0) {\n      isVisible = true;\n    }\n\n    ul.style.visibility = isVisible ? 'hidden' : '';\n    ul.style.display = isVisible ? 'block' : 'none';\n  };\n\n  MenuBase.prototype.createItems = function (items) {\n    var _this = this;\n\n    var level = this.navIdx ? this.navIdx.length : 0;\n    var showIcon = this.hasField(items, this.getField('iconCss', level));\n    var id = 'id';\n    var listBaseOptions = {\n      showIcon: showIcon,\n      moduleName: 'menu',\n      fields: this.getFields(level),\n      template: this.template,\n      itemCreating: function itemCreating(args) {\n        if (!args.curData[args.fields[id]]) {\n          args.curData[args.fields[id]] = getUniqueID('menuitem');\n\n          _this.clearChanges();\n        }\n\n        args.curData.htmlAttributes = {\n          role: 'menuitem',\n          tabindex: '-1'\n        };\n\n        if (_this.isMenu && !args.curData[_this.getField('separator', level)]) {\n          args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text];\n        }\n      },\n      itemCreated: function itemCreated(args) {\n        if (args.curData[_this.getField('separator', level)]) {\n          args.item.classList.add(SEPARATOR);\n          args.item.removeAttribute('role');\n        }\n\n        if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField('separator', level)]) {\n          args.item.classList.add('e-blankicon');\n        }\n\n        if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {\n          var span = _this.createElement('span', {\n            className: ICONS + ' ' + CARET\n          });\n\n          args.item.appendChild(span);\n          args.item.setAttribute('aria-haspopup', 'true');\n          args.item.setAttribute('aria-expanded', 'false');\n\n          if (!_this.isMenu) {\n            args.item.removeAttribute('role');\n          }\n\n          args.item.classList.add('e-menu-caret-icon');\n        }\n\n        if (_this.isMenu && _this.template) {\n          args.item.setAttribute('id', args.curData[args.fields.id].toString());\n          args.item.removeAttribute('data-uid');\n        }\n\n        var eventArgs = {\n          item: args.curData,\n          element: args.item\n        };\n\n        _this.trigger('beforeItemRender', eventArgs);\n      }\n    };\n    var ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template);\n    ul.setAttribute('tabindex', '0');\n\n    if (this.isMenu) {\n      ul.setAttribute('role', 'menu');\n    }\n\n    return ul;\n  };\n\n  MenuBase.prototype.moverHandler = function (e) {\n    var wrapper = this.getWrapper();\n    var trgt = e.target;\n    var cli = this.getLI(trgt);\n\n    if (cli && closest(cli, '.e-' + this.getModuleName() + '-wrapper')) {\n      var fli = select('.' + FOCUSED, wrapper);\n\n      if (fli) {\n        fli.classList.remove(FOCUSED);\n      }\n\n      cli.classList.add(FOCUSED);\n\n      if (!this.showItemOnClick) {\n        this.clickHandler(e);\n      }\n    }\n\n    if (this.isMenu && trgt.parentElement !== wrapper && !cli && this.navIdx.length) {\n      this.closeMenu(null, e);\n    }\n  };\n\n  MenuBase.prototype.getField = function (propName, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var fieldName = this.fields[propName];\n    return typeof fieldName === 'string' ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();\n  };\n\n  MenuBase.prototype.getFields = function (level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    return {\n      id: this.getField('itemId', level),\n      iconCss: this.getField('iconCss', level),\n      text: this.getField('text', level),\n      url: this.getField('url', level),\n      child: this.getField('children', level),\n      separator: this.getField('separator', level)\n    };\n  };\n\n  MenuBase.prototype.hasField = function (items, field) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      if (items[i][field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MenuBase.prototype.clickHandler = function (e) {\n    if (this.isTapHold) {\n      this.isTapHold = false;\n    } else {\n      var wrapper = this.getWrapper();\n      var trgt = e.target;\n      var cli = this.getLI(trgt);\n      var cliWrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : null;\n      var isInstLI = cli && cliWrapper && wrapper.firstElementChild.id === cliWrapper.firstElementChild.id;\n\n      if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {\n        this.setLISelected(cli);\n        var navIdx = this.getIndex(cli.id, true);\n        var item = this.getItem(navIdx);\n        var eventArgs = {\n          element: cli,\n          item: item\n        };\n        this.trigger('select', eventArgs);\n      }\n\n      if (isInstLI && (e.type === 'mouseover' || Browser.isDevice || this.showItemOnClick)) {\n        var ul = void 0;\n\n        if (cli.classList.contains(HEADER)) {\n          ul = wrapper.children[this.navIdx.length - 1];\n          this.toggleAnimation(ul);\n          var sli = this.getLIByClass(ul, SELECTED);\n\n          if (sli) {\n            sli.classList.remove(SELECTED);\n          }\n\n          detach(cli.parentNode);\n          this.navIdx.pop();\n        } else {\n          if (!cli.classList.contains(SEPARATOR)) {\n            var showSubMenu = true;\n            var cul = cli.parentNode;\n            var cliIdx = this.getIdx(cul, cli);\n\n            if (this.isMenu || !Browser.isDevice) {\n              var culIdx = this.getIdx(wrapper, cul);\n\n              if (this.navIdx[culIdx] === cliIdx) {\n                showSubMenu = false;\n              }\n\n              if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || showSubMenu)) {\n                var sli = this.getLIByClass(cul, SELECTED);\n\n                if (sli) {\n                  sli.classList.remove(SELECTED);\n                }\n\n                this.closeMenu(culIdx + 1, e);\n              }\n            }\n\n            if (showSubMenu) {\n              var idx = this.navIdx.concat(cliIdx);\n              var item = this.getItem(idx);\n\n              if (item[this.getField('children', idx.length - 1)] && item[this.getField('children', idx.length - 1)].length) {\n                if (e.type === 'mouseover' || Browser.isDevice && this.isMenu) {\n                  this.setLISelected(cli);\n                }\n\n                cli.setAttribute('aria-expanded', 'true');\n                this.navIdx.push(cliIdx);\n\n                if (this.isMenu && !this.element.classList.contains('e-vertical') && this.navIdx.length < 2) {\n                  var collision = isCollide(cli, this.element);\n\n                  if (collision.length) {\n                    var boundRect = cli.getBoundingClientRect();\n                    this.element.scroll(collision.indexOf('right') > -1 ? boundRect.right : boundRect.left, 0);\n                  }\n                }\n\n                this.openMenu(cli, item, null, null, e);\n              } else {\n                if (e.type !== 'mouseover') {\n                  this.closeMenu(null, e);\n                }\n              }\n            }\n          }\n        }\n      } else {\n        if (trgt.tagName !== 'UL' || trgt.parentElement !== wrapper) {\n          if (!cli || !cli.querySelector('.' + CARET)) {\n            this.closeMenu(null, e);\n          }\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.setLISelected = function (li) {\n    var sli = this.getLIByClass(li.parentElement, SELECTED);\n\n    if (sli) {\n      sli.classList.remove(SELECTED);\n    }\n\n    li.classList.remove(FOCUSED);\n    li.classList.add(SELECTED);\n  };\n\n  MenuBase.prototype.getLIByClass = function (ul, classname) {\n    for (var i = 0, len = ul.children.length; i < len; i++) {\n      if (ul.children[i].classList.contains(classname)) {\n        return ul.children[i];\n      }\n    }\n\n    return null;\n  };\n\n  MenuBase.prototype.getItem = function (navIdx) {\n    navIdx = navIdx.slice();\n    var idx = navIdx.pop();\n    var items = this.getItems(navIdx);\n    return items[idx];\n  };\n\n  MenuBase.prototype.getItems = function (navIdx) {\n    var items = this.items;\n\n    for (var i = 0; i < navIdx.length; i++) {\n      items = items[navIdx[i]][this.getField('children', i)];\n    }\n\n    return items;\n  };\n\n  MenuBase.prototype.getIdx = function (ul, li, skipHdr) {\n    if (skipHdr === void 0) {\n      skipHdr = true;\n    }\n\n    var idx = Array.prototype.indexOf.call(ul.children, li);\n\n    if (skipHdr && ul.children[0].classList.contains(HEADER)) {\n      idx--;\n    }\n\n    return idx;\n  };\n\n  MenuBase.prototype.getLI = function (elem) {\n    if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {\n      return elem;\n    }\n\n    return closest(elem, 'li.e-menu-item');\n  };\n  /**\n   * Called internally if any of the property value changed\n   * @private\n   * @param {MenuBaseModel} newProp\n   * @param {MenuBaseModel} oldProp\n   * @returns void\n   */\n\n\n  MenuBase.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var wrapper = this.getWrapper();\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            wrapper.classList.remove(oldProp.cssClass);\n          }\n\n          if (newProp.cssClass) {\n            wrapper.classList.add(newProp.cssClass);\n          }\n\n          break;\n\n        case 'enableRtl':\n          wrapper.classList.toggle(RTL);\n          break;\n\n        case 'showItemOnClick':\n          this.unWireEvents();\n          this.showItemOnClick = newProp.showItemOnClick;\n          this.wireEvents();\n          break;\n\n        case 'items':\n          var idx = void 0;\n          var navIdx = void 0;\n          var item = void 0;\n          var keys = Object.keys(newProp.items);\n\n          for (var i = 0; i < keys.length; i++) {\n            navIdx = this.getChangedItemIndex(newProp, [], Number(keys[i]));\n\n            if (navIdx.length <= this.getWrapper().children.length) {\n              idx = navIdx.pop();\n              item = this.getItems(navIdx);\n              this.insertAfter([item[idx]], item[idx].text);\n              this.removeItem(item, navIdx, idx);\n            }\n\n            navIdx.length = 0;\n          }\n\n          break;\n      }\n    }\n  };\n\n  MenuBase.prototype.getChangedItemIndex = function (newProp, index, idx) {\n    index.push(idx);\n    var key = Object.keys(newProp.items[idx]).pop();\n\n    if (key === 'items') {\n      var item = newProp.items[idx];\n      this.getChangedItemIndex(item, index, Number(Object.keys(item.items).pop()));\n    } else {\n      if (key === 'isParentArray' && index.length > 1) {\n        index.pop();\n      }\n    }\n\n    return index;\n  };\n\n  MenuBase.prototype.removeItem = function (item, navIdx, idx) {\n    item.splice(idx, 1);\n    var uls = this.getWrapper().children;\n\n    if (navIdx.length < uls.length) {\n      detach(uls[navIdx.length].children[idx]);\n    }\n  };\n  /**\n   * Used to unwire the bind events.\n   * @private\n   */\n\n\n  MenuBase.prototype.unWireEvents = function () {\n    var wrapper = this.getWrapper();\n\n    if (this.target) {\n      var target = void 0;\n      var touchModule = void 0;\n      var targetElems = selectAll(this.target);\n\n      for (var i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (Browser.isIos) {\n          touchModule = getInstance(target, Touch);\n\n          if (touchModule) {\n            touchModule.destroy();\n          }\n        } else {\n          EventHandler.remove(target, 'contextmenu', this.cmenuHandler);\n        }\n      }\n\n      for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {\n        var parent_2 = _a[_i];\n        EventHandler.remove(parent_2, 'scroll', this.scrollHandler);\n      }\n    }\n\n    if (!Browser.isDevice) {\n      EventHandler.remove(this.isMenu ? document : wrapper, 'mouseover', this.moverHandler);\n      EventHandler.remove(document, 'mousedown', this.mouseDownHandler);\n    }\n\n    EventHandler.remove(document, 'click', this.delegateClickHandler);\n    var keyboardModule = getInstance(wrapper, KeyboardEvents);\n\n    if (keyboardModule) {\n      keyboardModule.destroy();\n    }\n\n    this.rippleFn();\n  };\n\n  MenuBase.prototype.toggleAnimation = function (ul, isMenuOpen) {\n    var _this = this;\n\n    if (isMenuOpen === void 0) {\n      isMenuOpen = true;\n    }\n\n    if (this.animationSettings.effect === 'None' || !isMenuOpen) {\n      this.end(ul, isMenuOpen);\n    } else {\n      this.animation.animate(ul, {\n        name: this.animationSettings.effect,\n        duration: this.animationSettings.duration,\n        timingFunction: this.animationSettings.easing,\n        begin: function begin(options) {\n          options.element.style.display = 'block';\n          options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';\n        },\n        end: function end(options) {\n          _this.end(options.element, isMenuOpen);\n        }\n      });\n    }\n  };\n\n  MenuBase.prototype.end = function (ul, isMenuOpen) {\n    if (isMenuOpen) {\n      ul.style.display = 'block';\n      ul.style.maxHeight = '';\n      var item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n      var eventArgs = {\n        element: ul,\n        parentItem: item,\n        items: item ? item.items : this.items\n      };\n      this.trigger('onOpen', eventArgs);\n\n      if (ul.querySelector('.' + FOCUSED)) {\n        ul.querySelector('.' + FOCUSED).focus();\n      } else {\n        var ele = void 0;\n        ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];\n\n        if (ele) {\n          ele.querySelector('.' + SELECTED).focus();\n        } else {\n          this.element.focus();\n        }\n      }\n    } else {\n      if (ul === this.element) {\n        var fli = this.getLIByClass(this.element, FOCUSED);\n\n        if (fli) {\n          fli.classList.remove(FOCUSED);\n        }\n\n        var sli = this.getLIByClass(this.element, SELECTED);\n\n        if (sli) {\n          sli.classList.remove(SELECTED);\n        }\n\n        ul.style.display = 'none';\n      } else {\n        detach(ul);\n      }\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @returns string\n   */\n\n\n  MenuBase.prototype.getPersistData = function () {\n    return '';\n  };\n  /**\n   * Get wrapper element.\n   * @returns Element\n   * @private\n   */\n\n\n  MenuBase.prototype.getWrapper = function () {\n    return closest(this.element, '.e-' + this.getModuleName() + '-wrapper');\n  };\n\n  MenuBase.prototype.getIndex = function (data, isUniqueId, items, nIndex, isCallBack, level) {\n    if (items === void 0) {\n      items = this.items;\n    }\n\n    if (nIndex === void 0) {\n      nIndex = [];\n    }\n\n    if (isCallBack === void 0) {\n      isCallBack = false;\n    }\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var item;\n    level = isCallBack ? level + 1 : 0;\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      item = items[i];\n\n      if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {\n        nIndex.push(i);\n        break;\n      } else if (item[this.getField('children', level)] && item[this.getField('children', level)].length) {\n        nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);\n\n        if (nIndex[nIndex.length - 1] === -1) {\n          if (i !== len - 1) {\n            nIndex.pop();\n          }\n        } else {\n          nIndex.unshift(i);\n          break;\n        }\n      } else {\n        if (i === len - 1) {\n          nIndex.push(-1);\n        }\n      }\n    }\n\n    return !isCallBack && nIndex[0] === -1 ? [] : nIndex;\n  };\n  /**\n   * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.\n   * @param items Text items that needs to be enabled/disabled.\n   * @param enable Set `true`/`false` to enable/disable the list items.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.enableItems = function (items, enable, isUniqueId) {\n    if (enable === void 0) {\n      enable = true;\n    }\n\n    var ul;\n    var idx;\n    var navIdx;\n    var disabled = DISABLED;\n    var wrapper = this.getWrapper();\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      idx = navIdx.pop();\n      ul = wrapper.children[navIdx.length];\n\n      if (ul) {\n        if (enable) {\n          if (this.isMenu) {\n            ul.children[idx].classList.remove(disabled);\n            ul.children[idx].removeAttribute('aria-disabled');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.remove(disabled);\n            } else {\n              ul.children[idx].classList.remove(disabled);\n            }\n          }\n        } else {\n          if (this.isMenu) {\n            ul.children[idx].classList.add(disabled);\n            ul.children[idx].setAttribute('aria-disabled', 'true');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.add(disabled);\n            } else {\n              ul.children[idx].classList.add(disabled);\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * This method is used to show the menu items in the Menu based on the items text.\n   * @param items Text items that needs to be shown.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.showItems = function (items, isUniqueId) {\n    this.showHideItems(items, false, isUniqueId);\n  };\n  /**\n   * This method is used to hide the menu items in the Menu based on the items text.\n   * @param items Text items that needs to be hidden.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.hideItems = function (items, isUniqueId) {\n    this.showHideItems(items, true, isUniqueId);\n  };\n\n  MenuBase.prototype.showHideItems = function (items, ishide, isUniqueId) {\n    var ul;\n    var index;\n    var navIdx;\n    var wrapper = this.getWrapper();\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      index = navIdx.pop();\n      ul = wrapper.children[navIdx.length];\n\n      if (ul) {\n        if (ishide) {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.add(HIDE);\n          } else {\n            ul.children[index].classList.add(HIDE);\n          }\n        } else {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.remove(HIDE);\n          } else {\n            ul.children[index].classList.remove(HIDE);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * It is used to remove the menu items from the Menu based on the items text.\n   * @param items Text items that needs to be removed.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.removeItems = function (items, isUniqueId) {\n    var idx;\n    var navIdx;\n    var iitems;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n      this.removeItem(iitems, navIdx, idx);\n    }\n  };\n  /**\n   * It is used to insert the menu items after the specified menu item text.\n   * @param items Items that needs to be inserted.\n   * @param text Text item after that the element to be inserted.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.insertAfter = function (items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId);\n  };\n  /**\n   * It is used to insert the menu items before the specified menu item text.\n   * @param items Items that needs to be inserted.\n   * @param text Text item before that the element to be inserted.\n   * @param isUniqueId - Set `true` if it is a unique id.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.insertBefore = function (items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId, false);\n  };\n\n  MenuBase.prototype.insertItems = function (items, text, isUniqueId, isAfter) {\n    if (isAfter === void 0) {\n      isAfter = true;\n    }\n\n    var li;\n    var idx;\n    var navIdx;\n    var iitems;\n    var menuitem;\n    var showIcon;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(text, isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n      menuitem = new MenuItem(iitems[0], 'items', items[i], true);\n      iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);\n      var uls = this.getWrapper().children;\n\n      if (navIdx.length < uls.length) {\n        idx = isAfter ? idx + 1 : idx;\n        showIcon = this.hasField(iitems, this.getField('iconCss', navIdx.length - 1));\n        li = this.createItems(iitems).children[idx];\n        uls[navIdx.length].insertBefore(li, uls[navIdx.length].children[idx]);\n      }\n    }\n  };\n  /**\n   * Destroys the widget.\n   * @returns void\n   */\n\n\n  MenuBase.prototype.destroy = function () {\n    var _this = this;\n\n    var wrapper = this.getWrapper();\n\n    if (wrapper) {\n      _super.prototype.destroy.call(this);\n\n      this.unWireEvents();\n\n      if (this.ngElement && !this.isMenu) {\n        this.ngElement.style.display = 'block';\n      } else {\n        this.closeMenu();\n        this.element.innerHTML = '';\n        ['top', 'left', 'display', 'z-index'].forEach(function (key) {\n          _this.element.style.removeProperty(key);\n        });\n        ['role', 'tabindex', 'class', 'style'].forEach(function (key) {\n          if (['class', 'style'].indexOf(key) === -1 || !_this.element.getAttribute(key)) {\n            _this.element.removeAttribute(key);\n          }\n\n          if (_this.isMenu && key === 'class' && _this.element.classList.contains('e-vertical')) {\n            _this.element.classList.remove('e-vertical');\n          }\n        });\n        wrapper.parentNode.insertBefore(this.element, wrapper);\n      }\n\n      if (this.isMenu && this.ngElement) {\n        detach(this.element);\n        wrapper.style.display = '';\n        wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');\n        wrapper.removeAttribute('data-ripple');\n      } else {\n        detach(wrapper);\n      }\n    }\n  };\n\n  __decorate([Event()], MenuBase.prototype, \"beforeItemRender\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"beforeOpen\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"onOpen\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"beforeClose\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"onClose\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"select\", void 0);\n\n  __decorate([Event()], MenuBase.prototype, \"created\", void 0);\n\n  __decorate([Property('')], MenuBase.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], MenuBase.prototype, \"showItemOnClick\", void 0);\n\n  __decorate([Property('')], MenuBase.prototype, \"target\", void 0);\n\n  __decorate([Property('')], MenuBase.prototype, \"filter\", void 0);\n\n  __decorate([Property(null)], MenuBase.prototype, \"template\", void 0);\n\n  __decorate([Complex({}, FieldSettings)], MenuBase.prototype, \"fields\", void 0);\n\n  __decorate([Collection([], MenuItem)], MenuBase.prototype, \"items\", void 0);\n\n  __decorate([Property({\n    duration: 400,\n    easing: 'ease',\n    effect: 'SlideDown'\n  })], MenuBase.prototype, \"animationSettings\", void 0);\n\n  MenuBase = __decorate([NotifyPropertyChanges], MenuBase);\n  return MenuBase;\n}(Component);\n\nexport { MenuBase };","map":null,"metadata":{},"sourceType":"module"}