{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isNullOrUndefined, createElement, prepend, extend, formatUnit } from '@syncfusion/ej2-base';\nimport { VerticalView } from './vertical-view';\nimport { TimelineEvent } from '../event-renderer/timeline-view';\nimport * as cls from '../base/css-constant';\nimport { getDateInMs, resetTime } from '../base/util';\nimport { TimelineHeaderRow } from './timeline-header-row';\n/**\n * timeline view\n */\n\nvar TimelineViews =\n/** @class */\nfunction (_super) {\n  __extends(TimelineViews, _super);\n\n  function TimelineViews(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.dateHeaderTemplate = '<span class=\"e-header-date e-navigate\">${getTimelineDate(date)}</span>';\n    _this.baseCssClass = 'e-timeline-view';\n    return _this;\n  }\n\n  TimelineViews.prototype.getLeftPanelElement = function () {\n    return this.element.querySelector('.' + cls.RESOURCE_COLUMN_WRAP_CLASS);\n  };\n\n  TimelineViews.prototype.scrollTopPanel = function (target) {\n    _super.prototype.scrollTopPanel.call(this, target);\n\n    this.scrollHeaderLabels(target);\n  };\n\n  TimelineViews.prototype.scrollToWorkHour = function () {\n    var start = this.parent.globalize.parseDate(this.parent.workHours.start, {\n      skeleton: 'Hm'\n    });\n    var currDateTime = this.isWorkDay(this.parent.selectedDate) && this.parent.workHours.highlight && !isNullOrUndefined(start) ? new Date(+this.parent.selectedDate).setHours(start.getHours(), start.getMinutes()) : new Date(+this.parent.selectedDate).setHours(0, 0, 0, 0);\n    var queryString = '[data-date=\"' + currDateTime + '\"]';\n    var firstWorkHourCell = this.element.querySelector(queryString);\n\n    if (firstWorkHourCell) {\n      this.getScrollableElement().scrollLeft = firstWorkHourCell.offsetLeft;\n    }\n  };\n\n  TimelineViews.prototype.scrollToHour = function (hour) {\n    var date = this.parent.globalize.parseDate(hour, {\n      skeleton: 'Hm'\n    });\n\n    if (isNullOrUndefined(date)) {\n      return;\n    }\n\n    this.getScrollableElement().scrollLeft = this.getLeftFromDateTime(null, date);\n  };\n\n  TimelineViews.prototype.generateColumnLevels = function () {\n    var levels = [];\n    var dateSlots = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n    levels.push(dateSlots);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.resourceBase.generateResourceLevels(dateSlots, !this.parent.uiStateValues.isGroupAdaptive);\n    }\n\n    var hourSlots = [];\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      hourSlots = this.generateTimeSlots(levels[levels.length - 1]);\n      levels.push(hourSlots);\n    }\n\n    if (this.parent.activeViewOptions.headerRows.length > 0) {\n      var renderGn = new TimelineHeaderRow(this.parent, this.renderDates);\n      levels = renderGn.generateColumnLevels(dateSlots, hourSlots);\n    }\n\n    return levels;\n  };\n\n  TimelineViews.prototype.generateTimeSlots = function (dateSlots) {\n    var _this = this;\n\n    var handler = function handler(r) {\n      r.type = r.first ? 'majorSlot' : 'minorSlot';\n      r.className = r.first ? ['e-time-slots'] : ['e-time-slots', cls.TIME_CELLS_CLASS];\n      r.workDays = _this.parent.activeViewOptions.workDays;\n      return r;\n    };\n\n    var timeSlotData = this.getTimeSlotRows(handler);\n    var slots = [];\n\n    for (var _i = 0, dateSlots_1 = dateSlots; _i < dateSlots_1.length; _i++) {\n      var data = dateSlots_1[_i];\n      data.colSpan = timeSlotData.length;\n      var tempTimeSlots = extend([], timeSlotData, null, true);\n\n      for (var _a = 0, tempTimeSlots_1 = tempTimeSlots; _a < tempTimeSlots_1.length; _a++) {\n        var slot = tempTimeSlots_1[_a];\n        slot.date = new Date(+resetTime(data.date) + getDateInMs(slot.date));\n        slots.push(slot);\n      }\n    }\n\n    return slots;\n  };\n\n  TimelineViews.prototype.changeCurrentTimePosition = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeCurrentTimeIndicatorElements();\n    var currentDateIndex = this.getCurrentTimeIndicatorIndex();\n    var left = this.getLeftFromDateTime(currentDateIndex, new Date());\n    var height = this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS).offsetHeight;\n    var headerWrap = this.element.querySelector('.' + cls.DATE_HEADER_WRAP_CLASS);\n    var contentWrap = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    contentWrap.appendChild(createElement('div', {\n      className: cls.CURRENT_TIMELINE_CLASS,\n      styles: (this.parent.enableRtl ? 'right' : 'left') + ':' + formatUnit(left) + '; height:' + formatUnit(height)\n    }));\n    var currentTimeEle = createElement('div', {\n      innerHTML: this.parent.getTimeString(new Date()),\n      className: cls.CURRENT_TIME_CLASS\n    });\n    headerWrap.appendChild(currentTimeEle);\n    currentTimeEle.style[this.parent.enableRtl ? 'right' : 'left'] = formatUnit(left - currentTimeEle.offsetWidth / 2);\n  };\n\n  TimelineViews.prototype.getLeftFromDateTime = function (currentDateIndex, date) {\n    var startHour = this.getStartHour();\n    var endHour = this.getEndHour();\n    var diffInDates = 0;\n    var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());\n\n    if (!isNullOrUndefined(currentDateIndex)) {\n      var end = endHour.getHours() === 0 ? 24 : endHour.getHours();\n\n      if (currentDateIndex[0] !== 0) {\n        diffInDates = currentDateIndex[0] * ((end - startHour.getHours()) * 60) + (endHour.getMinutes() - startHour.getMinutes());\n      }\n\n      diffInMinutes = diffInDates + diffInMinutes;\n    }\n\n    return diffInMinutes * this.getWorkCellWidth() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;\n  };\n\n  TimelineViews.prototype.getWorkCellWidth = function () {\n    return this.element.querySelector('.e-work-cells').offsetWidth;\n  };\n\n  TimelineViews.prototype.renderHeader = function () {\n    var tr = createElement('tr');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.resourceBase.renderResourceHeaderIndent(tr);\n    }\n\n    var dateTd = createElement('td');\n    dateTd.appendChild(this.renderDatesHeader());\n    tr.appendChild(dateTd);\n    prepend([tr], this.element.querySelector('tbody'));\n  };\n\n  TimelineViews.prototype.createAllDayRow = function (table, tdData) {// For current time indicator wrapper\n  };\n\n  TimelineViews.prototype.getCurrentTimeIndicatorIndex = function () {\n    var currentDateIndex = [];\n    var index = this.parent.getIndexOfDate(this.renderDates, resetTime(new Date()));\n\n    if (index >= 0) {\n      currentDateIndex.push(index);\n    }\n\n    return currentDateIndex;\n  };\n\n  TimelineViews.prototype.renderContent = function () {\n    var tr = createElement('tr');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      var resTd = createElement('td');\n      resTd.appendChild(this.parent.resourceBase.createResourceColumn());\n      tr.appendChild(resTd);\n    }\n\n    var workTd = createElement('td');\n    var wrap = this.renderContentArea();\n    wrap.appendChild(this.createEventTable(this.getRowCount()));\n    this.collapseRows(wrap);\n    workTd.appendChild(wrap);\n    tr.appendChild(workTd);\n    this.element.querySelector('tbody').appendChild(tr);\n  };\n\n  TimelineViews.prototype.getRowCount = function () {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      return this.parent.resourceBase.lastResourceLevel.length;\n    }\n\n    return 1;\n  };\n\n  TimelineViews.prototype.getResourceTdData = function (i, tdData) {\n    var resLevel = this.parent.resourceBase.lastResourceLevel[i];\n    var resSHr = resLevel.resourceData[resLevel.resource.startHourField] || this.parent.workHours.start;\n    var resEHr = resLevel.resourceData[resLevel.resource.endHourField] || this.parent.workHours.end;\n    tdData.startHour = this.parent.globalize.parseDate(resSHr, {\n      skeleton: 'Hm'\n    });\n    tdData.endHour = this.parent.globalize.parseDate(resEHr, {\n      skeleton: 'Hm'\n    });\n    tdData.workDays = resLevel.resourceData[resLevel.resource.workDaysField] || this.parent.workDays;\n    tdData.className = resLevel.className;\n    tdData.groupIndex = resLevel.groupIndex;\n    tdData.groupOrder = resLevel.groupOrder;\n    return tdData;\n  };\n\n  TimelineViews.prototype.renderContentTable = function (table) {\n    var tr = createElement('tr', {\n      attrs: {\n        role: 'row'\n      }\n    });\n    var tBody = table.querySelector('tbody');\n    var td = createElement('td', {\n      attrs: {\n        role: 'gridcell',\n        'aria-selected': 'false'\n      }\n    });\n    var trCount = this.getRowCount();\n\n    for (var i = 0; i < trCount; i++) {\n      var ntr = tr.cloneNode();\n\n      for (var _i = 0, _a = this.colLevels[this.colLevels.length - 1]; _i < _a.length; _i++) {\n        var tdData = _a[_i];\n\n        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n          tdData = this.getResourceTdData(i, tdData);\n        }\n\n        var ntd = this.createContentTd(tdData, tdData, td);\n        ntr.appendChild(ntd);\n      }\n\n      tBody.appendChild(ntr);\n    }\n\n    table.appendChild(tBody);\n  };\n\n  TimelineViews.prototype.getContentTdClass = function (r) {\n    return r.first || !this.parent.activeViewOptions.timeScale.enable ? [cls.WORK_CELLS_CLASS] : [cls.WORK_CELLS_CLASS, cls.ALTERNATE_CELLS_CLASS];\n  };\n\n  TimelineViews.prototype.renderEvents = function () {\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      var appointment = new TimelineEvent(this.parent, 'hour');\n      appointment.renderAppointments();\n    } else {\n      var appointment = new TimelineEvent(this.parent, 'day');\n      appointment.renderAppointments();\n    }\n  };\n\n  TimelineViews.prototype.getModuleName = function () {\n    return 'timelineViews';\n  };\n\n  return TimelineViews;\n}(VerticalView);\n\nexport { TimelineViews };","map":null,"metadata":{},"sourceType":"module"}