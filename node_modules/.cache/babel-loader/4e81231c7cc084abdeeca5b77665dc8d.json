{"ast":null,"code":"import { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { EventTooltip } from '../popups/event-tooltip';\nimport * as events from '../base/constant';\nimport * as cls from '../base/css-constant';\n/**\n * Schedule DOM rendering\n */\n\nvar Render =\n/** @class */\nfunction () {\n  /**\n   * Constructor for render\n   */\n  function Render(parent) {\n    this.parent = parent;\n  }\n\n  Render.prototype.render = function (viewName, isDataRefresh) {\n    if (isDataRefresh === void 0) {\n      isDataRefresh = true;\n    }\n\n    this.initializeLayout(viewName);\n\n    if (isDataRefresh) {\n      this.refreshDataManager();\n    }\n  };\n\n  Render.prototype.initializeLayout = function (viewName) {\n    if (this.parent.activeView) {\n      this.parent.activeView.removeEventListener();\n      this.parent.activeView.destroy();\n    }\n\n    switch (viewName) {\n      case 'Day':\n        this.parent.activeView = this.parent.dayModule;\n        break;\n\n      case 'Week':\n        this.parent.activeView = this.parent.weekModule;\n        break;\n\n      case 'WorkWeek':\n        this.parent.activeView = this.parent.workWeekModule;\n        break;\n\n      case 'Month':\n        this.parent.activeView = this.parent.monthModule;\n        break;\n\n      case 'Agenda':\n        this.parent.activeView = this.parent.agendaModule;\n        break;\n\n      case 'MonthAgenda':\n        this.parent.activeView = this.parent.monthAgendaModule;\n        break;\n\n      case 'TimelineDay':\n        this.parent.activeView = this.parent.timelineViewsModule;\n        this.parent.activeView.viewClass = 'e-timeline-day-view';\n        break;\n\n      case 'TimelineWorkWeek':\n        this.parent.activeView = this.parent.timelineViewsModule;\n        this.parent.activeView.viewClass = 'e-timeline-work-week-view';\n        break;\n\n      case 'TimelineWeek':\n        this.parent.activeView = this.parent.timelineViewsModule;\n        this.parent.activeView.viewClass = 'e-timeline-week-view';\n        break;\n\n      case 'TimelineMonth':\n        this.parent.activeView = this.parent.timelineMonthModule;\n        break;\n    }\n\n    if (isNullOrUndefined(this.parent.activeView)) {\n      var firstView = this.parent.viewCollections[0].option;\n\n      if (firstView) {\n        this.parent.setProperties({\n          currentView: firstView\n        }, true);\n\n        if (this.parent.headerModule) {\n          this.parent.headerModule.updateActiveView();\n          this.parent.headerModule.setCalendarView();\n        }\n\n        return this.initializeLayout(firstView);\n      }\n\n      throw Error('Inject required modules');\n    }\n\n    this.updateLabelText(viewName);\n    this.parent.activeView.addEventListener();\n    this.parent.activeView.getRenderDates();\n    this.parent.uiStateValues.isGroupAdaptive = this.parent.isAdaptive && this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.enableCompactView;\n    this.parent.activeView.renderLayout(cls.CURRENT_PANEL_CLASS);\n\n    if ((this.parent.eventSettings.enableTooltip || this.parent.timelineViewsModule && this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.headerTooltipTemplate) && isNullOrUndefined(this.parent.eventTooltip)) {\n      this.parent.eventTooltip = new EventTooltip(this.parent);\n    }\n\n    if (this.parent.headerModule) {\n      this.parent.headerModule.updateDateRange(this.parent.activeView.getDateRangeText());\n    }\n  };\n\n  Render.prototype.updateLabelText = function (view) {\n    var content = this.parent.activeView.getLabelText(view);\n    this.parent.element.setAttribute('role', 'main');\n    this.parent.element.setAttribute('aria-label', content);\n  };\n\n  Render.prototype.refreshDataManager = function () {\n    var _this = this;\n\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    var dataManager = this.parent.dataModule.getData(this.parent.dataModule.generateQuery(start, end));\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e);\n    }).catch(function (e) {\n      return _this.dataManagerFailure(e);\n    });\n  };\n\n  Render.prototype.dataManagerSuccess = function (e) {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.trigger(events.dataBinding, e);\n    this.parent.eventsData = extend([], e.result, null, true);\n    var processed = this.parent.eventBase.processData(this.parent.eventsData);\n    this.parent.notify(events.dataReady, {\n      processedData: processed\n    });\n    this.parent.trigger(events.dataBound);\n    this.parent.hideSpinner();\n  };\n\n  Render.prototype.dataManagerFailure = function (e) {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.trigger(events.actionFailure, {\n      error: e\n    });\n    this.parent.hideSpinner();\n  };\n\n  return Render;\n}();\n\nexport { Render };","map":null,"metadata":{},"sourceType":"module"}