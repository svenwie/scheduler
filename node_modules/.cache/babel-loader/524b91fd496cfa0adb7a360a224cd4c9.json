{"ast":null,"code":"import { addClass, createElement, compile, extend, isNullOrUndefined, closest } from '@syncfusion/ej2-base';\nimport { formatUnit, remove, removeClass } from '@syncfusion/ej2-base';\nimport * as cls from '../base/css-constant';\n/**\n * Base class for the common drag and resize related actions\n */\n\nvar ActionBase =\n/** @class */\nfunction () {\n  function ActionBase(parent) {\n    this.parent = parent;\n    this.actionObj = {\n      X: 0,\n      Y: 0,\n      groupIndex: 0,\n      cellWidth: 0,\n      cellHeight: 0,\n      slotInterval: 0,\n      interval: 0,\n      actionIndex: 0,\n      cloneElement: [],\n      originalElement: [],\n      action: null,\n      isAllDay: null,\n      excludeSelectors: null\n    };\n    this.scrollArgs = {\n      element: null,\n      width: 0,\n      height: 0\n    };\n    this.resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    this.scrollEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n  }\n\n  ActionBase.prototype.getChangedData = function () {\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    eventObj[this.parent.eventFields.startTime] = this.actionObj.start;\n    eventObj[this.parent.eventFields.endTime] = this.actionObj.end;\n\n    if (!isNullOrUndefined(this.actionObj.isAllDay)) {\n      eventObj[this.parent.eventFields.isAllDay] = this.actionObj.isAllDay;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var originalElement = this.getOriginalElement(this.actionObj.element);\n      var indexCol = originalElement.map(function (element) {\n        return parseInt(element.getAttribute('data-group-index'), 10);\n      });\n\n      if (indexCol.indexOf(this.actionObj.groupIndex) === -1) {\n        var cloneIndex_1 = parseInt(this.actionObj.clone.getAttribute('data-group-index'), 10);\n        indexCol = indexCol.filter(function (index) {\n          return index !== cloneIndex_1;\n        });\n        indexCol.push(this.actionObj.groupIndex);\n        this.parent.resourceBase.getResourceData(eventObj, this.actionObj.groupIndex, indexCol);\n      }\n    }\n\n    return eventObj;\n  };\n\n  ActionBase.prototype.saveChangedData = function (eventArgs) {\n    this.parent.activeEventData.event = this.actionObj.event;\n    this.parent.currentAction = 'Save';\n    var eventObj = eventArgs.data;\n    var isSameResource = this.parent.activeViewOptions.group.resources.length > 0 ? parseInt(this.actionObj.element.getAttribute('data-group-index'), 10) === this.actionObj.groupIndex : true;\n\n    if (+eventObj[this.parent.eventFields.startTime] === +this.actionObj.event[this.parent.eventFields.startTime] && +eventObj[this.parent.eventFields.endTime] === +this.actionObj.event[this.parent.eventFields.endTime] && isSameResource) {\n      return;\n    }\n\n    if (eventObj[this.parent.eventFields.startTimezone] || eventObj[this.parent.eventFields.endTimezone]) {\n      this.parent.eventBase.timezoneConvert(eventObj);\n    }\n\n    var currentAction;\n\n    if (eventObj[this.parent.eventFields.recurrenceRule] && eventObj[this.parent.eventFields.id] === eventObj[this.parent.eventFields.recurrenceID]) {\n      eventObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();\n      currentAction = 'EditOccurrence';\n    }\n\n    this.parent.crudModule.saveEvent(eventObj, currentAction);\n  };\n\n  ActionBase.prototype.calculateIntervalTime = function (date) {\n    var intervalTime = new Date(+date);\n    intervalTime.setMinutes(Math.floor(intervalTime.getMinutes() / this.actionObj.interval) * this.actionObj.interval);\n    return intervalTime;\n  };\n\n  ActionBase.prototype.getContentAreaDimension = function () {\n    var viewElement = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    var trElement = [].slice.call(viewElement.querySelector('tr').children);\n\n    if (!this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.isAdaptive) {\n      trElement = this.getResourceElements(trElement);\n    }\n\n    var leftOffset = trElement[0].getBoundingClientRect();\n    var rightOffset = trElement.slice(-1)[0].getBoundingClientRect();\n    var viewDimension = {\n      bottom: viewElement.scrollHeight - 5,\n      left: this.parent.enableRtl ? rightOffset.left : leftOffset.left,\n      right: this.parent.enableRtl ? leftOffset.right : rightOffset.right,\n      top: 0\n    };\n    return viewDimension;\n  };\n\n  ActionBase.prototype.getPageCoordinates = function (e) {\n    var eventArgs = e.event;\n    return eventArgs && eventArgs.changedTouches ? eventArgs.changedTouches[0] : e.changedTouches ? e.changedTouches[0] : eventArgs || e;\n  };\n\n  ActionBase.prototype.getIndex = function (index) {\n    var contentElements = [].slice.call(this.parent.getContentTable().querySelector('tr').children);\n    var indexes = {\n      minIndex: 0,\n      maxIndex: contentElements.length - 1\n    };\n\n    if (this.actionObj.action === 'resize' && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeView.isTimelineView()) {\n      var groupElements = this.getResourceElements(contentElements);\n      indexes.minIndex = groupElements[0].cellIndex;\n      indexes.maxIndex = groupElements.slice(-1)[0].cellIndex;\n    }\n\n    if (index < indexes.minIndex) {\n      index = indexes.minIndex;\n    }\n\n    if (index > indexes.maxIndex) {\n      index = indexes.maxIndex;\n    }\n\n    return index;\n  };\n\n  ActionBase.prototype.updateTimePosition = function (date) {\n    for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {\n      var cloneElement = _a[_i];\n      var timeElement = cloneElement.querySelector('.' + cls.APPOINTMENT_TIME);\n\n      if (timeElement) {\n        timeElement.innerHTML = this.parent.getTimeString(this.actionObj.start) + ' - ' + this.parent.getTimeString(this.actionObj.end);\n      }\n    }\n\n    if (!this.parent.activeViewOptions.timeScale.enable || !this.parent.isAdaptive || this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineMonth') {\n      return;\n    }\n\n    var timeIndicator = this.parent.element.querySelector('.' + cls.CLONE_TIME_INDICATOR_CLASS);\n\n    if (!timeIndicator) {\n      timeIndicator = createElement('div', {\n        className: cls.CLONE_TIME_INDICATOR_CLASS\n      });\n      var wrapperClass = this.parent.activeView.isTimelineView() ? cls.DATE_HEADER_WRAP_CLASS : cls.TIME_CELLS_WRAP_CLASS;\n      this.parent.element.querySelector('.' + wrapperClass).appendChild(timeIndicator);\n    }\n\n    timeIndicator.innerHTML = this.parent.getTimeString(date);\n    var offsetValue = 0;\n\n    if (this.parent.activeView.isTimelineView()) {\n      if (this.parent.enableRtl) {\n        var rightValue = parseInt(this.actionObj.clone.style.right, 10);\n        offsetValue = this.actionObj.action === 'drag' || this.resizeEdges.left ? rightValue + this.actionObj.clone.offsetWidth : rightValue;\n        timeIndicator.style.right = formatUnit(offsetValue);\n      } else {\n        var leftValue = parseInt(this.actionObj.clone.style.left, 10);\n        offsetValue = this.actionObj.action === 'drag' || this.resizeEdges.left ? leftValue : leftValue + this.actionObj.clone.offsetWidth;\n        timeIndicator.style.left = formatUnit(offsetValue);\n      }\n    } else {\n      offsetValue = this.actionObj.action === 'drag' || this.resizeEdges.top ? this.actionObj.clone.offsetTop : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight;\n      timeIndicator.style.top = formatUnit(offsetValue);\n    }\n  };\n\n  ActionBase.prototype.getResourceElements = function (table) {\n    var _this = this;\n\n    return table.filter(function (element) {\n      return parseInt(element.getAttribute('data-group-index'), 10) === _this.actionObj.groupIndex;\n    });\n  };\n\n  ActionBase.prototype.getOriginalElement = function (element) {\n    var originalElement;\n    var guid = element.getAttribute('data-guid');\n\n    if (this.parent.activeView.isTimelineView()) {\n      originalElement = [].slice.call(this.parent.element.querySelectorAll('[data-guid=\"' + guid + '\"]'));\n    } else {\n      var tr = closest(element, 'tr');\n      originalElement = [].slice.call(tr.querySelectorAll('[data-guid=\"' + guid + '\"]'));\n    }\n\n    return originalElement;\n  };\n\n  ActionBase.prototype.createCloneElement = function (element) {\n    var cloneElement = compile(element.outerHTML)({})[0];\n    var cloneClassLists = [cls.CLONE_ELEMENT_CLASS];\n    cloneClassLists.push(this.actionObj.action === 'drag' ? cls.DRAG_CLONE_CLASS : cls.RESIZE_CLONE_CLASS);\n\n    if (this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineMonth') {\n      cloneClassLists.push(cls.MONTH_CLONE_ELEMENT_CLASS);\n    }\n\n    addClass([cloneElement], cloneClassLists);\n    addClass([element], cls.EVENT_ACTION_CLASS);\n    element.parentElement.appendChild(cloneElement);\n    cloneElement.style.width = formatUnit(cloneElement.offsetWidth - 2);\n    return cloneElement;\n  };\n\n  ActionBase.prototype.removeCloneElement = function () {\n    this.actionObj.originalElement.forEach(function (element) {\n      return removeClass([element], cls.EVENT_ACTION_CLASS);\n    });\n    this.actionObj.originalElement = [];\n    this.actionObj.cloneElement.forEach(function (element) {\n      return remove(element);\n    });\n    this.actionObj.cloneElement = [];\n    var timeIndicator = this.parent.element.querySelector('.' + cls.CLONE_TIME_INDICATOR_CLASS);\n\n    if (timeIndicator) {\n      remove(timeIndicator);\n    }\n  };\n\n  ActionBase.prototype.getCursorElement = function (e) {\n    var pages = this.getPageCoordinates(e);\n    return document.elementFromPoint(pages.clientX, pages.clientY);\n  };\n\n  ActionBase.prototype.autoScroll = function () {\n    var parent = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    var yIsScrollable = parent.offsetHeight <= parent.scrollHeight;\n    var xIsScrollable = parent.offsetWidth <= parent.scrollWidth;\n    var yInBounds = yIsScrollable && parent.scrollTop >= 0 && parent.scrollTop + parent.offsetHeight <= parent.scrollHeight;\n    var xInBounds = xIsScrollable && parent.scrollLeft >= 0 && parent.scrollLeft + parent.offsetWidth <= parent.scrollWidth;\n\n    if (yInBounds && (this.scrollEdges.top || this.scrollEdges.bottom)) {\n      parent.scrollTop += this.scrollEdges.top ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;\n\n      if (this.actionObj.action === 'resize') {\n        this.actionObj.Y += this.scrollEdges.top ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;\n      }\n    }\n\n    if (xInBounds && (this.scrollEdges.left || this.scrollEdges.right)) {\n      parent.scrollLeft += this.scrollEdges.left ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;\n\n      if (this.actionObj.action === 'resize') {\n        this.actionObj.X += this.scrollEdges.left ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;\n      }\n    }\n  };\n\n  ActionBase.prototype.autoScrollValidation = function (e) {\n    if (!this.actionObj.scroll.enable || closest(e.target, '.' + cls.DATE_HEADER_WRAP_CLASS)) {\n      return false;\n    }\n\n    var pages = this.getPageCoordinates(e);\n    var allowScroll = false;\n    var autoScrollDistance = 30;\n    this.scrollEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    var viewBoundaries = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS).getBoundingClientRect();\n\n    if (pages.pageY < viewBoundaries.top + autoScrollDistance) {\n      allowScroll = true;\n      this.scrollEdges.top = true;\n    }\n\n    if (pages.pageY > viewBoundaries.bottom - autoScrollDistance) {\n      allowScroll = true;\n      this.scrollEdges.bottom = true;\n    }\n\n    if (pages.pageX < viewBoundaries.left + autoScrollDistance) {\n      allowScroll = true;\n      this.scrollEdges.left = true;\n    }\n\n    if (pages.pageX > viewBoundaries.right - autoScrollDistance) {\n      allowScroll = true;\n      this.scrollEdges.right = true;\n    }\n\n    return allowScroll;\n  };\n\n  ActionBase.prototype.actionClass = function (type) {\n    if (type === 'addClass') {\n      addClass([this.parent.element], cls.EVENT_ACTION_CLASS);\n    } else {\n      removeClass([this.parent.element], cls.EVENT_ACTION_CLASS);\n    }\n  };\n  /**\n   * To destroy the action base module.\n   * @return {void}\n   * @private\n   */\n\n\n  ActionBase.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.actionObj = {};\n    this.scrollArgs = {};\n    this.resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    this.scrollEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n  };\n\n  return ActionBase;\n}();\n\nexport { ActionBase };","map":null,"metadata":{},"sourceType":"module"}