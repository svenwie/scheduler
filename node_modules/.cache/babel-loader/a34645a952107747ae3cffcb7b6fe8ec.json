{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Property, Event, Animation, Collection } from '@syncfusion/ej2-base';\nimport { EventHandler, Browser, Internationalization, getDefaultDateObject, cldrData, L10n } from '@syncfusion/ej2-base';\nimport { getValue, compile, extend, isNullOrUndefined, NotifyPropertyChanges, Complex } from '@syncfusion/ej2-base';\nimport { removeClass, addClass, classList } from '@syncfusion/ej2-base';\nimport { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { HeaderRenderer } from '../renderer/header-renderer';\nimport { Scroll } from '../actions/scroll';\nimport { ScheduleTouch } from '../actions/touch';\nimport { KeyboardInteraction } from '../actions/keyboard';\nimport { Data } from '../actions/data';\nimport { EventBase } from '../event-renderer/event-base';\nimport { QuickPopups } from '../popups/quick-popups';\nimport { EventTooltip } from '../popups/event-tooltip';\nimport { EventWindow } from '../popups/event-window';\nimport { Render } from '../renderer/renderer';\nimport { WorkHours } from '../models/work-hours';\nimport { TimeScale } from '../models/time-scale';\nimport { QuickInfoTemplates } from '../models/quick-info-templates';\nimport { HeaderRows } from '../models/header-rows';\nimport { Crud } from '../actions/crud';\nimport { EventSettings } from '../models/event-settings';\nimport { Group } from '../models/group';\nimport { Resources } from '../models/resources';\nimport { ResourceBase } from '../base/resource';\nimport * as events from '../base/constant';\nimport * as cls from '../base/css-constant';\nimport * as util from '../base/util';\n/**\n * Represents the Schedule component that displays a list of events scheduled against specific date and timings,\n * thus helping us to plan and manage it properly.\n * ```html\n * <div id=\"schedule\"></div>\n * ```\n * ```typescript\n * <script>\n *   var scheduleObj = new Schedule();\n *   scheduleObj.appendTo(\"#schedule\");\n * </script>\n * ```\n */\n\nvar Schedule =\n/** @class */\nfunction (_super) {\n  __extends(Schedule, _super);\n  /**\n   * Constructor for creating the Schedule widget\n   * @hidden\n   */\n\n\n  function Schedule(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Core method that initializes the control rendering.\n   * @private\n   */\n\n\n  Schedule.prototype.render = function () {\n    var addClasses = [];\n    var removeClasses = [];\n    addClasses.push(cls.ROOT);\n\n    if (this.enableRtl) {\n      addClasses.push(cls.RTL);\n    } else {\n      removeClasses.push(cls.RTL);\n    }\n\n    if (this.isAdaptive) {\n      addClasses.push(cls.DEVICE_CLASS);\n    } else {\n      removeClasses.push(cls.DEVICE_CLASS);\n    }\n\n    if (this.cssClass) {\n      addClasses.push(this.cssClass);\n    }\n\n    classList(this.element, addClasses, removeClasses);\n    this.validateDate();\n    this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n    this.editorTemplateFn = this.templateParser(this.editorTemplate);\n    this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n    this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n    this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n    createSpinner({\n      target: this.element\n    });\n    this.scrollModule = new Scroll(this);\n    this.scrollModule.setWidth();\n    this.scrollModule.setHeight();\n    this.renderModule = new Render(this);\n    this.eventBase = new EventBase(this);\n    this.initializeDataModule();\n    this.initializeResources();\n  };\n\n  Schedule.prototype.initializeResources = function (isSetModel) {\n    if (isSetModel === void 0) {\n      isSetModel = false;\n    }\n\n    if (this.resources.length > 0) {\n      this.resourceBase = new ResourceBase(this);\n      this.resourceBase.bindResourcesData(isSetModel);\n    } else {\n      this.resourceBase = null;\n      this.renderElements(isSetModel);\n\n      if (isSetModel) {\n        this.eventWindow.refresh();\n      }\n    }\n  };\n\n  Schedule.prototype.renderElements = function (isLayoutOnly) {\n    if (isLayoutOnly) {\n      this.initializeView(this.currentView);\n      return;\n    }\n\n    if (this.showHeaderBar) {\n      this.headerModule = new HeaderRenderer(this);\n    }\n\n    this.element.appendChild(this.createElement('div', {\n      className: cls.TABLE_CONTAINER_CLASS\n    }));\n\n    if (Browser.isDevice || Browser.isTouch) {\n      this.scheduleTouchModule = new ScheduleTouch(this);\n    }\n\n    this.initializeView(this.currentView);\n    this.initializePopups();\n    this.wireEvents();\n  };\n\n  Schedule.prototype.validateDate = function () {\n    // persist the selected date value\n    this.setProperties({\n      selectedDate: new Date('' + this.selectedDate)\n    }, true);\n  };\n\n  Schedule.prototype.getViewIndex = function (viewName) {\n    for (var item = 0; item < this.viewCollections.length; item++) {\n      var checkIndex = this.viewCollections[item].option;\n\n      if (checkIndex === viewName) {\n        return item;\n      }\n    }\n\n    return -1;\n  };\n\n  Schedule.prototype.setViewOptions = function (isModuleLoad) {\n    if (isModuleLoad === void 0) {\n      isModuleLoad = false;\n    }\n\n    this.viewOptions = {};\n    this.viewCollections = [];\n    var viewName;\n    var selectedView;\n    var count = 0;\n    this.viewIndex = -1;\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var view = _a[_i];\n      var isOptions = typeof view === 'string' ? false : true;\n\n      if (typeof view === 'string') {\n        viewName = view;\n\n        if (this.currentView === viewName) {\n          selectedView = viewName;\n          this.viewIndex = count;\n        }\n      } else {\n        viewName = view.option;\n\n        if (view.isSelected) {\n          selectedView = viewName;\n          this.viewIndex = count;\n        }\n      }\n\n      var obj = extend({\n        option: viewName\n      }, isOptions ? view : {});\n      var fieldViewName = viewName.charAt(0).toLowerCase() + viewName.slice(1);\n      this.viewCollections.push(obj);\n\n      if (isNullOrUndefined(this.viewOptions[fieldViewName])) {\n        this.viewOptions[fieldViewName] = [obj];\n      } else {\n        this.viewOptions[fieldViewName].push(obj);\n      }\n\n      count++;\n    }\n\n    if (!isModuleLoad && selectedView) {\n      this.setProperties({\n        currentView: selectedView\n      }, true);\n    }\n\n    if (this.viewIndex === -1) {\n      var currentIndex = this.getViewIndex(this.currentView);\n      this.viewIndex = currentIndex === -1 ? 0 : currentIndex;\n    }\n  };\n\n  Schedule.prototype.getActiveViewOptions = function () {\n    var timeScale = {\n      enable: this.timeScale.enable,\n      interval: this.timeScale.interval,\n      slotCount: this.timeScale.slotCount,\n      majorSlotTemplate: this.timeScale.majorSlotTemplate,\n      minorSlotTemplate: this.timeScale.minorSlotTemplate\n    };\n    var group = {\n      byDate: this.group.byDate,\n      byGroupID: this.group.byGroupID,\n      allowGroupEdit: this.group.allowGroupEdit,\n      resources: this.group.resources,\n      headerTooltipTemplate: this.group.headerTooltipTemplate,\n      enableCompactView: this.group.enableCompactView\n    };\n    var scheduleOptions = {\n      dateFormat: this.dateFormat,\n      endHour: this.endHour,\n      isSelected: false,\n      option: null,\n      readonly: this.readonly,\n      startHour: this.startHour,\n      allowVirtualScrolling: true,\n      cellTemplate: this.cellTemplate,\n      eventTemplate: this.eventSettings.template,\n      dateHeaderTemplate: this.dateHeaderTemplate,\n      resourceHeaderTemplate: this.resourceHeaderTemplate,\n      workDays: this.workDays,\n      showWeekend: this.showWeekend,\n      showWeekNumber: this.showWeekNumber,\n      displayName: null,\n      interval: 1,\n      timeScale: timeScale,\n      group: group,\n      headerRows: this.headerRows\n    };\n    return extend(scheduleOptions, this.viewCollections[this.viewIndex], undefined, true);\n  };\n\n  Schedule.prototype.initializeDataModule = function () {\n    this.eventFields = {\n      id: this.eventSettings.fields.id,\n      subject: this.eventSettings.fields.subject.name,\n      startTime: this.eventSettings.fields.startTime.name,\n      endTime: this.eventSettings.fields.endTime.name,\n      startTimezone: this.eventSettings.fields.startTimezone.name,\n      endTimezone: this.eventSettings.fields.endTimezone.name,\n      location: this.eventSettings.fields.location.name,\n      description: this.eventSettings.fields.description.name,\n      isAllDay: this.eventSettings.fields.isAllDay.name,\n      recurrenceID: this.eventSettings.fields.recurrenceID.name,\n      recurrenceRule: this.eventSettings.fields.recurrenceRule.name,\n      recurrenceException: this.eventSettings.fields.recurrenceException.name\n    };\n    this.editorTitles = {\n      subject: this.eventSettings.fields.subject.title || this.localeObj.getConstant('title'),\n      startTime: this.eventSettings.fields.startTime.title || this.localeObj.getConstant('start'),\n      endTime: this.eventSettings.fields.endTime.title || this.localeObj.getConstant('end'),\n      isAllDay: this.eventSettings.fields.isAllDay.title || this.localeObj.getConstant('allDay'),\n      startTimezone: this.eventSettings.fields.startTimezone.title || this.localeObj.getConstant('startTimezone'),\n      endTimezone: this.eventSettings.fields.endTimezone.title || this.localeObj.getConstant('endTimezone'),\n      location: this.eventSettings.fields.location.title || this.localeObj.getConstant('location'),\n      description: this.eventSettings.fields.description.title || this.localeObj.getConstant('description'),\n      recurrenceRule: this.eventSettings.fields.recurrenceRule.title || this.localeObj.getConstant('repeat')\n    };\n    this.dataModule = new Data(this.eventSettings.dataSource, this.eventSettings.query);\n    this.crudModule = new Crud(this);\n  };\n\n  Schedule.prototype.initializeView = function (viewName) {\n    this.showSpinner();\n    this.activeViewOptions = this.getActiveViewOptions();\n\n    if (this.resourceBase) {\n      this.resourceBase.setResourceCollection();\n    }\n\n    this.initializeTemplates();\n    this.renderModule.render(viewName);\n  };\n\n  Schedule.prototype.initializeTemplates = function () {\n    this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);\n    this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n    this.majorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.majorSlotTemplate);\n    this.minorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.minorSlotTemplate);\n    this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n    this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);\n    this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);\n  };\n\n  Schedule.prototype.initializePopups = function () {\n    this.eventWindow = new EventWindow(this);\n    this.quickPopup = new QuickPopups(this);\n  };\n\n  Schedule.prototype.getDayNames = function (type) {\n    var culShortNames = [];\n    var cldrObj;\n\n    if (this.locale === 'en' || this.locale === 'en-US') {\n      cldrObj = getValue('days.stand-alone.' + type, getDefaultDateObject());\n    } else {\n      cldrObj = getValue('main.' + '' + this.locale + '.dates.calendars.gregorian.days.format.' + type, cldrData);\n    }\n\n    for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {\n      var obj = _a[_i];\n      culShortNames.push(getValue(obj, cldrObj));\n    }\n\n    return culShortNames;\n  };\n\n  Schedule.prototype.setCldrTimeFormat = function () {\n    if (this.locale === 'en' || this.locale === 'en-US') {\n      this.timeFormat = getValue('timeFormats.short', getDefaultDateObject());\n    } else {\n      this.timeFormat = getValue('main.' + '' + this.locale + '.dates.calendars.gregorian.timeFormats.short', cldrData);\n    }\n  };\n\n  Schedule.prototype.getTimeString = function (date) {\n    return this.globalize.formatDate(date, {\n      format: this.timeFormat,\n      type: 'time'\n    });\n  };\n\n  Schedule.prototype.changeView = function (view, event, muteOnChange, index) {\n    if (isNullOrUndefined(index)) {\n      index = this.getViewIndex(view);\n    }\n\n    if (!muteOnChange && index === this.viewIndex || index < 0) {\n      return;\n    }\n\n    this.viewIndex = index;\n    var args = {\n      requestType: 'viewNavigate',\n      cancel: false,\n      event: event\n    };\n    this.trigger(events.actionBegin, args);\n\n    if (args.cancel) {\n      return;\n    }\n\n    var navArgs = {\n      action: 'view',\n      cancel: false,\n      previousView: this.currentView,\n      currentView: view\n    };\n    this.trigger(events.navigating, navArgs);\n\n    if (navArgs.cancel) {\n      return;\n    }\n\n    this.setProperties({\n      currentView: view\n    }, true);\n\n    if (this.headerModule) {\n      this.headerModule.updateActiveView();\n      this.headerModule.setCalendarView();\n    }\n\n    this.initializeView(this.currentView);\n    this.animateLayout();\n    args = {\n      requestType: 'viewNavigate',\n      cancel: false,\n      event: event\n    };\n    this.trigger(events.actionComplete, args);\n  };\n\n  Schedule.prototype.changeDate = function (selectedDate, event) {\n    var args = {\n      requestType: 'dateNavigate',\n      cancel: false,\n      event: event\n    };\n    this.trigger(events.actionBegin, args);\n\n    if (args.cancel) {\n      return;\n    }\n\n    var navArgs = {\n      action: 'date',\n      cancel: false,\n      previousDate: this.selectedDate,\n      currentDate: selectedDate\n    };\n    this.trigger(events.navigating, navArgs);\n\n    if (navArgs.cancel) {\n      return;\n    }\n\n    this.setProperties({\n      selectedDate: selectedDate\n    }, true);\n\n    if (this.headerModule) {\n      this.headerModule.setCalendarDate(selectedDate);\n    }\n\n    this.initializeView(this.currentView);\n    this.animateLayout();\n    args = {\n      requestType: 'dateNavigate',\n      cancel: false,\n      event: event\n    };\n    this.trigger(events.actionComplete, args);\n  };\n\n  Schedule.prototype.isSelectedDate = function (date) {\n    return date.setHours(0, 0, 0, 0) === new Date('' + this.selectedDate).setHours(0, 0, 0, 0);\n  };\n\n  Schedule.prototype.getNavigateView = function () {\n    if (this.activeView.isTimelineView()) {\n      return this.currentView === 'TimelineMonth' ? 'TimelineDay' : 'Agenda';\n    }\n\n    return 'Day';\n  };\n\n  Schedule.prototype.animateLayout = function () {\n    new Animation({\n      duration: 600,\n      name: 'FadeIn',\n      timingFunction: 'easeIn'\n    }).animate(this.activeView.element);\n  };\n  /**\n   * To provide the array of modules needed for control rendering\n   * @return {ModuleDeclaration[]}\n   * @hidden\n   */\n\n\n  Schedule.prototype.requiredModules = function () {\n    var modules = [];\n    this.setViewOptions(true);\n\n    for (var _i = 0, _a = Object.keys(this.viewOptions); _i < _a.length; _i++) {\n      var view = _a[_i];\n      view = view === 'timelineDay' || view === 'timelineWeek' || view === 'timelineWorkWeek' ? 'timelineViews' : view;\n      modules.push({\n        member: view,\n        args: [this]\n      });\n    }\n\n    if (this.allowDragAndDrop) {\n      modules.push({\n        member: 'dragAndDrop',\n        args: [this]\n      });\n    }\n\n    if (this.allowResizing) {\n      modules.push({\n        member: 'resize',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * Initializes the values of private members.\n   * @private\n   */\n\n\n  Schedule.prototype.preRender = function () {\n    this.isAdaptive = Browser.isDevice;\n    this.globalize = new Internationalization(this.locale);\n    this.uiStateValues = {\n      expand: false,\n      isInitial: true,\n      left: 0,\n      top: 0,\n      isGroupAdaptive: false,\n      groupIndex: 0,\n      action: false\n    };\n    this.activeCellsData = {\n      startTime: new Date(),\n      endTime: new Date(),\n      isAllDay: false\n    };\n    this.activeEventData = {\n      event: undefined,\n      element: undefined\n    };\n    this.defaultLocale = {\n      day: 'Day',\n      week: 'Week',\n      workWeek: 'Work Week',\n      month: 'Month',\n      agenda: 'Agenda',\n      weekAgenda: 'Week Agenda',\n      workWeekAgenda: 'Work Week Agenda',\n      monthAgenda: 'Month Agenda',\n      today: 'Today',\n      noEvents: 'No events',\n      emptyContainer: 'There are no events scheduled on this day.',\n      allDay: 'All day',\n      start: 'Start',\n      end: 'End',\n      more: 'more',\n      close: 'Close',\n      cancel: 'Cancel',\n      noTitle: '(No Title)',\n      delete: 'Delete',\n      deleteEvent: 'Delete Event',\n      deleteMultipleEvent: 'Delete Multiple Events',\n      selectedItems: 'Items selected',\n      deleteSeries: 'Delete Series',\n      edit: 'Edit',\n      editSeries: 'Edit Series',\n      editEvent: 'Edit Event',\n      createEvent: 'Create',\n      subject: 'Subject',\n      addTitle: 'Add title',\n      moreDetails: 'More Details',\n      save: 'Save',\n      editContent: 'Do you want to edit only this event or entire series?',\n      deleteRecurrenceContent: 'Do you want to delete only this event or entire series?',\n      deleteContent: 'Are you sure you want to delete this event?',\n      deleteMultipleContent: 'Are you sure you want to delete the selected events?',\n      newEvent: 'New Event',\n      title: 'Title',\n      location: 'Location',\n      description: 'Description',\n      timezone: 'Timezone',\n      startTimezone: 'Start Timezone',\n      endTimezone: 'End Timezone',\n      repeat: 'Repeat',\n      saveButton: 'Save',\n      cancelButton: 'Cancel',\n      deleteButton: 'Delete',\n      recurrence: 'Recurrence',\n      wrongPattern: 'The recurrence pattern is not valid.',\n      seriesChangeAlert: 'The changes made to specific instances of this series will be cancelled ' + 'and those events will match the series again.',\n      createError: 'The duration of the event must be shorter than how frequently it occurs. ' + 'Shorten the duration, or change the recurrence pattern in the recurrence event editor.',\n      recurrenceDateValidation: 'Some months have fewer than the selected date. For these months, ' + 'the occurrence will fall on the last date of the month.',\n      sameDayAlert: 'Two occurrences of the same event cannot occur on the same day.',\n      editRecurrence: 'Edit Recurrence',\n      repeats: 'Repeats',\n      alert: 'Alert',\n      startEndError: 'The selected end date occurs before the start date.',\n      invalidDateError: 'The entered date value is invalid.',\n      ok: 'Ok',\n      occurrence: 'Occurrence',\n      series: 'Series',\n      previous: 'Previous',\n      next: 'Next',\n      timelineDay: 'Timeline Day',\n      timelineWeek: 'Timeline Week',\n      timelineWorkWeek: 'Timeline Work Week',\n      timelineMonth: 'Timeline Month'\n    };\n    this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n    this.setCldrTimeFormat();\n    this.eventsData = [];\n    this.eventsProcessed = [];\n    this.currentAction = null;\n    this.selectedElements = [];\n    this.setViewOptions();\n  };\n  /**\n   * Binding events to the Schedule element.\n   * @hidden\n   */\n\n\n  Schedule.prototype.wireEvents = function () {\n    var resize = 'onorientationchange' in window ? 'orientationchange' : 'resize';\n    EventHandler.add(window, resize, this.onScheduleResize, this);\n    EventHandler.add(document, Browser.touchStartEvent, this.onDocumentClick, this);\n\n    if (this.allowKeyboardInteraction) {\n      this.keyboardInteractionModule = new KeyboardInteraction(this);\n    }\n  };\n\n  Schedule.prototype.removeSelectedClass = function () {\n    var selectedCells = this.getSelectedElements();\n\n    for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {\n      var cell = selectedCells_1[_i];\n      cell.setAttribute('aria-selected', 'false');\n      cell.removeAttribute('tabindex');\n    }\n\n    removeClass(selectedCells, cls.SELECTED_CELL_CLASS);\n  };\n\n  Schedule.prototype.addSelectedClass = function (cells, focusCell) {\n    for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n      var cell = cells_1[_i];\n      cell.setAttribute('aria-selected', 'true');\n    }\n\n    addClass(cells, cls.SELECTED_CELL_CLASS);\n    focusCell.setAttribute('tabindex', '0');\n    focusCell.focus();\n  };\n\n  Schedule.prototype.selectCell = function (element) {\n    this.removeSelectedClass();\n    this.addSelectedClass([element], element);\n  };\n\n  Schedule.prototype.getSelectedElements = function () {\n    return [].slice.call(this.element.querySelectorAll('.' + cls.SELECTED_CELL_CLASS));\n  };\n\n  Schedule.prototype.getAllDayRow = function () {\n    return this.element.querySelector('.' + cls.ALLDAY_ROW_CLASS);\n  };\n\n  Schedule.prototype.getContentTable = function () {\n    return this.element.querySelector('.' + cls.CONTENT_TABLE_CLASS + ' tbody');\n  };\n\n  Schedule.prototype.getTableRows = function () {\n    return [].slice.call(this.element.querySelectorAll('.' + cls.CONTENT_TABLE_CLASS + ' tbody tr:not(.' + cls.HIDDEN_CLASS + ')'));\n  };\n\n  Schedule.prototype.getWorkCellElements = function () {\n    return [].slice.call(this.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS));\n  };\n\n  Schedule.prototype.getIndexOfDate = function (collection, date) {\n    return collection.map(Number).indexOf(+date);\n  };\n\n  Schedule.prototype.isAllDayCell = function (td) {\n    if (this.currentView === 'Month' || this.currentView === 'TimelineMonth' || td.classList.contains(cls.ALLDAY_CELLS_CLASS) || td.classList.contains(cls.HEADER_CELLS_CLASS) || !this.activeViewOptions.timeScale.enable) {\n      return true;\n    }\n\n    if (this.activeViewOptions.headerRows.length > 0 && this.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {\n      return true;\n    }\n\n    return false;\n  };\n\n  Schedule.prototype.getDateFromElement = function (td) {\n    if (!isNullOrUndefined(td.getAttribute('data-date'))) {\n      var dateInMS = parseInt(td.getAttribute('data-date'), 10);\n      return new Date(dateInMS);\n    }\n\n    return undefined;\n  };\n\n  Schedule.prototype.getCellTemplate = function () {\n    return this.cellTemplateFn;\n  };\n\n  Schedule.prototype.getDateHeaderTemplate = function () {\n    return this.dateHeaderTemplateFn;\n  };\n\n  Schedule.prototype.getMajorSlotTemplate = function () {\n    return this.majorSlotTemplateFn;\n  };\n\n  Schedule.prototype.getMinorSlotTemplate = function () {\n    return this.minorSlotTemplateFn;\n  };\n\n  Schedule.prototype.getAppointmentTemplate = function () {\n    return this.appointmentTemplateFn;\n  };\n\n  Schedule.prototype.getEventTooltipTemplate = function () {\n    return this.eventTooltipTemplateFn;\n  };\n\n  Schedule.prototype.getHeaderTooltipTemplate = function () {\n    return this.headerTooltipTemplateFn;\n  };\n\n  Schedule.prototype.getEditorTemplate = function () {\n    return this.editorTemplateFn;\n  };\n\n  Schedule.prototype.getQuickInfoTemplatesHeader = function () {\n    return this.quickInfoTemplatesHeaderFn;\n  };\n\n  Schedule.prototype.getQuickInfoTemplatesContent = function () {\n    return this.quickInfoTemplatesContentFn;\n  };\n\n  Schedule.prototype.getQuickInfoTemplatesFooter = function () {\n    return this.quickInfoTemplatesFooterFn;\n  };\n\n  Schedule.prototype.getResourceHeaderTemplate = function () {\n    return this.resourceHeaderTemplateFn;\n  };\n\n  Schedule.prototype.getCssProperties = function () {\n    var cssProps = {\n      border: this.enableRtl ? 'borderLeftWidth' : 'borderRightWidth',\n      padding: this.enableRtl ? 'paddingLeft' : 'paddingRight'\n    };\n    return cssProps;\n  };\n\n  Schedule.prototype.onDocumentClick = function (args) {\n    this.notify(events.documentClick, {\n      event: args\n    });\n  };\n\n  Schedule.prototype.onScheduleResize = function () {\n    if (this.quickPopup) {\n      this.quickPopup.onClosePopup();\n    }\n\n    if (this.currentView === 'Month' || !this.activeViewOptions.timeScale.enable || this.activeView.isTimelineView()) {\n      this.notify(events.dataReady, {});\n    }\n  };\n\n  Schedule.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * Unbinding events from the element on widget destroy.\n   * @hidden\n   */\n\n\n  Schedule.prototype.unwireEvents = function () {\n    var resize = 'onorientationchange' in window ? 'orientationchange' : 'resize';\n    EventHandler.remove(window, resize, this.onScheduleResize);\n    EventHandler.remove(document, Browser.touchStartEvent, this.onDocumentClick);\n\n    if (this.keyboardInteractionModule) {\n      this.keyboardInteractionModule.destroy();\n    }\n  };\n  /**\n   * Core method to return the component name.\n   * @private\n   */\n\n\n  Schedule.prototype.getModuleName = function () {\n    return 'schedule';\n  };\n  /**\n   * Returns the properties to be maintained in the persisted state.\n   * @private\n   */\n\n\n  Schedule.prototype.getPersistData = function () {\n    return this.addOnPersist(['currentView', 'selectedDate']);\n  };\n  /**\n   * Called internally, if any of the property value changed.\n   * @private\n   */\n\n\n  Schedule.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var requireRefresh = false;\n    var requireScheduleRefresh = false;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'width':\n        case 'height':\n          this.notify(events.uiUpdate, {\n            module: 'scroll',\n            properties: {\n              width: newProp.width,\n              height: newProp.height\n            }\n          });\n          break;\n\n        case 'views':\n          this.setViewOptions();\n\n          if (this.headerModule) {\n            this.headerModule.updateItems();\n          }\n\n          this.changeView(this.currentView, null, true);\n          break;\n\n        case 'currentView':\n          this.changeView(newProp.currentView, null, true);\n          break;\n\n        case 'selectedDate':\n          this.changeDate(newProp.selectedDate);\n          break;\n\n        case 'dateFormat':\n          this.activeViewOptions = this.getActiveViewOptions();\n\n          if (this.headerModule) {\n            this.headerModule.updateDateRange(this.activeView.getDateRangeText());\n          }\n\n          break;\n\n        case 'showHeaderBar':\n          if (this.headerModule) {\n            this.headerModule.destroy();\n            this.headerModule = null;\n          }\n\n          if (newProp.showHeaderBar) {\n            this.headerModule = new HeaderRenderer(this);\n            this.headerModule.updateDateRange(this.activeView.getDateRangeText());\n          }\n\n          this.notify(events.scrollUiUpdate, {\n            cssProperties: this.getCssProperties()\n          });\n\n          if (this.activeView.isTimelineView()) {\n            this.notify(events.dataReady, {});\n          }\n\n          break;\n\n        case 'showWeekend':\n        case 'workDays':\n        case 'startHour':\n        case 'endHour':\n        case 'workHours':\n        case 'readonly':\n        case 'headerRows':\n        case 'showWeekNumber':\n          requireRefresh = true;\n          break;\n\n        case 'locale':\n          this.setCldrTimeFormat();\n          requireScheduleRefresh = true;\n          break;\n\n        case 'firstDayOfWeek':\n          if (this.headerModule) {\n            this.headerModule.setDayOfWeek(newProp.firstDayOfWeek);\n          }\n\n          requireRefresh = true;\n          break;\n\n        case 'showTimeIndicator':\n          if (this.activeViewOptions.timeScale.enable) {\n            this.activeView.highlightCurrentTime();\n          }\n\n          break;\n\n        case 'cellTemplate':\n          this.activeViewOptions.cellTemplate = newProp.cellTemplate;\n          this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);\n          requireRefresh = true;\n          break;\n\n        case 'dateHeaderTemplate':\n          this.activeViewOptions.dateHeaderTemplate = newProp.dateHeaderTemplate;\n          this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n          requireRefresh = true;\n          break;\n\n        case 'timezone':\n          this.eventBase.timezonePropertyChange(oldProp.timezone);\n          break;\n\n        case 'enableRtl':\n          requireScheduleRefresh = true;\n          break;\n\n        default:\n          this.extendedPropertyChange(prop, newProp, oldProp);\n          break;\n      }\n    }\n\n    if (requireScheduleRefresh) {\n      this.refresh();\n    } else if (requireRefresh) {\n      this.initializeView(this.currentView);\n    }\n  };\n\n  Schedule.prototype.extendedPropertyChange = function (prop, newProp, oldProp) {\n    switch (prop) {\n      case 'cssClass':\n        if (oldProp.cssClass) {\n          removeClass([this.element], oldProp.cssClass);\n        }\n\n        if (newProp.cssClass) {\n          addClass([this.element], newProp.cssClass);\n        }\n\n        break;\n\n      case 'hideEmptyAgendaDays':\n      case 'agendaDaysCount':\n        this.activeViewOptions = this.getActiveViewOptions();\n        this.changeView(this.currentView, null, true);\n        break;\n\n      case 'eventSettings':\n        this.onEventSettingsPropertyChanged(newProp.eventSettings, oldProp.eventSettings);\n        break;\n\n      case 'allowKeyboardInteraction':\n        if (this.keyboardInteractionModule) {\n          this.keyboardInteractionModule.destroy();\n          this.keyboardInteractionModule = null;\n        }\n\n        if (newProp.allowKeyboardInteraction) {\n          this.keyboardInteractionModule = new KeyboardInteraction(this);\n        }\n\n        break;\n\n      case 'editorTemplate':\n        if (!isNullOrUndefined(this.editorTemplate)) {\n          this.editorTemplateFn = this.templateParser(this.editorTemplate);\n        }\n\n        this.eventWindow.setDialogContent();\n        break;\n\n      case 'quickInfoTemplates':\n        if (this.quickInfoTemplates.header) {\n          this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n        }\n\n        if (this.quickInfoTemplates.content) {\n          this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n        }\n\n        if (this.quickInfoTemplates.footer) {\n          this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n        }\n\n        break;\n\n      case 'group':\n        this.onGroupSettingsPropertyChanged(newProp.group, oldProp.group);\n        break;\n\n      case 'resources':\n        this.initializeResources(true);\n        break;\n\n      case 'timeScale':\n        this.activeViewOptions.timeScale.interval = newProp.timeScale.interval || this.activeViewOptions.timeScale.interval;\n        this.activeViewOptions.timeScale.slotCount = newProp.timeScale.slotCount || this.activeViewOptions.timeScale.slotCount;\n        this.eventWindow.refreshDateTimePicker();\n        this.initializeView(this.currentView);\n        break;\n\n      case 'allowDragAndDrop':\n      case 'allowResizing':\n        this.notify(events.dataReady, {\n          processedData: this.eventBase.processData(this.eventsData)\n        });\n        break;\n    }\n  };\n\n  Schedule.prototype.onGroupSettingsPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      if (prop === 'headerTooltipTemplate') {\n        this.headerTooltipTemplateFn = this.templateParser(newProp[prop]);\n      } else {\n        this.initializeView(this.currentView);\n        this.eventWindow.refresh();\n      }\n    }\n  };\n\n  Schedule.prototype.onEventSettingsPropertyChanged = function (newProp, oldProp) {\n    var requireRefresh = false;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'dataSource':\n        case 'query':\n        case 'fields':\n          this.initializeDataModule();\n          requireRefresh = true;\n          break;\n\n        case 'template':\n          this.activeViewOptions.eventTemplate = newProp.template;\n          this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n          requireRefresh = true;\n          break;\n\n        case 'enableTooltip':\n          if (this.eventTooltip) {\n            this.eventTooltip.destroy();\n            this.eventTooltip = null;\n          }\n\n          if (newProp.enableTooltip) {\n            this.eventTooltip = new EventTooltip(this);\n          }\n\n          break;\n\n        case 'tooltipTemplate':\n          this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n          break;\n\n        case 'resourceColorField':\n          if (this.resourceBase) {\n            this.resourceBase.setResourceCollection();\n          }\n\n          requireRefresh = true;\n          break;\n      }\n    }\n\n    if (requireRefresh) {\n      this.renderModule.refreshDataManager();\n    }\n  };\n  /**\n   * Allows to show the spinner on schedule at the required scenarios.\n   */\n\n\n  Schedule.prototype.showSpinner = function () {\n    showSpinner(this.element);\n  };\n  /**\n   * When the spinner is shown manually using `showSpinner` method, it can be hidden using this `hideSpinner` method.\n   */\n\n\n  Schedule.prototype.hideSpinner = function () {\n    hideSpinner(this.element);\n  };\n  /**\n   * Sets different working hours on the required working days by accepting the required start and end time as well as the date collection\n   *  as its parameters.\n   * @method setWorkHours\n   * @param {date} dates Collection of dates on which the given start and end hour range needs to be applied.\n   * @param {string} start Defines the work start hour.\n   * @param {string} end Defines the work end hour.\n   * @param {number} groupIndex Defines the resource index from last level.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.setWorkHours = function (dates, start, end, groupIndex) {\n    var startHour = this.globalize.parseDate(start, {\n      skeleton: 'Hm'\n    });\n    var endHour = this.globalize.parseDate(end, {\n      skeleton: 'Hm'\n    });\n    var tableEle = this.getContentTable();\n\n    if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour) || !tableEle) {\n      return;\n    }\n\n    startHour.setMilliseconds(0);\n    endHour.setMilliseconds(0);\n    var viewStartHour = this.activeView.getStartHour();\n\n    if (startHour < viewStartHour) {\n      startHour = viewStartHour;\n    }\n\n    if (endHour > this.activeView.getEndHour()) {\n      endHour = this.activeView.getEndHour();\n    }\n\n    var msMajorInterval = this.activeViewOptions.timeScale.interval * util.MS_PER_MINUTE;\n    var msInterval = msMajorInterval / this.activeViewOptions.timeScale.slotCount;\n    var startIndex = Math.round((util.getDateInMs(startHour) - util.getDateInMs(viewStartHour)) / msInterval);\n    var endIndex = Math.ceil((util.getDateInMs(endHour) - util.getDateInMs(viewStartHour)) / msInterval);\n    var cells = [];\n\n    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n      var date = dates_1[_i];\n      util.resetTime(date);\n      var renderDates = this.activeView.renderDates;\n\n      if (!isNullOrUndefined(groupIndex) && this.resourceBase && !this.activeView.isTimelineView()) {\n        renderDates = this.resourceBase.lastResourceLevel[groupIndex].renderDates;\n      }\n\n      var colIndex = this.getIndexOfDate(renderDates, date);\n\n      if (colIndex >= 0) {\n        for (var i = startIndex; i < endIndex; i++) {\n          if (this.activeView.isTimelineView()) {\n            var rowIndex = !isNullOrUndefined(groupIndex) ? groupIndex : 0;\n            cells.push(tableEle.rows[rowIndex].cells[i]);\n          } else {\n            if (!isNullOrUndefined(groupIndex)) {\n              var tds = [].slice.call(tableEle.rows[i].querySelectorAll('.' + cls.WORK_CELLS_CLASS + '[data-group-index=\"' + groupIndex + '\"]'));\n              cells.push(tds[colIndex]);\n            } else {\n              cells.push(tableEle.rows[i].cells[colIndex]);\n            }\n          }\n        }\n      }\n    }\n\n    addClass(cells, cls.WORK_HOURS_CLASS);\n  };\n  /**\n   * Retrieves the start and end time information of the specific cell element.\n   * @method getCellDetails\n   * @param  {Element} td The cell element whose start and end time details are to be retrieved.\n   * @returns {CellClickEventArgs} Object An object holding the startTime, endTime and all-day information along with the target HTML\n   *  element will be returned.\n   */\n\n\n  Schedule.prototype.getCellDetails = function (td) {\n    var startTime = this.getDateFromElement(td);\n\n    if (isNullOrUndefined(startTime)) {\n      return undefined;\n    }\n\n    var endTime;\n    var duration = 1;\n    var endDateFromColSpan = this.activeView.isTimelineView() && !isNullOrUndefined(td.getAttribute('colSpan'));\n\n    if (endDateFromColSpan) {\n      duration = parseInt(td.getAttribute('colSpan'), 10);\n    }\n\n    if (!this.activeViewOptions.timeScale.enable || td.classList.contains(cls.ALLDAY_CELLS_CLASS) || td.classList.contains(cls.HEADER_CELLS_CLASS) || endDateFromColSpan) {\n      endTime = util.addDays(new Date(startTime.getTime()), duration);\n    } else {\n      endTime = this.activeView.getEndDateFromStartDate(startTime);\n    }\n\n    var data = {\n      startTime: startTime,\n      endTime: endTime,\n      isAllDay: this.isAllDayCell(td),\n      element: td\n    };\n    var groupIndex = td.getAttribute('data-group-index');\n\n    if (!isNullOrUndefined(groupIndex)) {\n      data.groupIndex = parseInt(groupIndex, 10);\n    }\n\n    return data;\n  };\n  /**\n   * Retrieves the resource details based on the provided resource index.\n   * @param {number} index index of the resources at the last level.\n   * @returns {ResourceDetails} Object An object holding the details of resource and resourceData.\n   */\n\n\n  Schedule.prototype.getResourcesByIndex = function (index) {\n    if (this.resourceBase && this.resourceBase.lastResourceLevel) {\n      if (index < 0 || index >= this.resourceBase.lastResourceLevel.length) {\n        return undefined;\n      }\n\n      var data = this.resourceBase.lastResourceLevel[index];\n      return {\n        resource: data.resource,\n        resourceData: data.resourceData\n      };\n    }\n\n    return undefined;\n  };\n  /**\n   * Scrolls the Schedule content area to the specified time.\n   * @method scrollTo\n   * @param {string} hour Accepts the time value in the skeleton format of 'Hm'.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.scrollTo = function (hour) {\n    if (this.activeView.scrollToHour) {\n      this.activeView.scrollToHour(hour);\n    }\n  };\n  /**\n   * Adds the newly created event into the Schedule dataSource.\n   * @method addEvent\n   * @param {Object | Object[]} data Single or collection of event objects to be added into Schedule.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.addEvent = function (data) {\n    this.crudModule.addEvent(data);\n  };\n  /**\n   * Updates the changes made in the event object by passing it as an parameter into the dataSource.\n   * @method saveEvent\n   * @param {[key: string]: Object} data Single or collection of event objects to be saved into Schedule.\n   * @param {CurrentAction} currentAction Denotes the action that takes place either for editing occurrence or series.\n   *  The valid current action names are `EditOccurrence` or `EditSeries`.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.saveEvent = function (data, currentAction) {\n    this.crudModule.saveEvent(data, currentAction);\n  };\n  /**\n   * Deletes the events based on the provided ID or event collection in the argument list.\n   * @method deleteEvent\n   * @param {{[key: string]: Object}} id Single event objects to be removed from the Schedule.\n   * @param {{[key: string]: Object }[]} id Collection of event objects to be removed from the Schedule.\n   * @param {string | number} id Accepts the ID of the event object which needs to be removed from the Schedule.\n   * @param {CurrentAction} currentAction Denotes the delete action that takes place either on occurrence or series events.\n   *  The valid current action names are `Delete`, `DeleteOccurrence` or `DeleteSeries`.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.deleteEvent = function (id, currentAction) {\n    this.crudModule.deleteEvent(id, currentAction);\n  };\n  /**\n   * Retrieves the entire collection of events bound to the Schedule.\n   * @method getEvents\n   * @returns {Object[]} Returns the collection of event objects from the Schedule.\n   */\n\n\n  Schedule.prototype.getEvents = function () {\n    return this.eventsData;\n  };\n  /**\n   * Retrieves the occurrences of a single recurrence event based on the provided parent ID.\n   * @method getOccurrencesByID\n   * @param {number} eventID ID of the parent recurrence data from which the occurrences are fetched.\n   * @returns {Object[]} Returns the collection of occurrence event objects.\n   */\n\n\n  Schedule.prototype.getOccurrencesByID = function (eventID) {\n    return this.eventBase.getOccurrencesByID(eventID);\n  };\n  /**\n   * Retrieves all the occurrences that lies between the specific start and end time range.\n   * @method getOccurrencesByRange\n   * @param {Date} startTime Denotes the start time range.\n   * @param {Date} endTime Denotes the end time range.\n   * @returns {Object[]} Returns the collection of occurrence event objects that lies between the provided start and end time.\n   */\n\n\n  Schedule.prototype.getOccurrencesByRange = function (startTime, endTime) {\n    return this.eventBase.getOccurrencesByRange(startTime, endTime);\n  };\n  /**\n   * Retrieves the dates that lies on active view of Schedule.\n   * @method getCurrentViewDates\n   * @returns {Date[]} Returns the collection of dates.\n   */\n\n\n  Schedule.prototype.getCurrentViewDates = function () {\n    return this.activeView.renderDates;\n  };\n  /**\n   * Retrieves the events that lies on the current date range of the active view of Schedule.\n   * @method getCurrentViewEvents\n   * @returns {Object[]} Returns the collection of events.\n   */\n\n\n  Schedule.prototype.getCurrentViewEvents = function () {\n    return this.eventsProcessed;\n  };\n  /**\n   * Refreshes the event dataSource. This method may be useful when the events alone in the schedule needs to be re-rendered.\n   * @method refreshEvents\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.refreshEvents = function () {\n    this.renderModule.refreshDataManager();\n  };\n  /**\n   * To retrieve the appointment object from element.\n   * @method getEventDetails\n   * @param {Element} element Denotes the event UI element on the Schedule.\n   * @returns {Object} Returns the event details.\n   */\n\n\n  Schedule.prototype.getEventDetails = function (element) {\n    var guid = element.getAttribute('data-guid');\n\n    if (guid) {\n      return this.eventBase.getEventByGuid(guid);\n    }\n\n    return {};\n  };\n  /**\n   * To check whether the given time range slots are available for event creation or already occupied by other events.\n   * @method isSlotAvailable\n   * @param {Date} startTime Denotes the start time of the slot.\n   * @param {Date} endTime Denotes the end time of the slot.\n   * @param {number} groupIndex Defines the resource index from last level.\n   * @returns {boolean} Returns true, if the slot that lies in the provided time range does not contain any other events.\n   */\n\n\n  Schedule.prototype.isSlotAvailable = function (startTime, endTime, groupIndex) {\n    var _this = this;\n\n    var eventCollection = this.eventBase.filterEvents(startTime, endTime);\n\n    if (this.currentAction !== 'Add' && this.activeEventData.event) {\n      eventCollection = eventCollection.filter(function (event) {\n        return event.Guid !== _this.activeEventData.event.Guid;\n      });\n    }\n\n    if (!isNullOrUndefined(groupIndex) && this.resourceBase && this.resourceBase.lastResourceLevel.length > 0) {\n      eventCollection = this.eventBase.filterEventsByResource(this.resourceBase.lastResourceLevel[groupIndex], eventCollection);\n    }\n\n    return eventCollection.length > 0 ? false : true;\n  };\n  /**\n   * To manually open the event editor on specific time or on certain events.\n   * @method openEditor\n   * @param {Object} data It can be either cell data or event data.\n   * @param {CurrentAction} action Defines the action for which the editor needs to be opened such as either for new event creation or\n   *  for editing of existing events. The applicable action names that can be used here are `Add`, `Save`, `EditOccurrence`\n   *  and `EditSeries`.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.openEditor = function (data, action) {\n    this.eventWindow.openEditor(data, action);\n  };\n  /**\n   * This method has been added to adjust the size of the outer event wrapper class that holds the collection of events,\n   *  while trying to set manual height and width to the Schedule cells.\n   * @method adjustEventWrapper\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.adjustEventWrapper = function () {\n    this.activeView.adjustEventWrapper();\n  };\n  /**\n   * Adds the resources to the specified index.\n   * @param resources\n   * @param {string} name Name of the resource defined in resources collection.\n   * @param {number} index Index or position where the resource should be added.\n   */\n\n\n  Schedule.prototype.addResource = function (resources, name, index) {\n    this.resourceBase.addResource(resources, name, index);\n  };\n  /**\n   * Removes the specified resource.\n   * @param resourceId Specifies the resource id to be removed.\n   * @param name Specifies the resource name from which the id should be referred.\n   */\n\n\n  Schedule.prototype.removeResource = function (resourceId, name) {\n    this.resourceBase.removeResource(resourceId, name);\n  };\n  /**\n   * Destroys the Schedule component.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  Schedule.prototype.destroy = function () {\n    if (this.quickPopup) {\n      this.quickPopup.destroy();\n      this.quickPopup = null;\n    }\n\n    if (this.eventTooltip) {\n      this.eventTooltip.destroy();\n      this.eventTooltip = null;\n    }\n\n    if (this.eventWindow) {\n      this.eventWindow.destroy();\n      this.eventWindow = null;\n    }\n\n    this.unwireEvents();\n\n    if (this.headerModule) {\n      this.headerModule.destroy();\n      this.headerModule = null;\n    }\n\n    if (this.scrollModule) {\n      this.scrollModule.destroy();\n      this.scrollModule = null;\n    }\n\n    if (this.activeView) {\n      this.activeView.removeEventListener();\n      this.activeView.destroy();\n      this.activeView = null;\n    }\n\n    if (this.scheduleTouchModule) {\n      this.scheduleTouchModule.destroy();\n      this.scheduleTouchModule = null;\n    }\n\n    _super.prototype.destroy.call(this);\n\n    this.element.innerHTML = '';\n    var removeClasses = [cls.ROOT];\n\n    if (this.cssClass) {\n      removeClasses = removeClasses.concat(this.cssClass.split(' '));\n    }\n\n    removeClass([this.element], removeClasses);\n  };\n\n  __decorate([Property('auto')], Schedule.prototype, \"width\", void 0);\n\n  __decorate([Property('auto')], Schedule.prototype, \"height\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showHeaderBar\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showTimeIndicator\", void 0);\n\n  __decorate([Property('Week')], Schedule.prototype, \"currentView\", void 0);\n\n  __decorate([Property(['Day', 'Week', 'WorkWeek', 'Month', 'Agenda'])], Schedule.prototype, \"views\", void 0);\n\n  __decorate([Property(new Date())], Schedule.prototype, \"selectedDate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"dateFormat\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showWeekend\", void 0);\n\n  __decorate([Property(0)], Schedule.prototype, \"firstDayOfWeek\", void 0);\n\n  __decorate([Property([1, 2, 3, 4, 5])], Schedule.prototype, \"workDays\", void 0);\n\n  __decorate([Property('00:00')], Schedule.prototype, \"startHour\", void 0);\n\n  __decorate([Property('24:00')], Schedule.prototype, \"endHour\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowResizing\", void 0);\n\n  __decorate([Complex({}, WorkHours)], Schedule.prototype, \"workHours\", void 0);\n\n  __decorate([Complex({}, TimeScale)], Schedule.prototype, \"timeScale\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowKeyboardInteraction\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"dateHeaderTemplate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"cellTemplate\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"readonly\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showQuickInfo\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"showWeekNumber\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"editorTemplate\", void 0);\n\n  __decorate([Complex({}, QuickInfoTemplates)], Schedule.prototype, \"quickInfoTemplates\", void 0);\n\n  __decorate([Property(7)], Schedule.prototype, \"agendaDaysCount\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"hideEmptyAgendaDays\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"timezone\", void 0);\n\n  __decorate([Complex({}, EventSettings)], Schedule.prototype, \"eventSettings\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"resourceHeaderTemplate\", void 0);\n\n  __decorate([Complex({}, Group)], Schedule.prototype, \"group\", void 0);\n\n  __decorate([Collection([], Resources)], Schedule.prototype, \"resources\", void 0);\n\n  __decorate([Collection([], HeaderRows)], Schedule.prototype, \"headerRows\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"enableRtl\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"created\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"cellClick\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"cellDoubleClick\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"actionBegin\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"navigating\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"renderCell\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"eventClick\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"eventRendered\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dataBinding\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"popupOpen\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dragStart\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"drag\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dragStop\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"resizeStart\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"resizing\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"resizeStop\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dataBound\", void 0);\n\n  Schedule = __decorate([NotifyPropertyChanges], Schedule);\n  return Schedule;\n}(Component);\n\nexport { Schedule };","map":null,"metadata":{},"sourceType":"module"}