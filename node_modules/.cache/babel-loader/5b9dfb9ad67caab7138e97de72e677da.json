{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../common/menu-base-model.d.ts'/>\n\n\nimport { NotifyPropertyChanges, Property } from '@syncfusion/ej2-base';\nimport { Browser, Complex } from '@syncfusion/ej2-base';\nimport { MenuBase, FieldSettings } from '../common/menu-base';\nvar VMENU = 'e-vertical';\nvar SCROLLABLE = 'e-scrollable';\n/**\n * The Menu is a graphical user interface that serve as navigation headers for your application or site.\n * ```html\n * <ul id = 'menu'></ul>\n * ```\n * ```typescript\n * <script>\n * var menuObj = new Menu({ items: [{ text: 'Home' }, { text: 'Contact Us' },{ text: 'Login' }]});\n * menuObj.appendTo(\"#menu\");\n * </script>\n * ```\n */\n\nvar Menu =\n/** @class */\nfunction (_super) {\n  __extends(Menu, _super);\n  /**\n   * Constructor for creating the component.\n   * @private\n   */\n\n\n  function Menu(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.tempItems = [];\n    return _this;\n  }\n  /**\n   * Get module name.\n   * @returns string\n   * @private\n   */\n\n\n  Menu.prototype.getModuleName = function () {\n    return 'menu';\n  };\n  /**\n   * For internal use only - prerender processing.\n   * @private\n   */\n\n\n  Menu.prototype.preRender = function () {\n    this.isMenu = true;\n\n    if (this.template) {\n      try {\n        if (document.querySelectorAll(this.template).length) {\n          this.template = document.querySelector(this.template).innerHTML.trim();\n          this.clearChanges();\n        }\n      } catch (e) {\n        /* action on catch */\n      }\n    } else {\n      this.tempItems = this.items;\n      this.items = [];\n      this.tempItems.map(this.createMenuItems, this);\n      this.setProperties({\n        items: this.items\n      }, true);\n      this.tempItems = [];\n    }\n\n    _super.prototype.preRender.call(this);\n  };\n\n  Menu.prototype.initialize = function () {\n    _super.prototype.initialize.call(this);\n\n    if (this.orientation === 'Vertical') {\n      this.element.classList.add(VMENU);\n      this.element.setAttribute('aria-orientation', 'vertical');\n    } else {\n      if (Browser.isDevice) {\n        this.element.classList.add(SCROLLABLE);\n      }\n    }\n  };\n  /**\n   * Called internally if any of the property value changed\n   * @private\n   * @param {MenuModel} newProp\n   * @param {MenuModel} oldProp\n   * @returns void\n   */\n\n\n  Menu.prototype.onPropertyChanged = function (newProp, oldProp) {\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'orientation':\n          if (newProp.orientation === 'Vertical') {\n            this.element.classList.add(VMENU);\n            this.element.setAttribute('aria-orientation', 'vertical');\n          } else {\n            this.element.classList.remove(VMENU);\n            this.element.removeAttribute('aria-orientation');\n          }\n\n          break;\n      }\n    }\n  };\n\n  Menu.prototype.createMenuItems = function (item, index) {\n    var pIdField;\n    var record = {\n      items: []\n    };\n    var idx;\n    var i;\n    var items = this.items;\n    var fields = ['itemId', 'text', 'iconCss', 'url', 'separator', 'children'];\n    pIdField = this.getField('parentId');\n\n    for (i = 0; i < fields.length; i++) {\n      var field = this.getField(fields[i]);\n\n      if (item[field]) {\n        record[field] = item[field];\n      }\n    }\n\n    if (item[pIdField]) {\n      idx = this.getIndex(item[pIdField].toString(), true);\n\n      for (i = 0; i < idx.length; i++) {\n        if (!items[idx[i]].items) {\n          items[idx[i]].items = [];\n        }\n\n        items = items[idx[i]].items;\n      }\n\n      items.push(record);\n    } else {\n      this.items.push(record);\n    }\n  };\n\n  __decorate([Property('Horizontal')], Menu.prototype, \"orientation\", void 0);\n\n  __decorate([Property(null)], Menu.prototype, \"template\", void 0);\n\n  __decorate([Complex({}, FieldSettings)], Menu.prototype, \"fields\", void 0);\n\n  Menu = __decorate([NotifyPropertyChanges], Menu);\n  return Menu;\n}(MenuBase);\n\nexport { Menu };","map":null,"metadata":{},"sourceType":"module"}