{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { addClass, Browser, EventHandler, closest, extend, formatUnit, setStyleAttribute } from '@syncfusion/ej2-base';\nimport { ActionBase } from '../actions/action-base';\nimport * as util from '../base/util';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\n/**\n * Schedule events resize actions\n */\n\nvar Resize =\n/** @class */\nfunction (_super) {\n  __extends(Resize, _super);\n\n  function Resize() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Resize.prototype.wireResizeEvent = function (element) {\n    var _this = this;\n\n    var resizeElement = [].slice.call(element.querySelectorAll('.' + cls.EVENT_RESIZE_CLASS));\n    resizeElement.forEach(function (element) {\n      return EventHandler.add(element, Browser.touchStartEvent, _this.resizeStart, _this);\n    });\n  };\n\n  Resize.prototype.resizeHelper = function () {\n    var _this = this;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.allowGroupEdit) {\n      this.actionObj.originalElement.forEach(function (element, index) {\n        var cloneElement = _this.createCloneElement(element);\n\n        _this.actionObj.cloneElement[index] = cloneElement;\n\n        if (_this.actionObj.element === element) {\n          _this.actionObj.clone = cloneElement;\n        }\n      });\n    } else {\n      this.actionObj.clone = this.createCloneElement(this.actionObj.element);\n      this.actionObj.cloneElement = [this.actionObj.clone];\n      this.actionObj.originalElement = [this.actionObj.element];\n    }\n  };\n\n  Resize.prototype.resizeStart = function (e) {\n    this.actionObj.action = 'resize';\n    this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n    this.actionObj.interval = this.actionObj.slotInterval;\n    var resizeTarget = closest(e.target, '.' + cls.EVENT_RESIZE_CLASS);\n    this.actionObj.element = closest(resizeTarget, '.' + cls.APPOINTMENT_CLASS);\n    this.actionObj.event = this.parent.eventBase.getEventByGuid(this.actionObj.element.getAttribute('data-guid'));\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var resizeArgs = {\n      cancel: false,\n      data: eventObj,\n      element: this.actionObj.element,\n      event: e,\n      interval: this.actionObj.interval,\n      scroll: {\n        enable: true,\n        scrollBy: 10\n      }\n    };\n    this.parent.trigger(event.resizeStart, resizeArgs);\n\n    if (resizeArgs.cancel) {\n      return;\n    }\n\n    this.actionClass('addClass');\n    this.parent.uiStateValues.action = true;\n    this.resizeEdges = {\n      left: resizeTarget.classList.contains(cls.LEFT_RESIZE_HANDLER),\n      right: resizeTarget.classList.contains(cls.RIGHT_RESIZE_HANDLER),\n      top: resizeTarget.classList.contains(cls.TOP_RESIZE_HANDLER),\n      bottom: resizeTarget.classList.contains(cls.BOTTOM_RESIZE_HANDLER)\n    };\n    this.actionObj.groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : 0;\n    var workCell = this.parent.element.querySelector('.' + cls.WORK_CELLS_CLASS);\n    this.actionObj.cellWidth = workCell.offsetWidth;\n    this.actionObj.cellHeight = workCell.offsetHeight;\n    var headerRows = this.parent.activeViewOptions.headerRows.map(function (row) {\n      return row.option;\n    });\n\n    if (this.parent.activeView.isTimelineView() && headerRows.length > 0 && ['Date', 'Hour'].indexOf(headerRows.slice(-1)[0]) < 0) {\n      var tr = this.parent.getContentTable().querySelector('tr');\n      var noOfDays_1 = 0;\n      var tdCollections = [].slice.call(tr.childNodes);\n      tdCollections.forEach(function (td) {\n        return noOfDays_1 += parseInt(td.getAttribute('colspan'), 10);\n      });\n      this.actionObj.cellWidth = tr.offsetWidth / noOfDays_1;\n      this.actionObj.cellHeight = tr.offsetHeight;\n    }\n\n    var pages = this.getPageCoordinates(e);\n    this.actionObj.X = pages.pageX;\n    this.actionObj.Y = pages.pageY;\n    this.actionObj.groupIndex = parseInt(this.actionObj.element.getAttribute('data-group-index') || '0', 10);\n    this.actionObj.interval = resizeArgs.interval;\n    this.actionObj.scroll = resizeArgs.scroll;\n    this.actionObj.start = new Date(eventObj[this.parent.eventFields.startTime].getTime());\n    this.actionObj.end = new Date(eventObj[this.parent.eventFields.endTime].getTime());\n    this.actionObj.originalElement = this.getOriginalElement(this.actionObj.element);\n    var viewElement = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    this.scrollArgs = {\n      element: viewElement,\n      width: viewElement.scrollWidth,\n      height: viewElement.scrollHeight\n    };\n    EventHandler.add(document, Browser.touchMoveEvent, this.resizing, this);\n    EventHandler.add(document, Browser.touchEndEvent, this.resizeStop, this);\n  };\n\n  Resize.prototype.resizing = function (e) {\n    this.parent.quickPopup.quickPopupHide();\n\n    if (this.parent.element.querySelectorAll('.' + cls.RESIZE_CLONE_CLASS).length === 0) {\n      this.resizeHelper();\n    }\n\n    if (this.autoScrollValidation(e) && !this.actionObj.clone.classList.contains(cls.ALLDAY_APPOINTMENT_CLASS)) {\n      this.autoScroll();\n    }\n\n    var resizeValidation = this.resizeValidation(e);\n\n    if (this.resizeEdges.left) {\n      if (resizeValidation) {\n        var leftStyles = this.getLeftRightStyles(e, true);\n\n        for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {\n          var cloneElement = _a[_i];\n          setStyleAttribute(cloneElement, leftStyles);\n          addClass([cloneElement], cls.LEFT_RESIZE_HANDLER);\n        }\n      }\n\n      this.horizontalResizing(!this.parent.enableRtl);\n    }\n\n    if (this.resizeEdges.right) {\n      if (resizeValidation) {\n        var rightStyles = this.getLeftRightStyles(e, false);\n\n        for (var _b = 0, _c = this.actionObj.cloneElement; _b < _c.length; _b++) {\n          var cloneElement = _c[_b];\n          setStyleAttribute(cloneElement, rightStyles);\n          addClass([cloneElement], cls.RIGHT_RESIZE_HANDLER);\n        }\n      }\n\n      this.horizontalResizing(this.parent.enableRtl);\n    }\n\n    if (this.resizeEdges.top) {\n      if (resizeValidation) {\n        var topStyles = this.getTopBottomStyles(e, true);\n\n        for (var _d = 0, _e = this.actionObj.cloneElement; _d < _e.length; _d++) {\n          var cloneElement = _e[_d];\n          setStyleAttribute(cloneElement, topStyles);\n          addClass([cloneElement], cls.TOP_RESIZE_HANDLER);\n        }\n      }\n\n      this.verticalResizing(true);\n    }\n\n    if (this.resizeEdges.bottom) {\n      if (resizeValidation) {\n        var bottomStyles = this.getTopBottomStyles(e, false);\n\n        for (var _f = 0, _g = this.actionObj.cloneElement; _f < _g.length; _f++) {\n          var cloneElement = _g[_f];\n          setStyleAttribute(cloneElement, bottomStyles);\n          addClass([cloneElement], cls.BOTTOM_RESIZE_HANDLER);\n        }\n      }\n\n      this.verticalResizing(false);\n    }\n\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var resizeArgs = {\n      cancel: false,\n      data: eventObj,\n      element: this.actionObj.element,\n      event: e,\n      startTime: this.actionObj.start,\n      endTime: this.actionObj.end\n    };\n    this.parent.trigger(event.resizing, resizeArgs);\n  };\n\n  Resize.prototype.resizeStop = function (e) {\n    EventHandler.remove(document, Browser.touchMoveEvent, this.resizing);\n    EventHandler.remove(document, Browser.touchEndEvent, this.resizeStop);\n    this.removeCloneElement();\n    this.actionClass('removeClass');\n    this.parent.uiStateValues.action = false;\n    var resizeArgs = {\n      cancel: false,\n      data: this.getChangedData(),\n      element: this.actionObj.element,\n      event: e\n    };\n    this.parent.trigger(event.resizeStop, resizeArgs);\n\n    if (resizeArgs.cancel) {\n      return;\n    }\n\n    this.saveChangedData(resizeArgs);\n  };\n\n  Resize.prototype.verticalResizing = function (isTop) {\n    var offsetValue = this.actionObj.clone.offsetTop;\n\n    if (!isTop) {\n      offsetValue += this.actionObj.clone.offsetHeight;\n    }\n\n    var minutes = offsetValue / this.actionObj.cellHeight * this.actionObj.slotInterval;\n    var resizeTime = util.resetTime(new Date(parseInt(this.actionObj.clone.offsetParent.getAttribute('data-date'), 10)));\n    resizeTime.setHours(this.parent.activeView.getStartHour().getHours());\n    resizeTime.setMinutes(minutes);\n\n    if (isTop) {\n      this.actionObj.start = this.calculateIntervalTime(resizeTime);\n    } else {\n      this.actionObj.end = this.calculateIntervalTime(resizeTime);\n    }\n\n    this.updateTimePosition(resizeTime);\n  };\n\n  Resize.prototype.horizontalResizing = function (isLeft) {\n    var eventStart = new Date(this.actionObj.event[this.parent.eventFields.startTime].getTime());\n    var eventEnd = new Date(this.actionObj.event[this.parent.eventFields.endTime].getTime());\n    var resizeTime;\n\n    if (this.parent.activeView.isTimelineView()) {\n      var tr = this.parent.getContentTable().querySelector('tr');\n      var headerName = this.parent.currentView;\n\n      if (this.parent.activeViewOptions.headerRows.length > 0) {\n        var rows = this.parent.activeViewOptions.headerRows.map(function (row) {\n          return row.option;\n        });\n        headerName = rows.slice(-1)[0];\n\n        if (this.parent.currentView === 'TimelineMonth' && headerName === 'Hour') {\n          headerName = rows.slice(-2)[0] || 'Month';\n        }\n      }\n\n      resizeTime = isLeft ? eventStart : eventEnd;\n      var cellIndex = 0;\n\n      if (['Year', 'Month', 'Week', 'Date'].indexOf(headerName) !== -1) {\n        var noOfDays_2 = 0;\n        var tdCollections = [].slice.call(tr.childNodes);\n        tdCollections.forEach(function (td) {\n          return noOfDays_2 += parseInt(td.getAttribute('colspan'), 10);\n        });\n        var offsetValue = this.parent.enableRtl ? parseInt(this.actionObj.clone.style.right, 10) : parseInt(this.actionObj.clone.style.left, 10);\n\n        if (!isLeft) {\n          offsetValue += this.actionObj.clone.offsetWidth - this.actionObj.cellWidth;\n        }\n\n        cellIndex = Math.floor(offsetValue / (tr.offsetWidth / noOfDays_2));\n        cellIndex = cellIndex < 0 ? 0 : cellIndex >= noOfDays_2 ? noOfDays_2 - 1 : cellIndex;\n      } else {\n        var cellWidth = this.parent.currentView === 'TimelineMonth' || !this.parent.activeViewOptions.timeScale.enable ? this.actionObj.cellWidth - 2 : 0;\n        cellIndex = Math.floor(isLeft ? this.actionObj.clone.offsetLeft / this.actionObj.cellWidth : (this.actionObj.clone.offsetLeft + (this.actionObj.clone.offsetWidth - cellWidth)) / this.actionObj.cellWidth);\n\n        if (this.parent.enableRtl) {\n          var cellOffsetWidth = 0;\n\n          if (headerName === 'TimelineMonth' || !this.parent.activeViewOptions.timeScale.enable && this.parent.currentView !== 'TimelineMonth') {\n            cellOffsetWidth = this.actionObj.cellWidth;\n          }\n\n          var offsetWidth = Math.floor(parseInt(this.actionObj.clone.style.right, 10) / this.actionObj.cellWidth) * this.actionObj.cellWidth + (isLeft ? 0 : this.actionObj.clone.offsetWidth - cellOffsetWidth);\n          cellIndex = Math.ceil(offsetWidth / this.actionObj.cellWidth);\n        }\n\n        cellIndex = this.getIndex(cellIndex);\n      }\n\n      var resizeDate = void 0;\n\n      if (['Year', 'Month', 'Week', 'Date'].indexOf(headerName) !== -1) {\n        resizeDate = new Date(this.parent.activeView.renderDates[cellIndex].getTime());\n      } else {\n        resizeDate = new Date(parseInt(tr.childNodes.item(cellIndex).getAttribute('data-date'), 10));\n      }\n\n      if (['TimelineMonth', 'Year', 'Month', 'Week', 'Date'].indexOf(headerName) !== -1 || !this.parent.activeViewOptions.timeScale.enable) {\n        resizeTime = new Date(resizeDate.setHours(resizeTime.getHours(), resizeTime.getMinutes(), resizeTime.getSeconds()));\n      } else {\n        var offsetValue = this.parent.enableRtl ? parseFloat(this.actionObj.clone.style.right) : parseFloat(this.actionObj.clone.style.left);\n\n        if (!isLeft) {\n          offsetValue += this.actionObj.clone.offsetWidth;\n        }\n\n        var spanMinutes = Math.ceil(this.actionObj.slotInterval / this.actionObj.cellWidth * (offsetValue - Math.floor(offsetValue / this.actionObj.cellWidth) * this.actionObj.cellWidth));\n        resizeTime = new Date(resizeDate.getTime());\n        resizeTime.setMinutes(resizeTime.getMinutes() + spanMinutes);\n        this.updateTimePosition(resizeTime);\n      }\n    } else {\n      var cloneIndex = closest(this.actionObj.clone, 'td').cellIndex;\n      var originalWidth = Math.ceil((isLeft ? this.actionObj.element.offsetWidth : 0) / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n      var noOfDays = Math.ceil((this.actionObj.clone.offsetWidth - originalWidth) / this.actionObj.cellWidth);\n      var tr = closest(this.actionObj.clone, 'tr');\n      var dayIndex = isLeft ? cloneIndex - noOfDays : cloneIndex + noOfDays - 1;\n      dayIndex = this.getIndex(dayIndex);\n      resizeTime = new Date(parseInt(tr.childNodes.item(dayIndex).getAttribute('data-date'), 10));\n\n      if (isLeft) {\n        resizeTime.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());\n      } else {\n        resizeTime.setHours(eventEnd.getHours(), eventEnd.getMinutes(), eventEnd.getSeconds());\n      }\n    }\n\n    if (isLeft) {\n      this.actionObj.start = this.parent.activeViewOptions.timeScale.enable ? this.calculateIntervalTime(resizeTime) : resizeTime;\n    } else {\n      var resizeEnd = this.actionObj.event[this.parent.eventFields.isAllDay] && resizeTime.getHours() === 0 && resizeTime.getMinutes() === 0 ? util.addDays(resizeTime, 1) : resizeTime;\n      this.actionObj.end = this.parent.activeViewOptions.timeScale.enable && this.parent.currentView !== 'Month' ? this.calculateIntervalTime(resizeEnd) : resizeEnd;\n    }\n  };\n\n  Resize.prototype.getTopBottomStyles = function (e, isTop) {\n    var pages = this.getPageCoordinates(e);\n    var viewElement = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    var slotInterval = this.actionObj.cellHeight / this.actionObj.slotInterval * this.actionObj.interval;\n    var clnHeight = isTop ? this.actionObj.element.offsetHeight + (this.actionObj.Y - pages.pageY) : this.actionObj.element.offsetHeight + (pages.pageY - this.actionObj.Y);\n    var clnTop = isTop ? this.actionObj.element.offsetTop - (this.actionObj.Y - pages.pageY) : this.actionObj.clone.offsetTop;\n    clnHeight = clnTop < 0 ? this.actionObj.clone.offsetHeight : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight > this.scrollArgs.height ? this.actionObj.clone.offsetHeight : clnHeight;\n    clnTop = clnTop < 0 ? 0 : clnTop;\n    clnTop = Math.floor(clnTop / slotInterval) * slotInterval;\n    clnHeight = clnTop + clnHeight >= viewElement.scrollHeight ? viewElement.scrollHeight - clnTop : Math.ceil(clnHeight / slotInterval) * slotInterval;\n    var styles = {\n      height: formatUnit(clnHeight < this.actionObj.cellHeight ? this.actionObj.cellHeight : clnHeight),\n      top: formatUnit(clnHeight < this.actionObj.cellHeight && isTop ? this.actionObj.clone.offsetTop : clnTop),\n      left: '0px',\n      right: '0px',\n      width: '100%'\n    };\n    return styles;\n  };\n\n  Resize.prototype.getLeftRightStyles = function (e, isLeft) {\n    var styles = {};\n    var pages = this.getPageCoordinates(e);\n    var isTimelineView = this.parent.activeView.isTimelineView();\n    var isTimeViews = ['TimelineDay', 'TimelineWeek', 'TimelineWorkWeek'].indexOf(this.parent.currentView) > 0 && this.parent.activeViewOptions.timeScale.enable;\n    var slotInterval = this.actionObj.cellWidth / this.actionObj.slotInterval * this.actionObj.interval;\n    var pageWidth = isLeft ? this.actionObj.X - pages.pageX : pages.pageX - this.actionObj.X;\n    var targetWidth = isTimelineView ? this.actionObj.element.offsetWidth / this.actionObj.cellWidth * this.actionObj.cellWidth : this.parent.currentView === 'Month' ? this.actionObj.element.offsetWidth : Math.ceil(this.actionObj.element.offsetWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n    var offsetWidth = targetWidth + Math.ceil(pageWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n\n    if (isTimeViews) {\n      offsetWidth = targetWidth + Math.ceil(pageWidth / slotInterval) * slotInterval;\n    }\n\n    styles.width = formatUnit(offsetWidth < this.actionObj.cellWidth ? this.actionObj.cellWidth : offsetWidth);\n\n    if (this.parent.enableRtl) {\n      var rightValue = isTimelineView ? Math.floor(parseInt(this.actionObj.element.style.right, 10) / this.actionObj.cellWidth) * this.actionObj.cellWidth : -(offsetWidth - this.actionObj.cellWidth);\n      rightValue = isTimelineView ? rightValue : isLeft ? 0 : rightValue > 0 ? 0 : rightValue;\n\n      if (isTimelineView && !isLeft) {\n        rightValue = Math.ceil((this.actionObj.element.offsetLeft + (this.actionObj.element.offsetWidth + (pages.pageX - this.actionObj.X))) / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n        rightValue = rightValue < 0 ? Math.abs(rightValue) : -rightValue;\n      }\n\n      styles.right = formatUnit(rightValue);\n    } else {\n      var offsetLeft = isLeft ? this.actionObj.element.offsetLeft - (this.actionObj.X - pages.pageX) : this.parent.enableRtl ? this.actionObj.element.offsetLeft : 0;\n\n      if (isTimelineView) {\n        offsetLeft = isLeft ? offsetLeft : parseInt(this.actionObj.clone.style.left, 10);\n\n        if (this.parent.enableRtl) {\n          offsetLeft = !isLeft ? pages.pageX < this.actionObj.X - this.actionObj.clone.offsetWidth ? parseInt(this.actionObj.clone.style.right, 10) : offsetLeft : offsetLeft;\n        } else {\n          offsetLeft = isLeft ? pages.pageX > this.actionObj.X + this.actionObj.clone.offsetWidth && this.actionObj.clone.offsetWidth === this.actionObj.cellWidth ? parseInt(this.actionObj.clone.style.left, 10) : offsetLeft : offsetLeft;\n        }\n      }\n\n      var leftValue = offsetLeft;\n      offsetLeft = isTimelineView ? isTimeViews ? isLeft ? Math.floor(offsetLeft / slotInterval) * slotInterval : offsetLeft : Math.floor(offsetLeft / this.actionObj.cellWidth) * this.actionObj.cellWidth : Math.ceil(Math.abs(offsetLeft) / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n      var cloneWidth = Math.ceil(this.actionObj.clone.offsetWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n\n      if (isLeft) {\n        styles.left = formatUnit(isTimelineView ? offsetLeft : isLeft ? leftValue < 0 ? -offsetLeft : Math.ceil((targetWidth - cloneWidth) / this.actionObj.cellWidth) * this.actionObj.cellWidth : offsetLeft);\n      }\n    }\n\n    return styles;\n  };\n\n  Resize.prototype.resizeValidation = function (e) {\n    var pages = this.getPageCoordinates(e);\n    var viewDimension = this.getContentAreaDimension();\n    var resizeValidation = false;\n\n    if (this.resizeEdges.left) {\n      resizeValidation = pages.pageX - this.actionObj.cellWidth >= viewDimension.left;\n    }\n\n    if (this.resizeEdges.right) {\n      resizeValidation = pages.pageX + this.actionObj.cellWidth <= viewDimension.right;\n    }\n\n    if (this.resizeEdges.top) {\n      resizeValidation = this.actionObj.clone.offsetTop >= viewDimension.top;\n    }\n\n    if (this.resizeEdges.bottom) {\n      resizeValidation = this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight <= this.scrollArgs.height;\n    }\n\n    return resizeValidation;\n  };\n  /**\n   * Get module name.\n   */\n\n\n  Resize.prototype.getModuleName = function () {\n    return 'resize';\n  };\n\n  return Resize;\n}(ActionBase);\n\nexport { Resize };","map":null,"metadata":{},"sourceType":"module"}