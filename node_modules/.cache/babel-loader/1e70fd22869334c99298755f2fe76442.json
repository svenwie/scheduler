{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { formatUnit, isNullOrUndefined, closest, extend } from '@syncfusion/ej2-base';\nimport { createElement, remove, addClass, EventHandler } from '@syncfusion/ej2-base';\nimport { AgendaBase } from '../event-renderer/agenda-base';\nimport { ViewBase } from './view-base';\nimport * as util from '../base/util';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\n/**\n * agenda view\n */\n\nvar Agenda =\n/** @class */\nfunction (_super) {\n  __extends(Agenda, _super);\n  /**\n   * Constructor for agenda view\n   */\n\n\n  function Agenda(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-agenda-view';\n    _this.isInverseTableSelect = false;\n    _this.agendaDates = {};\n    _this.virtualScrollTop = 1;\n    _this.minDate = new Date(1900, 0, 1);\n    _this.maxDate = new Date(2099, 11, 31);\n    _this.agendaBase = new AgendaBase(parent);\n    return _this;\n  }\n  /**\n   * Get module name.\n   */\n\n\n  Agenda.prototype.getModuleName = function () {\n    return 'agenda';\n  };\n\n  Agenda.prototype.renderLayout = function () {\n    this.agendaDates = {};\n    this.element = createElement('div', {\n      className: cls.TABLE_WRAP_CLASS\n    });\n    addClass([this.element], this.viewClass);\n    this.element.appendChild(this.createTableLayout(cls.OUTER_TABLE_CLASS));\n    this.parent.element.querySelector('.' + cls.TABLE_CONTAINER_CLASS).appendChild(this.element);\n    var eTr = createElement('tr');\n    this.element.querySelector('tbody').appendChild(eTr);\n    var workTd = createElement('td');\n    eTr.appendChild(workTd);\n    var wrap = createElement('div', {\n      className: cls.CONTENT_WRAP_CLASS\n    });\n    workTd.appendChild(wrap);\n    var tbl = this.createTableLayout(cls.CONTENT_TABLE_CLASS);\n    wrap.appendChild(tbl);\n    var tBody = tbl.querySelector('tbody');\n    var agendaDate = util.resetTime(this.parent.selectedDate);\n    this.agendaBase.renderEmptyContent(tBody, agendaDate);\n    this.wireEvents();\n\n    if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector('.' + cls.RESOURCE_TOOLBAR_CONTAINER)) {\n      this.parent.resourceBase.generateResourceLevels([{\n        renderDates: this.parent.activeView.renderDates\n      }]);\n      this.renderResourceMobileLayout();\n    }\n\n    this.parent.notify(event.contentReady, {});\n  };\n\n  Agenda.prototype.eventLoad = function (args) {\n    this.dataSource = extend([], this.parent.eventsData, null, true);\n\n    for (var _i = 0, _a = this.parent.eventsData; _i < _a.length; _i++) {\n      var event_1 = _a[_i];\n      delete event_1.generatedDates;\n    }\n\n    var eventCollection = args.processedData;\n\n    if (this.parent.uiStateValues.isGroupAdaptive) {\n      var resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n      this.dataSource = this.parent.eventBase.filterEventsByResource(resource, this.dataSource);\n      eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);\n    }\n\n    this.parent.eventsProcessed = this.agendaBase.processAgendaEvents(eventCollection);\n    var agendaDate = util.resetTime(this.parent.selectedDate);\n    var tBody = this.parent.getContentTable();\n    tBody.innerHTML = '';\n    this.renderContent(tBody, agendaDate);\n    this.agendaBase.wireEventActions();\n    var contentArea = closest(tBody, '.' + cls.CONTENT_WRAP_CLASS);\n    contentArea.scrollTop = 1;\n  };\n\n  Agenda.prototype.refreshEvent = function (refreshDate) {\n    var processedData = [];\n\n    for (var _i = 0, _a = this.dataSource; _i < _a.length; _i++) {\n      var eventData = _a[_i];\n      var fields = this.parent.eventFields;\n      var data = eventData;\n\n      if (isNullOrUndefined(data[fields.recurrenceID]) && !isNullOrUndefined(data[fields.recurrenceRule]) && !isNullOrUndefined(data.generatedDates) && refreshDate >= data.generatedDates.end) {\n        processedData = processedData.concat(this.parent.eventBase.generateOccurrence(data, refreshDate));\n      }\n    }\n\n    this.parent.eventsProcessed = this.parent.eventsProcessed.concat(this.agendaBase.processAgendaEvents(processedData));\n  };\n\n  Agenda.prototype.renderContent = function (tBody, agendaDate) {\n    var fieldMapping = this.parent.eventFields;\n    var firstDate = new Date(agendaDate.getTime());\n    var lastDate = this.getEndDateFromStartDate(firstDate);\n    var isObject = this.appointmentFiltering(firstDate, lastDate);\n\n    if (isObject.length === 0) {\n      lastDate = firstDate;\n      firstDate = new Date(this.minDate.getTime());\n      isObject = this.appointmentFiltering(firstDate, lastDate);\n\n      if (isObject.length === 0) {\n        firstDate = lastDate;\n        lastDate = new Date(this.maxDate.getTime());\n        isObject = this.appointmentFiltering(firstDate, lastDate);\n      }\n    }\n\n    if (isObject.length > 0) {\n      var appoint = isObject;\n      agendaDate = appoint[0][fieldMapping.startTime];\n      agendaDate = new Date(new Date(agendaDate.getTime()).setHours(0, 0, 0, 0));\n      this.updateHeaderText(appoint[0][fieldMapping.startTime]);\n    }\n\n    var endDate;\n\n    if (!this.parent.hideEmptyAgendaDays || this.parent.agendaDaysCount > 0 && isObject.length > 0) {\n      var noOfDays = !this.parent.hideEmptyAgendaDays || !this.parent.activeViewOptions.allowVirtualScrolling || this.parent.agendaDaysCount < isObject.length ? this.parent.agendaDaysCount : isObject.length;\n\n      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n        var date = agendaDate;\n\n        if (!this.parent.activeViewOptions.group.byDate) {\n          this.parent.activeViewOptions.allowVirtualScrolling = false;\n          date = firstDate;\n\n          if (this.parent.headerModule) {\n            this.parent.headerModule.updateDateRange(this.parent.activeView.getDateRangeText());\n            this.parent.headerModule.updateHeaderItems('remove');\n          }\n        }\n\n        this.agendaBase.calculateResourceTableElement(tBody, this.parent.agendaDaysCount, date);\n      } else {\n        for (var day = 0; day < noOfDays; day++) {\n          var filterData = [];\n          filterData = this.appointmentFiltering(agendaDate);\n          var nTr = this.agendaBase.createTableRowElement(agendaDate, 'data');\n\n          if (this.element.querySelector('tr[aria-rowindex=\"' + parseInt(nTr.getAttribute('aria-rowindex'), 10) + '\"]')) {\n            continue;\n          } // if (this.isMonthFirstDate(agendaDate)) {\n          //     tBody.appendChild(this.renderMonthHeader(this.createTableRowElement(agendaDate, 'monthHeader')));\n          // }\n\n\n          var dTd = nTr.children[0];\n          var aTd = nTr.children[1];\n\n          if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays && filterData.length === 0) {\n            var elementType = !this.parent.hideEmptyAgendaDays && filterData.length === 0 ? 'noEvents' : 'data';\n            dTd.appendChild(this.agendaBase.createDateHeaderElement(agendaDate));\n            nTr.appendChild(dTd);\n            var cTd = this.agendaBase.createAgendaContentElement(elementType, filterData, aTd);\n            nTr.appendChild(cTd);\n\n            if (cTd.querySelectorAll('li').length > 0) {\n              tBody.appendChild(nTr);\n            }\n          } else if (this.parent.activeViewOptions.allowVirtualScrolling) {\n            day--;\n          }\n\n          if (this.isCurrentDate(new Date(agendaDate.getTime()))) {\n            addClass(dTd.children, cls.AGENDA_CURRENT_DAY_CLASS);\n          }\n\n          agendaDate = util.addDays(agendaDate, 1);\n\n          if (agendaDate.getTime() > lastDate.getTime()) {\n            break;\n          }\n        }\n      }\n\n      endDate = new Date(agendaDate.getTime() - util.MS_PER_DAY);\n    } else {\n      this.agendaBase.renderEmptyContent(tBody, agendaDate);\n      endDate = util.addDays(agendaDate, this.parent.agendaDaysCount - 1);\n    }\n\n    this.agendaDates = {\n      start: firstDate,\n      end: endDate\n    };\n  }; // private renderMonthHeader(mTr: Element): Element {\n  //     mTr.removeAttribute('aria-rowindex');\n  //     for (let td of [].slice.call(mTr.childNodes)) {\n  //         td.removeAttribute('aria-colindex');\n  //     }\n  //     let headerDate: Date = new Date(parseInt(mTr.children[0].getAttribute('data-date'), 10));\n  //     let div: Element = createElement('div', {\n  //         className: cls.DATE_HEADER_CLASS,\n  //         innerHTML: headerDate.toLocaleString(this.parent.locale, { month: 'long' }) + '&nbsp' + headerDate.getFullYear()\n  //     });\n  //     mTr.lastElementChild.appendChild(div);\n  //     return mTr;\n  // }\n\n\n  Agenda.prototype.agendaScrolling = function (event) {\n    this.parent.quickPopup.quickPopupHide();\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling) {\n      this.virtualScrolling(event);\n    }\n  };\n\n  Agenda.prototype.virtualScrolling = function (event) {\n    var target = event.target;\n    var scrollTop = target.scrollTop;\n    var scrollHeight = target.scrollHeight;\n    var offsetHeight = target.clientHeight;\n    var totalHeight = scrollTop + offsetHeight;\n    var direction = this.virtualScrollTop < scrollTop ? 'next' : 'previous';\n    var tBody = target.querySelector('tbody');\n    var emptyTBody = createElement('tbody');\n    var topElement = this.getElementFromScrollerPosition(event, direction);\n    var scrollDate = new Date(parseInt(topElement.getAttribute('data-date'), 0));\n    var filterDate;\n    var filterData;\n\n    if (scrollTop === 0) {\n      filterDate = this.getPreviousNextDate(util.addDays(scrollDate, -1), direction);\n      filterData = this.appointmentFiltering(filterDate.start, filterDate.end);\n\n      if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {\n        this.renderContent(emptyTBody, filterDate.start);\n        tBody.innerHTML = emptyTBody.innerHTML + tBody.innerHTML;\n        this.agendaBase.wireEventActions();\n\n        for (var s = 0, element = tBody.children; s < element.length; s++) {\n          if (element[s].getAttribute('aria-rowindex') === topElement.getAttribute('aria-colindex')) {\n            var scrollToValue = element[s].offsetTop - this.element.querySelector('.e-agenda-item').offsetHeight;\n            target.scrollTop = scrollToValue;\n            break;\n          }\n        }\n\n        this.updateHeaderText(scrollDate);\n      }\n    } else if (totalHeight === scrollHeight) {\n      filterDate = this.getPreviousNextDate(util.addDays(scrollDate, 1), direction);\n      filterData = this.appointmentFiltering(filterDate.start, filterDate.end);\n\n      if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {\n        this.renderContent(emptyTBody, filterDate.start);\n        tBody.innerHTML += emptyTBody.innerHTML;\n        this.agendaBase.wireEventActions();\n        this.updateHeaderText(scrollDate);\n      }\n    } else {\n      this.updateHeaderText(scrollDate);\n    }\n\n    this.virtualScrollTop = scrollTop;\n    var selectedElements = this.parent.eventBase.getSelectedAppointments();\n\n    if (selectedElements.length > 0) {\n      selectedElements[selectedElements.length - 1].focus();\n    }\n  };\n\n  Agenda.prototype.getElementFromScrollerPosition = function (event, direction) {\n    var filterElement;\n    var target = event.target;\n    var scrollTop = target.scrollTop;\n    var scrollHeight = target.scrollHeight;\n    var offsetHeight = target.clientHeight;\n    var totalHeight = scrollTop + offsetHeight;\n    var liCollection = [].slice.call(target.querySelectorAll('.e-agenda-item'));\n    var li;\n    var liDetails;\n\n    if (liCollection.length > 0) {\n      if (scrollTop === 0) {\n        li = liCollection[0];\n        filterElement = closest(li, '.' + cls.AGENDA_CELLS_CLASS);\n      } else if (totalHeight === scrollHeight) {\n        li = liCollection[liCollection.length - 1];\n        filterElement = closest(li, '.' + cls.AGENDA_CELLS_CLASS);\n      } else {\n        for (var a = 0, length_1 = liCollection.length; a < length_1; a++) {\n          li = liCollection[a];\n          liDetails = li.getBoundingClientRect();\n\n          if (liDetails.top >= 0) {\n            filterElement = closest(li, '.' + cls.AGENDA_CELLS_CLASS);\n            break;\n          }\n        }\n      }\n    }\n\n    return filterElement;\n  };\n\n  Agenda.prototype.updateHeaderText = function (date) {\n    if (this.parent.showHeaderBar) {\n      this.parent.headerModule.updateDateRange(this.getDateRangeText(date));\n    }\n  };\n\n  Agenda.prototype.getPreviousNextDate = function (date, type) {\n    var currentDate = new Date(date.getTime());\n    var firstDate = this.getStartDateFromEndDate(date);\n    var lastDate = this.getEndDateFromStartDate(date);\n    var daysCount = 0;\n\n    do {\n      var filterData = this.appointmentFiltering(currentDate);\n\n      if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {\n        daysCount++;\n      }\n\n      currentDate = util.addDays(currentDate, type === 'next' ? 1 : -1);\n\n      if (currentDate < firstDate || currentDate > lastDate) {\n        break;\n      }\n    } while (daysCount !== this.parent.agendaDaysCount);\n\n    var endDate = util.addDays(currentDate, type === 'next' ? -1 : 1);\n    return type === 'next' ? {\n      start: date,\n      end: util.addDays(endDate, 1)\n    } : {\n      start: endDate,\n      end: util.addDays(date, 1)\n    };\n  };\n\n  Agenda.prototype.appointmentFiltering = function (startDate, endDate) {\n    var dateStart;\n    var dateEnd;\n\n    if (!isNullOrUndefined(startDate) && isNullOrUndefined(endDate)) {\n      dateStart = util.resetTime(new Date(startDate.getTime()));\n      dateEnd = util.setTime(new Date(dateStart.getTime()), util.MS_PER_DAY);\n    } else {\n      dateStart = new Date(startDate.getTime());\n      dateEnd = new Date(endDate.getTime());\n    }\n\n    var filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);\n\n    if (filterData.length === 0) {\n      this.refreshEvent(startDate);\n      filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);\n    }\n\n    return filterData;\n  };\n\n  Agenda.prototype.getStartDateFromEndDate = function (endDate) {\n    var filterDate;\n    var fieldMapping = this.parent.eventFields;\n\n    if (this.parent.eventsProcessed.length > 0) {\n      var firstDate = Math.min.apply(Math, this.parent.eventsProcessed.map(function (a) {\n        var date = a[fieldMapping.startTime];\n        return date.getTime();\n      }));\n      filterDate = this.parent.hideEmptyAgendaDays ? new Date(firstDate) : this.minDate;\n    } else {\n      filterDate = this.parent.hideEmptyAgendaDays ? util.addMonths(endDate, -1) : this.minDate;\n    }\n\n    return util.resetTime(filterDate);\n  };\n\n  Agenda.prototype.getEndDateFromStartDate = function (startDate) {\n    var filterDate;\n    var fieldMapping = this.parent.eventFields;\n\n    if (this.parent.eventsProcessed.length > 0) {\n      var lastDate = Math.max.apply(Math, this.parent.eventsProcessed.map(function (a) {\n        var date = a[fieldMapping.endTime];\n        return date.getTime();\n      }));\n      filterDate = this.parent.hideEmptyAgendaDays ? new Date(lastDate) : this.maxDate;\n    } else {\n      filterDate = this.parent.hideEmptyAgendaDays ? util.addMonths(startDate, 1) : this.maxDate;\n    }\n\n    return util.resetTime(util.addDays(filterDate, 1));\n  };\n\n  Agenda.prototype.getNextPreviousDate = function (type) {\n    var noOfDays = type === 'next' ? 1 : -1;\n    return util.addDays(this.parent.selectedDate, noOfDays);\n  };\n\n  Agenda.prototype.startDate = function () {\n    return util.resetTime(this.parent.selectedDate);\n  };\n\n  Agenda.prototype.endDate = function () {\n    if (this.parent.activeViewOptions.allowVirtualScrolling) {\n      return this.getEndDateFromStartDate(this.startDate());\n    } else {\n      return util.addDays(this.startDate(), this.parent.agendaDaysCount);\n    }\n  };\n\n  Agenda.prototype.getDateRangeText = function (date) {\n    var formatDate = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : 'MMMM y';\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling || this.parent.isAdaptive) {\n      var currentDate = isNullOrUndefined(date) ? this.parent.selectedDate : date;\n      return this.parent.globalize.formatDate(currentDate, {\n        format: formatDate\n      });\n    } else {\n      var startDate = this.parent.selectedDate;\n      var endDate = util.addDays(startDate, this.parent.agendaDaysCount - 1);\n      return this.formatDateRange(startDate, endDate);\n    }\n  };\n\n  Agenda.prototype.dayNavigationClick = function (e) {\n    var date = this.parent.getDateFromElement(closest(e.currentTarget, '.' + cls.AGENDA_CELLS_CLASS));\n\n    if (!isNullOrUndefined(date) && !this.parent.isAdaptive) {\n      this.parent.setProperties({\n        selectedDate: date\n      }, true);\n      this.parent.changeView('Day');\n    }\n  }; // private isMonthFirstDate(date: Date): boolean {\n  //     return date.getDate() === 1;\n  // }\n\n\n  Agenda.prototype.wireEvents = function () {\n    EventHandler.add(this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS), event.scroll, this.agendaScrolling, this);\n  };\n\n  Agenda.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS), event.scroll, this.agendaScrolling);\n    var dateHeaderElement = [].slice.call(this.element.querySelectorAll('.e-m-date'));\n\n    for (var _i = 0, dateHeaderElement_1 = dateHeaderElement; _i < dateHeaderElement_1.length; _i++) {\n      var element = dateHeaderElement_1[_i];\n      EventHandler.remove(element, 'click', this.dayNavigationClick);\n    }\n  };\n\n  Agenda.prototype.addEventListener = function () {\n    this.parent.on(event.scrollUiUpdate, this.onAgendaScrollUiUpdate, this);\n    this.parent.on(event.dataReady, this.eventLoad, this);\n  };\n\n  Agenda.prototype.removeEventListener = function () {\n    this.parent.off(event.scrollUiUpdate, this.onAgendaScrollUiUpdate);\n    this.parent.off(event.dataReady, this.eventLoad);\n  };\n\n  Agenda.prototype.onAgendaScrollUiUpdate = function () {\n    var headerHeight = this.getHeaderBarHeight();\n\n    if (this.parent.headerModule) {\n      if (this.parent.activeViewOptions.allowVirtualScrolling) {\n        this.parent.headerModule.updateHeaderItems('add');\n      } else {\n        this.parent.headerModule.updateHeaderItems('remove');\n      }\n    }\n\n    var contentArea = this.element.querySelector('.' + cls.CONTENT_WRAP_CLASS);\n    contentArea.style.height = formatUnit(this.parent.element.offsetHeight - headerHeight);\n  };\n  /**\n   * To destroy the agenda.\n   * @return {void}\n   * @private\n   */\n\n\n  Agenda.prototype.destroy = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.element) {\n      this.unWireEvents();\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      remove(this.element);\n      this.element = null;\n\n      if (this.parent.headerModule && this.parent.activeViewOptions.allowVirtualScrolling) {\n        this.parent.headerModule.updateHeaderItems('remove');\n      }\n    }\n  };\n\n  return Agenda;\n}(ViewBase);\n\nexport { Agenda };","map":null,"metadata":{},"sourceType":"module"}