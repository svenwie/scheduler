{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { EventHandler, Property, NotifyPropertyChanges, Animation, attributes } from '@syncfusion/ej2-base';\nimport { Event, remove, removeClass } from '@syncfusion/ej2-base';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar HIDESPINNER = 'e-hide-spinner';\nvar PROGRESS = 'e-progress';\nvar PROGRESSACTIVE = 'e-progress-active';\nvar CONTENTCLS = 'e-btn-content';\n/**\n * The ProgressButton visualizes the progression of an operation to indicate the user\n * that a process is happening in the background with visual representation.\n * ```html\n * <button id=\"element\"></button>\n * ```\n * ```typescript\n * <script>\n * var progressButtonObj = new ProgressButton({ content: 'Progress Button' });\n * progressButtonObj.appendTo(\"#element\");\n * </script>\n * ```\n */\n\nvar ProgressButton =\n/** @class */\nfunction (_super) {\n  __extends(ProgressButton, _super);\n  /**\n   * Constructor for creating the widget\n   * @param  {ProgressButtonModel} options?\n   * @param  {string|HTMLButtonElement} element?\n   */\n\n\n  function ProgressButton(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.step = 1;\n    return _this;\n  }\n\n  ProgressButton.prototype.preRender = function () {\n    _super.prototype.preRender.call(this);\n  };\n  /**\n   * Initialize the Component rendering\n   * @returns void\n   * @private\n   */\n\n\n  ProgressButton.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    this.init();\n    this.wireEvents();\n    this.setAria();\n  };\n  /**\n   * Starts the button progress at the specified percent.\n   * @param percent Starts the button progress at this percent.\n   * @returns void\n   */\n\n\n  ProgressButton.prototype.start = function (percent) {\n    this.isPaused = false;\n    this.startProgress(percent ? percent : this.percent, this.progressTime);\n  };\n  /**\n   * Stops the button progress.\n   * @returns void\n   */\n\n\n  ProgressButton.prototype.stop = function () {\n    this.isPaused = true;\n    cancelAnimationFrame(this.timerId);\n  };\n  /**\n   * Get component name.\n   * @returns string\n   * @private\n   */\n\n\n  ProgressButton.prototype.getModuleName = function () {\n    return 'progress-btn';\n  };\n  /**\n   * Destroys the widget.\n   * @returns void\n   */\n\n\n  ProgressButton.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.unWireEvents();\n    this.element.innerHTML = '';\n    removeClass([this.element], [HIDESPINNER, PROGRESSACTIVE, 'e-round-corner', 'e-' + _super.prototype.getModuleName.call(this)]);\n  };\n\n  ProgressButton.prototype.init = function () {\n    this.element.classList.add('e-' + _super.prototype.getModuleName.call(this));\n    this.setContent();\n    this.createSpinner();\n\n    if (this.enableProgress) {\n      this.createProgress();\n    }\n  };\n\n  ProgressButton.prototype.createSpinner = function () {\n    var spinner = this.createElement('span', {\n      className: 'e-spinner'\n    });\n    this.setSpinPosition(spinner);\n    createSpinner({\n      target: spinner,\n      width: this.spinSettings.width || 16,\n      template: this.spinSettings.template\n    }, this.createElement);\n  };\n\n  ProgressButton.prototype.setSpinPosition = function (ele) {\n    var position = this.spinSettings.position || 'Left';\n\n    if (position === 'Left' || position === 'Top') {\n      this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);\n    } else {\n      this.element.appendChild(ele);\n    }\n\n    this.element.classList.add('e-spin-' + position.toLowerCase());\n  };\n\n  ProgressButton.prototype.createProgress = function () {\n    this.element.appendChild(this.createElement('span', {\n      className: PROGRESS\n    }));\n  };\n\n  ProgressButton.prototype.setContent = function () {\n    var cont = this.element.innerHTML;\n    this.element.innerHTML = '';\n    this.element.appendChild(this.createElement('span', {\n      className: CONTENTCLS,\n      innerHTML: cont\n    }));\n  };\n\n  ProgressButton.prototype.clickHandler = function () {\n    if (this.element.classList.contains(PROGRESSACTIVE)) {\n      return;\n    }\n\n    this.startProgress();\n  };\n\n  ProgressButton.prototype.startProgress = function (percent, progressTime) {\n    var _this = this;\n\n    var clsList = this.element.classList;\n    var isVertical = clsList.contains('e-vertical');\n    clsList.add(PROGRESSACTIVE);\n\n    if (!clsList.contains(HIDESPINNER)) {\n      showSpinner(this.element);\n\n      if (!this.enableProgress) {\n        setTimeout(function () {\n          _this.hideSpin(); // tslint:disable-next-line\n\n        }, this.duration);\n      }\n    }\n\n    if (this.enableProgress) {\n      this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);\n    }\n\n    this.startContAnimate();\n  };\n\n  ProgressButton.prototype.startAnimate = function (timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {\n    var _this = this;\n\n    try {\n      var args_1;\n      var timeDiff = timestamp - prevTime;\n      var stepTime = this.duration * step / 100;\n      var timeDiffBuffer = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;\n      this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer;\n      prevTime = timestamp - timeDiffBuffer;\n      percent = percent + (timeDiff - timeDiffBuffer) / this.duration * 100;\n      prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;\n      args_1 = {\n        percent: prevPercent,\n        currentDuration: progressTime,\n        step: step\n      };\n\n      if (percent === 0) {\n        this.trigger('begin', args_1);\n      } else if (percent === 100 || progressTime === this.duration) {\n        this.trigger('end', args_1);\n      } else {\n        this.trigger('progress', args_1);\n      }\n\n      if (percent !== args_1.percent && args_1.percent !== prevPercent) {\n        percent = args_1.percent;\n      }\n\n      this.percent = percent;\n      this.step = args_1.step;\n\n      if ((progressTime - prevProgressTime) % (this.duration * args_1.step / 100) === 0 || percent === 100) {\n        this.timerId = requestAnimationFrame(function () {\n          _this.element.getElementsByClassName(PROGRESS)[0].style[isVertical ? 'height' : 'width'] = percent + '%';\n\n          _this.element.setAttribute('aria-valuenow', percent.toString());\n        });\n        prevPercent = percent;\n        prevProgressTime = progressTime;\n      }\n\n      if (!this.isPaused) {\n        if (progressTime < this.duration && percent < 100) {\n          setTimeout(function () {\n            _this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args_1.step, prevProgressTime, isVertical); // tslint:disable-next-line\n\n          }, this.duration / 100 - timeDiffBuffer);\n        } else {\n          setTimeout(function () {\n            _this.progressTime = _this.percent = 0;\n            _this.element.getElementsByClassName(PROGRESS)[0].style[isVertical ? 'height' : 'width'] = '0%';\n\n            _this.element.setAttribute('aria-valuenow', '0');\n\n            _this.hideSpin(); // tslint:disable-next-line\n\n          }, 100);\n        }\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.timerId);\n      this.trigger('fail', e);\n    }\n  };\n\n  ProgressButton.prototype.startContAnimate = function () {\n    var _this = this;\n\n    var ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n\n    if (this.animationSettings.effect !== 'None') {\n      new Animation({}).animate(ele, {\n        duration: this.animationSettings.duration,\n        name: 'Progress' + this.animationSettings.effect,\n        timingFunction: this.animationSettings.easing,\n        begin: function begin() {\n          if (_this.spinSettings.position === 'Center') {\n            _this.setSpinnerSize();\n          }\n        },\n        end: function end() {\n          ele.classList.add('e-animate-end');\n        }\n      });\n    } else if (this.spinSettings.position === 'Center') {\n      this.setSpinnerSize();\n    }\n  };\n\n  ProgressButton.prototype.setSpinnerSize = function () {\n    var ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n    var spinner = this.element.getElementsByClassName('e-spinner')[0];\n    spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + 'px';\n    spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + 'px';\n    ele.classList.add('e-cont-animate');\n  };\n\n  ProgressButton.prototype.hideSpin = function () {\n    var cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n\n    if (!this.element.classList.contains(HIDESPINNER)) {\n      hideSpinner(this.element);\n    }\n\n    this.element.classList.remove(PROGRESSACTIVE);\n\n    if (this.animationSettings.effect !== 'None') {\n      cont.classList.remove('e-animate-end');\n    }\n\n    if (this.spinSettings.position === 'Center') {\n      var ele = this.element.getElementsByClassName('e-spinner')[0];\n      cont.classList.remove('e-cont-animate');\n      ele.style.width = 'auto';\n      ele.style.height = 'auto';\n    }\n  };\n\n  ProgressButton.prototype.setIconSpan = function () {\n    var cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n    var iconSpan = this.element.getElementsByClassName('e-btn-icon')[0];\n\n    if (cont.childNodes[0] && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n      cont.insertBefore(iconSpan, cont.childNodes[0]);\n    } else {\n      cont.appendChild(iconSpan);\n    }\n  };\n\n  ProgressButton.prototype.setAria = function () {\n    attributes(this.element, {\n      'aria-label': this.element.textContent + ' progress',\n      'aria-valuemin': '0',\n      'aria-valuemax': '100',\n      'aria-valuenow': '0'\n    });\n  };\n\n  ProgressButton.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n  };\n\n  ProgressButton.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {ProgressButton} newProp\n   * @param  {ProgressButton} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  ProgressButton.prototype.onPropertyChanged = function (newProp, oldProp) {\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'content':\n          this.setContent();\n          this.createSpinner();\n\n          if (this.enableProgress) {\n            this.createProgress();\n          }\n\n          this.element.setAttribute('aria-label', this.element.textContent + ' progress');\n          break;\n\n        case 'iconCss':\n          if (!oldProp.iconCss) {\n            this.setIconSpan();\n          }\n\n          break;\n\n        case 'iconPosition':\n          this.setIconSpan();\n          break;\n\n        case 'enableProgress':\n          if (newProp.enableProgress) {\n            this.createProgress();\n          } else {\n            remove(this.element.getElementsByClassName(PROGRESS)[0]);\n          }\n\n          break;\n      }\n    }\n  };\n\n  __decorate([Property(false)], ProgressButton.prototype, \"enableProgress\", void 0);\n\n  __decorate([Property(2000)], ProgressButton.prototype, \"duration\", void 0);\n\n  __decorate([Property('Left')], ProgressButton.prototype, \"iconPosition\", void 0);\n\n  __decorate([Property('')], ProgressButton.prototype, \"iconCss\", void 0);\n\n  __decorate([Property(false)], ProgressButton.prototype, \"disabled\", void 0);\n\n  __decorate([Property(false)], ProgressButton.prototype, \"isPrimary\", void 0);\n\n  __decorate([Property('')], ProgressButton.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('')], ProgressButton.prototype, \"content\", void 0);\n\n  __decorate([Property(false)], ProgressButton.prototype, \"isToggle\", void 0);\n\n  __decorate([Property({\n    template: null,\n    width: 16,\n    position: 'Left'\n  })], ProgressButton.prototype, \"spinSettings\", void 0);\n\n  __decorate([Property({\n    duration: 400,\n    effect: 'None',\n    easing: 'ease'\n  })], ProgressButton.prototype, \"animationSettings\", void 0);\n\n  __decorate([Event()], ProgressButton.prototype, \"created\", void 0);\n\n  __decorate([Event()], ProgressButton.prototype, \"begin\", void 0);\n\n  __decorate([Event()], ProgressButton.prototype, \"progress\", void 0);\n\n  __decorate([Event()], ProgressButton.prototype, \"end\", void 0);\n\n  __decorate([Event()], ProgressButton.prototype, \"fail\", void 0);\n\n  ProgressButton = __decorate([NotifyPropertyChanges], ProgressButton);\n  return ProgressButton;\n}(Button);\n\nexport { ProgressButton };","map":null,"metadata":{},"sourceType":"module"}