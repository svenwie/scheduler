{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; /// <reference path='../calendar/calendar-model.d.ts'/>\n\n\nimport { EventHandler, Property, Internationalization, NotifyPropertyChanges } from '@syncfusion/ej2-base';\nimport { KeyboardEvents, Animation, Event, L10n, Browser, formatUnit } from '@syncfusion/ej2-base';\nimport { detach, addClass, removeClass, closest, attributes } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, setValue, getUniqueID } from '@syncfusion/ej2-base';\nimport { Popup } from '@syncfusion/ej2-popups';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { Calendar } from '../calendar/calendar'; //class constant defination\n\nvar DATEWRAPPER = 'e-date-wrapper';\nvar ROOT = 'e-datepicker';\nvar POPUPWRAPPER = 'e-popup-wrapper';\nvar INPUTWRAPPER = 'e-input-group-icon';\nvar POPUP = 'e-popup';\nvar INPUTCONTAINER = 'e-input-group';\nvar INPUTFOCUS = 'e-input-focus';\nvar INPUTROOT = 'e-input';\nvar ERROR = 'e-error';\nvar RTL = 'e-rtl';\nvar LINK = 'e-day';\nvar ACTIVE = 'e-active';\nvar OVERFLOW = 'e-date-overflow';\nvar DATEICON = 'e-date-icon';\nvar ICONS = 'e-icons';\nvar OPENDURATION = 300;\nvar CLOSEDURATION = 200;\nvar OFFSETVALUE = 4;\n/**\n * Represents the DatePicker component that allows user to select\n * or enter a date value.\n * ```html\n * <input id=\"datepicker\"/>\n * ```\n * ```typescript\n * <script>\n *   let datePickerObject:DatePicker = new DatePicker({ value: new Date() });\n *   datePickerObject.appendTo(\"#datepicker\");\n * </script>\n * ```\n */\n\nvar DatePicker =\n/** @class */\nfunction (_super) {\n  __extends(DatePicker, _super);\n  /**\n   * Constructor for creating the widget.\n   */\n\n\n  function DatePicker(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.previousElementValue = '';\n    _this.isDateIconClicked = false;\n    _this.keyConfigs = {\n      altUpArrow: 'alt+uparrow',\n      altDownArrow: 'alt+downarrow',\n      escape: 'escape',\n      enter: 'enter',\n      controlUp: 'ctrl+38',\n      controlDown: 'ctrl+40',\n      moveDown: 'downarrow',\n      moveUp: 'uparrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      select: 'enter',\n      home: 'home',\n      end: 'end',\n      pageUp: 'pageup',\n      pageDown: 'pagedown',\n      shiftPageUp: 'shift+pageup',\n      shiftPageDown: 'shift+pagedown',\n      controlHome: 'ctrl+home',\n      controlEnd: 'ctrl+end',\n      tab: 'tab'\n    };\n    _this.calendarKeyConfigs = {\n      escape: 'escape',\n      enter: 'enter',\n      tab: 'tab'\n    };\n    return _this;\n  }\n  /**\n   * To Initialize the control rendering.\n   * @return void\n   * @private\n   */\n\n\n  DatePicker.prototype.render = function () {\n    this.initialize();\n    this.bindEvents();\n  };\n\n  DatePicker.prototype.setAllowEdit = function () {\n    if (this.allowEdit) {\n      if (!this.readonly) {\n        this.inputElement.removeAttribute('readonly');\n      }\n    } else {\n      attributes(this.inputElement, {\n        'readonly': ''\n      });\n    }\n  };\n\n  DatePicker.prototype.initialize = function () {\n    this.createInput();\n    this.setAllowEdit();\n    this.updateInput();\n    this.previousElementValue = this.inputElement.value;\n    this.previousDate = new Date(+this.value);\n  };\n\n  DatePicker.prototype.createInput = function () {\n    var ariaAttrs = {\n      'aria-live': 'assertive',\n      'aria-atomic': 'true',\n      'aria-haspopup': 'true',\n      'aria-activedescendant': 'null',\n      'aria-owns': this.element.id + '_options',\n      'aria-expanded': 'false',\n      'role': 'combobox',\n      'autocomplete': 'off',\n      'autocorrect': 'off',\n      'autocapitalize': 'off',\n      'spellcheck': 'false'\n    };\n\n    if (this.getModuleName() === 'datepicker') {\n      var l10nLocale = {\n        placeholder: null\n      };\n      this.globalize = new Internationalization(this.locale);\n      this.l10n = new L10n('datepicker', l10nLocale, this.locale);\n      this.setProperties({\n        placeholder: this.placeholder || this.l10n.getConstant('placeholder')\n      }, true);\n    }\n\n    this.inputWrapper = Input.createInput({\n      element: this.inputElement,\n      floatLabelType: this.floatLabelType,\n      properties: {\n        readonly: this.readonly,\n        placeholder: this.placeholder,\n        cssClass: this.cssClass,\n        enabled: this.enabled,\n        enableRtl: this.enableRtl,\n        showClearButton: this.showClearButton\n      },\n      buttons: [INPUTWRAPPER + ' ' + DATEICON + ' ' + ICONS]\n    }, this.createElement);\n    this.setWidth(this.width);\n\n    if (this.inputElement.name !== '') {\n      this.inputElement.setAttribute('name', '' + this.inputElement.getAttribute('name'));\n    } else {\n      this.inputElement.setAttribute('name', '' + this.element.id);\n    }\n\n    attributes(this.inputElement, ariaAttrs);\n\n    if (!this.enabled) {\n      this.inputElement.setAttribute('aria-disabled', 'true');\n    } else {\n      this.inputElement.setAttribute('aria-disabled', 'false');\n    }\n\n    Input.addAttributes({\n      'aria-label': 'select'\n    }, this.inputWrapper.buttons[0]);\n    addClass([this.inputWrapper.container], DATEWRAPPER);\n  };\n\n  DatePicker.prototype.updateInput = function () {\n    if (this.value && !this.isCalendar()) {\n      this.disabledDates();\n    }\n\n    if (+new Date('' + this.value)) {\n      if (typeof this.value === 'string') {\n        this.value = this.checkDateValue(new Date('' + this.value));\n        var dateOptions = void 0;\n\n        if (this.getModuleName() === 'datetimepicker') {\n          dateOptions = {\n            format: !isNullOrUndefined(this.format) ? this.format : this.dateTimeFormat,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n        } else {\n          dateOptions = {\n            format: this.format,\n            type: 'dateTime',\n            skeleton: 'yMd'\n          };\n        }\n\n        var dateString = this.globalize.formatDate(this.value, dateOptions);\n        this.setProperties({\n          value: this.globalize.parseDate(dateString, dateOptions)\n        }, true);\n      }\n    } else {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n\n    if (this.strictMode) {\n      //calls the Calendar processDate protected method to update the date value according to the strictMode true behaviour.\n      _super.prototype.validateDate.call(this);\n\n      this.minMaxUpdates();\n\n      _super.prototype.minMaxUpdate.call(this);\n    }\n\n    if (!isNullOrUndefined(this.value)) {\n      var dateValue = this.value;\n      var dateString = void 0;\n      var tempFormat = !isNullOrUndefined(this.format) ? this.format : this.dateTimeFormat;\n\n      if (this.getModuleName() === 'datetimepicker') {\n        dateString = this.globalize.formatDate(this.value, {\n          format: tempFormat,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        });\n      } else {\n        dateString = this.globalize.formatDate(this.value, {\n          format: this.format,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        });\n      }\n\n      if (+dateValue <= +this.max && +dateValue >= +this.min) {\n        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);\n      } else {\n        var value = +dateValue >= +this.max || !+this.value || !+this.value || +dateValue <= +this.min;\n\n        if (!this.strictMode && value) {\n          Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n      }\n    }\n\n    if (isNullOrUndefined(this.value) && this.strictMode) {\n      Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n\n    this.changedArgs = {\n      value: this.value\n    };\n    this.errorClass();\n  };\n\n  ;\n\n  DatePicker.prototype.minMaxUpdates = function () {\n    if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode) {\n      this.setProperties({\n        value: this.min\n      }, true);\n      this.changedArgs = {\n        value: this.value\n      };\n    } else {\n      if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode) {\n        this.setProperties({\n          value: this.max\n        }, true);\n        this.changedArgs = {\n          value: this.value\n        };\n      }\n    }\n  };\n\n  DatePicker.prototype.bindEvents = function () {\n    if (this.enabled) {\n      EventHandler.add(this.inputWrapper.buttons[0], 'mousedown touchstart', this.dateIconHandler, this);\n      EventHandler.add(this.inputElement, 'focus', this.inputFocusHandler, this);\n      EventHandler.add(this.inputElement, 'blur', this.inputBlurHandler, this); // To prevent the twice triggering.\n\n      EventHandler.add(this.inputElement, 'change', this.inputChangeHandler, this);\n\n      if (this.showClearButton) {\n        EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n      }\n\n      if (this.formElement) {\n        EventHandler.add(this.formElement, 'reset', this.resetFormHandler, this);\n      }\n    } else {\n      EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown touchstart', this.dateIconHandler);\n      EventHandler.remove(this.inputElement, 'focus', this.inputFocusHandler);\n      EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);\n      EventHandler.remove(this.inputElement, 'change', this.inputChangeHandler);\n\n      if (this.showClearButton) {\n        EventHandler.remove(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler);\n      }\n\n      if (this.formElement) {\n        EventHandler.remove(this.formElement, 'reset', this.resetFormHandler);\n      }\n    }\n\n    this.keyboardModules = new KeyboardEvents(this.inputElement, {\n      eventName: 'keydown',\n      keyAction: this.inputKeyActionHandle.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n  };\n\n  DatePicker.prototype.resetFormHandler = function () {\n    if (this.inputElement.getAttribute('value')) {\n      this.value = this.checkDateValue(new Date('' + this.element.getAttribute('value')));\n    } else {\n      this.value = null;\n\n      if (this.inputElement) {\n        Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n        attributes(this.inputElement, {\n          'aria-invalid': 'false'\n        });\n        removeClass([this.inputWrapper.container], ERROR);\n      }\n    }\n  };\n\n  DatePicker.prototype.inputChangeHandler = function (e) {\n    e.stopPropagation();\n  };\n\n  DatePicker.prototype.bindClearEvent = function () {\n    if (this.showClearButton && this.inputWrapper.clearButton) {\n      EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n    }\n  };\n\n  DatePicker.prototype.resetHandler = function (e) {\n    e.preventDefault();\n    this.clear(e);\n  };\n\n  DatePicker.prototype.clear = function (event) {\n    this.setProperties({\n      value: null\n    }, true);\n    Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n    this.updateInput();\n    this.changeEvent(event);\n  };\n\n  DatePicker.prototype.dateIconHandler = function (e) {\n    if (Browser.isDevice) {\n      this.element.setAttribute('readonly', 'readonly');\n    }\n\n    e.preventDefault();\n\n    if (!this.readonly) {\n      if (this.isCalendar()) {\n        this.hide(e);\n      } else {\n        this.isDateIconClicked = true;\n        this.show(null, e);\n\n        if (this.getModuleName() === 'datetimepicker') {\n          this.inputElement.focus();\n        }\n\n        this.inputElement.focus();\n        addClass([this.inputWrapper.container], [INPUTFOCUS]);\n        addClass(this.inputWrapper.buttons, ACTIVE);\n      }\n    }\n  };\n\n  DatePicker.prototype.CalendarKeyActionHandle = function (e) {\n    switch (e.action) {\n      case 'escape':\n        if (this.isCalendar()) {\n          this.hide(e);\n        } else {\n          this.inputWrapper.container.children[this.index].blur();\n        }\n\n        break;\n\n      case 'enter':\n        if (!this.isCalendar()) {\n          this.show(null, e);\n        } else {\n          if (+this.value !== +this.currentDate && !this.isCalendar()) {\n            this.inputWrapper.container.children[this.index].focus();\n          }\n        }\n\n        if (this.getModuleName() === 'datetimepicker') {\n          this.inputElement.focus();\n        }\n\n        break;\n\n      case 'tab':\n        this.hide(e);\n    }\n  };\n\n  DatePicker.prototype.inputFocusHandler = function () {\n    var focusArguments = {\n      model: this\n    };\n    this.isDateIconClicked = false;\n    this.trigger('focus', focusArguments);\n  };\n\n  DatePicker.prototype.inputBlurHandler = function (e) {\n    this.strictModeUpdate();\n    this.updateInput();\n    this.changeTrigger(e);\n    this.errorClass();\n\n    if (this.isCalendar() && document.activeElement === this.inputElement) {\n      this.hide(e);\n    }\n\n    if (this.getModuleName() === 'datepicker') {\n      var blurArguments = {\n        model: this\n      };\n      this.trigger('blur', blurArguments);\n    }\n\n    if (this.isCalendar()) {\n      this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {\n        eventName: 'keydown',\n        keyAction: this.CalendarKeyActionHandle.bind(this),\n        keyConfigs: this.calendarKeyConfigs\n      });\n    }\n  };\n\n  DatePicker.prototype.documentHandler = function (e) {\n    if (e.type !== 'touchstart') {\n      e.preventDefault();\n    }\n\n    var target = e.target;\n\n    if (!closest(target, '.e-datepicker.e-popup-wrapper') && !(closest(target, '.' + INPUTCONTAINER) === this.inputWrapper.container) && !target.classList.contains('e-day')) {\n      this.hide(e);\n    }\n  };\n\n  DatePicker.prototype.inputKeyActionHandle = function (e) {\n    switch (e.action) {\n      case 'altUpArrow':\n        this.hide(e);\n        this.inputElement.focus();\n        break;\n\n      case 'altDownArrow':\n        this.strictModeUpdate();\n        this.updateInput();\n        this.changeTrigger(e);\n\n        if (this.getModuleName() === 'datepicker') {\n          this.show(null, e);\n        }\n\n        break;\n\n      case 'escape':\n        this.hide(e);\n        break;\n\n      case 'enter':\n        this.strictModeUpdate();\n        this.updateInput();\n        this.changeTrigger(e);\n        this.errorClass();\n\n        if (!this.isCalendar() && document.activeElement === this.inputElement) {\n          this.hide(e);\n        }\n\n        if (this.isCalendar()) {\n          e.preventDefault();\n        }\n\n        break;\n\n      case 'tab':\n        this.strictModeUpdate();\n        this.updateInput();\n        this.changeTrigger(e);\n        this.errorClass();\n        this.hide(e);\n        break;\n\n      default:\n        this.previousDate = !isNullOrUndefined(this.value) && new Date(+this.value) || null;\n\n        if (this.isCalendar()) {\n          _super.prototype.keyActionHandle.call(this, e);\n        }\n\n    }\n  };\n\n  DatePicker.prototype.strictModeUpdate = function () {\n    var format;\n\n    if (this.getModuleName() === 'datetimepicker') {\n      format = !isNullOrUndefined(this.format) ? this.format : this.dateTimeFormat;\n    } else {\n      format = isNullOrUndefined(this.format) ? this.format : this.format.replace('dd', 'd');\n    }\n\n    if (!isNullOrUndefined(format)) {\n      var len = format.split('M').length - 1;\n\n      if (len < 3) {\n        format = format.replace('MM', 'M');\n      }\n    }\n\n    var dateOptions;\n\n    if (this.getModuleName() === 'datetimepicker') {\n      dateOptions = {\n        format: !isNullOrUndefined(this.format) ? this.format : this.dateTimeFormat,\n        type: 'dateTime',\n        skeleton: 'yMd'\n      };\n    } else {\n      dateOptions = {\n        format: format,\n        type: 'dateTime',\n        skeleton: 'yMd'\n      };\n    }\n\n    var date;\n\n    if (this.getModuleName() === 'datetimepicker') {\n      if (this.checkDateValue(this.globalize.parseDate(this.inputElement.value, dateOptions))) {\n        date = this.globalize.parseDate(this.inputElement.value, dateOptions);\n      } else {\n        date = this.globalize.parseDate(this.inputElement.value, {\n          type: 'dateTime',\n          skeleton: 'yMd'\n        });\n      }\n    } else {\n      date = this.globalize.parseDate(this.inputElement.value, dateOptions);\n    }\n\n    if (this.strictMode && date) {\n      Input.setValue(this.globalize.formatDate(date, dateOptions), this.inputElement, this.floatLabelType, this.showClearButton);\n\n      if (this.inputElement.value !== this.previousElementValue) {\n        this.setProperties({\n          value: date\n        }, true);\n      }\n    } else if (!this.strictMode) {\n      if (this.inputElement.value !== this.previousElementValue) {\n        this.setProperties({\n          value: date\n        }, true);\n      }\n    }\n\n    if (this.strictMode && !date && this.inputElement.value === '') {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n\n    if (isNaN(+this.value)) {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n\n    if (isNullOrUndefined(this.value)) {\n      this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n    }\n  };\n\n  DatePicker.prototype.createCalendar = function () {\n    var _this = this;\n\n    this.popupWrapper = this.createElement('div', {\n      className: '' + ROOT + ' ' + POPUPWRAPPER\n    });\n\n    if (!isNullOrUndefined(this.cssClass)) {\n      this.popupWrapper.classList.add(this.cssClass);\n    }\n\n    if (Browser.isDevice) {\n      this.modelHeader();\n      this.modal = this.createElement('div');\n      this.modal.className = '' + ROOT + ' e-date-modal';\n      document.body.className += ' ' + OVERFLOW;\n      this.modal.style.display = 'block';\n      document.body.appendChild(this.modal);\n    } //this.calendarElement represent the Calendar object from the Calendar class.\n\n\n    this.calendarElement.querySelector('table tbody').className = '';\n    this.popupObj = new Popup(this.popupWrapper, {\n      content: this.calendarElement,\n      relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,\n      position: Browser.isDevice ? {\n        X: 'center',\n        Y: 'center'\n      } : {\n        X: 'left',\n        Y: 'bottom'\n      },\n      offsetY: OFFSETVALUE,\n      targetType: 'container',\n      enableRtl: this.enableRtl,\n      zIndex: this.zIndex,\n      collision: Browser.isDevice ? {\n        X: 'fit',\n        Y: 'fit'\n      } : {\n        X: 'flip',\n        Y: 'flip'\n      },\n      open: function open() {\n        if (_this.getModuleName() !== 'datetimepicker') {\n          if (document.activeElement !== _this.inputElement) {\n            _this.calendarElement.children[1].firstElementChild.focus();\n\n            _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {\n              eventName: 'keydown',\n              keyAction: _this.CalendarKeyActionHandle.bind(_this),\n              keyConfigs: _this.calendarKeyConfigs\n            });\n            _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {\n              eventName: 'keydown',\n              keyAction: _this.CalendarKeyActionHandle.bind(_this),\n              keyConfigs: _this.calendarKeyConfigs\n            });\n          }\n        }\n      },\n      close: function close() {\n        if (_this.isDateIconClicked) {\n          _this.inputWrapper.container.children[_this.index].focus();\n        }\n\n        if (_this.value) {\n          _this.disabledDates();\n        }\n\n        if (_this.popupObj) {\n          _this.popupObj.destroy();\n        }\n\n        detach(_this.popupWrapper);\n        _this.popupObj = _this.popupWrapper = null;\n\n        _this.setAriaAttributes();\n      }\n    });\n    this.popupObj.element.classList.add(this.cssClass);\n    this.setAriaAttributes();\n  };\n\n  DatePicker.prototype.modelHeader = function () {\n    var modelHeader = this.createElement('div', {\n      className: 'e-model-header'\n    });\n    var yearHeading = this.createElement('h1', {\n      className: 'e-model-year'\n    });\n    var h2 = this.createElement('div');\n    var daySpan = this.createElement('span', {\n      className: 'e-model-day'\n    });\n    var monthSpan = this.createElement('span', {\n      className: 'e-model-month'\n    });\n    yearHeading.textContent = '' + this.globalize.formatDate(this.value || new Date(), {\n      format: 'y',\n      skeleton: 'dateTime'\n    });\n    daySpan.textContent = '' + this.globalize.formatDate(this.value || new Date(), {\n      format: 'E',\n      skeleton: 'dateTime'\n    }) + ', ';\n    monthSpan.textContent = '' + this.globalize.formatDate(this.value || new Date(), {\n      format: 'MMM d',\n      skeleton: 'dateTime'\n    });\n    modelHeader.appendChild(yearHeading);\n    h2.appendChild(daySpan);\n    h2.appendChild(monthSpan);\n    modelHeader.appendChild(h2);\n    this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);\n  };\n\n  DatePicker.prototype.changeTrigger = function (event) {\n    if (this.inputElement.value !== this.previousElementValue) {\n      if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {\n        this.changedArgs.value = this.value;\n        this.changedArgs.event = event || null;\n        this.changedArgs.element = this.element;\n        this.changedArgs.isInteracted = !isNullOrUndefined(event);\n        this.trigger('change', this.changedArgs);\n        this.previousElementValue = this.inputElement.value;\n        this.previousDate = new Date('' + this.value);\n      }\n    }\n  };\n\n  DatePicker.prototype.navigatedEvent = function () {\n    this.trigger('navigated', this.navigatedArgs);\n  };\n\n  DatePicker.prototype.changeEvent = function (event) {\n    if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {\n      this.selectCalendar(event);\n      this.changedArgs.event = event ? event : null;\n      this.changedArgs.element = this.element;\n      this.changedArgs.isInteracted = !isNullOrUndefined(event);\n      this.trigger('change', this.changedArgs);\n      this.previousDate = this.value && new Date(+this.value);\n      this.hide(event);\n      this.previousElementValue = this.inputElement.value;\n      this.errorClass();\n    }\n  };\n\n  DatePicker.prototype.selectCalendar = function (e) {\n    var date;\n    var tempFormat;\n\n    if (this.getModuleName() === 'datetimepicker') {\n      tempFormat = !isNullOrUndefined(this.format) ? this.format : this.dateTimeFormat;\n    } else {\n      tempFormat = this.format;\n    }\n\n    if (this.value) {\n      if (this.getModuleName() === 'datetimepicker') {\n        date = this.globalize.formatDate(this.changedArgs.value, {\n          format: tempFormat,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        });\n      } else {\n        date = this.globalize.formatDate(this.changedArgs.value, {\n          format: this.format,\n          type: 'dateTime',\n          skeleton: 'yMd'\n        });\n      }\n    }\n\n    if (!isNullOrUndefined(date)) {\n      Input.setValue(date, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n  };\n\n  DatePicker.prototype.isCalendar = function () {\n    if (this.popupWrapper && this.popupWrapper.classList.contains('' + POPUPWRAPPER)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DatePicker.prototype.setWidth = function (width) {\n    if (typeof width === 'number') {\n      this.inputWrapper.container.style.width = formatUnit(this.width);\n    } else if (typeof width === 'string') {\n      this.inputWrapper.container.style.width = width.match(/px|%|em/) ? this.width : formatUnit(this.width);\n    } else {\n      this.inputWrapper.container.style.width = '100%';\n    }\n  };\n  /**\n   * Shows the Calendar.\n   * @returns void\n   */\n\n\n  DatePicker.prototype.show = function (type, e) {\n    if (this.enabled && this.readonly || !this.enabled || this.popupObj) {\n      return;\n    } else {\n      var prevent_1 = true;\n      var outOfRange = void 0;\n\n      if (!isNullOrUndefined(this.value) && !(+this.value >= +this.min && +this.value <= +this.max)) {\n        outOfRange = new Date('' + this.value);\n        this.setProperties({\n          'value': null\n        }, true);\n      } else {\n        outOfRange = this.value || null;\n      }\n\n      if (!this.isCalendar()) {\n        _super.prototype.render.call(this);\n\n        this.setProperties({\n          'value': outOfRange || null\n        }, true);\n        this.previousDate = outOfRange;\n        this.createCalendar();\n      }\n\n      this.preventArgs = {\n        preventDefault: function preventDefault() {\n          prevent_1 = false;\n        },\n        popup: this.popupObj,\n        event: e || null,\n        cancel: false,\n        appendTo: document.body\n      };\n      this.trigger('open', this.preventArgs);\n\n      if (prevent_1 && !this.preventArgs.cancel) {\n        addClass(this.inputWrapper.buttons, ACTIVE);\n        this.preventArgs.appendTo.appendChild(this.popupWrapper);\n        this.popupObj.refreshPosition(this.inputElement);\n        var openAnimation = {\n          name: 'FadeIn',\n          duration: Browser.isDevice ? 0 : OPENDURATION\n        };\n\n        if (this.zIndex === 1000) {\n          this.popupObj.show(new Animation(openAnimation), this.element);\n        } else {\n          this.popupObj.show(new Animation(openAnimation), null);\n        }\n\n        this.setAriaAttributes();\n      } else {\n        this.popupObj.destroy();\n        this.popupWrapper = this.popupObj = null;\n      }\n\n      EventHandler.add(document, 'mousedown touchstart', this.documentHandler, this);\n    }\n  };\n  /**\n   * Hide the Calendar.\n   * @returns void\n   */\n\n\n  DatePicker.prototype.hide = function (event) {\n    if (!isNullOrUndefined(this.popupWrapper)) {\n      var prevent_2 = true;\n      this.preventArgs = {\n        preventDefault: function preventDefault() {\n          prevent_2 = false;\n        },\n        popup: this.popupObj,\n        event: event || null,\n        cancel: false\n      };\n      removeClass(this.inputWrapper.buttons, ACTIVE);\n      removeClass([document.body], OVERFLOW);\n\n      if (this.isCalendar()) {\n        this.trigger('close', this.preventArgs);\n      }\n\n      if (this.isCalendar() && prevent_2 && !this.preventArgs.cancel) {\n        var closeAnimation = {\n          name: 'FadeOut',\n          duration: CLOSEDURATION\n        };\n        this.popupObj.hide();\n        this.keyboardModule.destroy();\n        removeClass(this.inputWrapper.buttons, ACTIVE);\n      }\n\n      this.setAriaAttributes();\n      this.previousElementValue = this.inputElement.value;\n\n      if (Browser.isDevice && this.modal) {\n        this.modal.style.display = 'none';\n        this.modal.outerHTML = '';\n        this.modal = null;\n      }\n\n      EventHandler.remove(document, 'mousedown touchstart', this.documentHandler);\n    }\n\n    if (Browser.isDevice) {\n      this.element.removeAttribute('readonly');\n    }\n  };\n  /**\n   * Sets the focus to widget for interaction.\n   * @returns void\n   */\n\n\n  DatePicker.prototype.focusIn = function (triggerEvent) {\n    if (document.activeElement !== this.inputElement && this.enabled) {\n      this.inputElement.focus();\n      addClass([this.inputWrapper.container], [INPUTFOCUS]);\n      var focusArguments = {\n        model: this\n      };\n      this.trigger('focus', focusArguments);\n    }\n  };\n  /**\n   * Remove the focus from widget, if the widget is in focus state.\n   * @returns void\n   */\n\n\n  DatePicker.prototype.focusOut = function () {\n    if (document.activeElement === this.inputElement) {\n      this.inputElement.blur();\n      removeClass([this.inputWrapper.container], [INPUTFOCUS]);\n      var blurArguments = {\n        model: this\n      };\n      this.trigger('blur', blurArguments);\n    }\n  };\n  /**\n   * Gets the current view of the DatePicker.\n   * @returns string\n   */\n\n\n  DatePicker.prototype.currentView = function () {\n    var currentView;\n\n    if (this.calendarElement) {\n      // calls the Calendar currentView public method\n      currentView = _super.prototype.currentView.call(this);\n    }\n\n    return currentView;\n  };\n  /**\n   * Navigates to specified month or year or decade view of the DatePicker.\n   * @param  {string} view - Specifies the view of the calendar.\n   * @param  {Date} date - Specifies the focused date in a view.\n   * @returns void\n   */\n\n\n  DatePicker.prototype.navigateTo = function (view, date) {\n    if (this.calendarElement) {\n      // calls the Calendar navigateTo public method\n      _super.prototype.navigateTo.call(this, view, date);\n    }\n  };\n  /**\n   * To destroy the widget.\n   * @returns void\n   */\n\n\n  DatePicker.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.keyboardModules.destroy();\n\n    if (this.popupObj && this.popupObj.element.classList.contains(POPUP)) {\n      _super.prototype.destroy.call(this);\n    }\n\n    var ariaAttrs = {\n      'aria-live': 'assertive',\n      'aria-atomic': 'true',\n      'aria-disabled': 'true',\n      'aria-haspopup': 'true',\n      'aria-activedescendant': 'null',\n      'aria-owns': this.element.id + '_options',\n      'aria-expanded': 'false',\n      'role': 'combobox',\n      'autocomplete': 'off',\n      'autocorrect': 'off',\n      'autocapitalize': 'off',\n      'spellcheck': 'false'\n    };\n\n    if (this.inputElement) {\n      Input.removeAttributes(ariaAttrs, this.inputElement);\n      EventHandler.remove(this.inputElement, 'blur', this.inputBlurHandler);\n      EventHandler.remove(this.inputElement, 'focus', this.inputFocusHandler);\n      this.ensureInputAttribute();\n    }\n\n    if (this.isCalendar()) {\n      if (this.popupWrapper) {\n        detach(this.popupWrapper);\n      }\n\n      this.popupObj = this.popupWrapper = null;\n      this.keyboardModule.destroy();\n    }\n\n    if (this.ngTag === null) {\n      if (this.inputElement) {\n        this.inputWrapper.container.insertAdjacentElement('afterend', this.inputElement);\n        removeClass([this.inputElement], [INPUTROOT]);\n      }\n\n      removeClass([this.element], [ROOT]);\n      detach(this.inputWrapper.container);\n    }\n\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.resetFormHandler);\n    }\n  };\n\n  DatePicker.prototype.ensureInputAttribute = function () {\n    for (var i = 0; i < this.inputElement.attributes.length; i++) {\n      var prop = this.inputElement.attributes[i].name;\n\n      if (isNullOrUndefined(this.inputEleCopy.getAttribute(prop))) {\n        if (prop.toLowerCase() === 'value' || isNullOrUndefined(this.inputEleCopy.getAttribute('value'))) {\n          this.inputElement.value = '';\n        }\n\n        this.inputElement.removeAttribute(prop);\n      }\n    }\n  };\n  /**\n   * Initialize the event handler\n   * @private\n   */\n\n\n  DatePicker.prototype.preRender = function () {\n    this.inputEleCopy = this.element.cloneNode(true);\n    this.inputElement = this.element;\n    this.formElement = closest(this.inputElement, 'form');\n    this.index = this.showClearButton ? 2 : 1;\n    this.ngTag = null;\n\n    if (this.element.tagName === 'EJS-DATEPICKER' || this.element.tagName === 'EJS-DATETIMEPICKER') {\n      this.ngTag = this.element.tagName;\n      this.inputElement = this.createElement('input');\n      this.element.appendChild(this.inputElement);\n    }\n\n    if (this.element.getAttribute('id')) {\n      if (this.ngTag !== null) {\n        this.inputElement.id = this.element.getAttribute('id') + '_input';\n      }\n    } else {\n      if (this.getModuleName() === 'datetimepicker') {\n        this.element.id = getUniqueID('ej2-datetimepicker');\n\n        if (this.ngTag !== null) {\n          attributes(this.inputElement, {\n            'id': this.element.id + '_input'\n          });\n        }\n      } else {\n        this.element.id = getUniqueID('ej2-datepicker');\n\n        if (this.ngTag !== null) {\n          attributes(this.inputElement, {\n            'id': this.element.id + '_input'\n          });\n        }\n      }\n    }\n\n    if (this.ngTag !== null) {\n      this.validationAttribute(this.element, this.inputElement);\n    }\n\n    this.checkHtmlAttributes();\n\n    _super.prototype.preRender.call(this);\n  };\n\n  ;\n\n  DatePicker.prototype.validationAttribute = function (target, inputElement) {\n    var nameAttribute = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');\n    inputElement.setAttribute('name', nameAttribute);\n    target.removeAttribute('name');\n    var attribute = ['required', 'aria-required', 'form'];\n\n    for (var i = 0; i < attribute.length; i++) {\n      if (isNullOrUndefined(target.getAttribute(attribute[i]))) {\n        continue;\n      }\n\n      var attr = target.getAttribute(attribute[i]);\n      inputElement.setAttribute(attribute[i], attr);\n      target.removeAttribute(attribute[i]);\n    }\n  };\n\n  DatePicker.prototype.checkHtmlAttributes = function () {\n    this.globalize = new Internationalization(this.locale);\n    var attributes = ['value', 'min', 'max', 'disabled', 'readonly', 'style', 'name', 'placeholder', 'type'];\n    var options;\n\n    if (this.getModuleName() === 'datetimepicker') {\n      options = {\n        format: !isNullOrUndefined(this.format) ? this.format : this.dateTimeFormat,\n        type: 'dateTime',\n        skeleton: 'yMd'\n      };\n    } else {\n      options = {\n        format: this.format,\n        type: 'dateTime',\n        skeleton: 'yMd'\n      };\n    }\n\n    for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n      var prop = attributes_1[_i];\n\n      if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {\n        switch (prop) {\n          case 'disabled':\n            var enabled = this.inputElement.getAttribute(prop) === 'disabled' || this.inputElement.getAttribute(prop) === '';\n            this.setProperties({\n              enabled: !enabled\n            }, true);\n            break;\n\n          case 'readonly':\n            var readonly = this.inputElement.getAttribute(prop) === 'readonly' || this.inputElement.getAttribute(prop) === '';\n            this.setProperties({\n              readonly: readonly\n            }, true);\n            break;\n\n          case 'placeholder':\n            if (this.placeholder === null) {\n              var placeholder = this.inputElement.getAttribute(prop);\n              this.setProperties({\n                placeholder: this.inputElement.getAttribute(prop)\n              }, true);\n            }\n\n            break;\n\n          case 'style':\n            this.inputElement.setAttribute('style', '' + this.inputElement.getAttribute(prop));\n            break;\n\n          case 'name':\n            this.inputElement.setAttribute('name', '' + this.inputElement.getAttribute(prop));\n            break;\n\n          case 'value':\n            if (!this.value) {\n              var value = this.inputElement.getAttribute(prop);\n              this.setProperties(setValue(prop, this.globalize.parseDate(value, options), {}), true);\n            }\n\n            break;\n\n          case 'min':\n            if (+this.min === +new Date(1900, 0, 1)) {\n              this.setProperties(setValue(prop, this.globalize.parseDate(this.inputElement.getAttribute(prop)), {}), true);\n            }\n\n            break;\n\n          case 'max':\n            if (+this.max === +new Date(2099, 11, 31)) {\n              this.setProperties(setValue(prop, this.globalize.parseDate(this.inputElement.getAttribute(prop)), {}), true);\n            }\n\n            break;\n\n          case 'type':\n            if (this.inputElement.getAttribute(prop) !== 'text') {\n              this.inputElement.setAttribute('type', 'text');\n            }\n\n            break;\n        }\n      }\n    }\n  };\n  /**\n   * To get component name.\n   * @private\n   */\n\n\n  DatePicker.prototype.getModuleName = function () {\n    return 'datepicker';\n  };\n\n  DatePicker.prototype.disabledDates = function () {\n    var valueCopy;\n    valueCopy = this.checkDateValue(this.value) ? new Date(+this.value) : new Date('' + this.value);\n    var previousValCopy = this.previousDate; //calls the Calendar render method to check the disabled dates through renderDayCell event and update the input value accordingly.\n\n    this.minMaxUpdates();\n\n    _super.prototype.render.call(this);\n\n    this.previousDate = previousValCopy;\n    var date = valueCopy && +valueCopy;\n    var dateIdString = '*[id^=\"/id\"]'.replace('/id', '' + date);\n\n    if (!this.strictMode) {\n      if (typeof this.value === 'string' || typeof this.value === 'object' && +this.value !== +valueCopy) {\n        this.setProperties({\n          value: valueCopy\n        }, true);\n      }\n    }\n\n    if (!isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0])) {\n      if (this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains('e-disabled')) {\n        if (!this.strictMode) {\n          this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n        }\n      }\n    }\n\n    var inputVal;\n\n    if (this.getModuleName() === 'datetimepicker') {\n      inputVal = this.globalize.formatDate(valueCopy, {\n        format: !isNullOrUndefined(this.format) ? this.format : this.dateTimeFormat,\n        type: 'dateTime',\n        skeleton: 'yMd'\n      });\n    } else {\n      inputVal = this.globalize.formatDate(valueCopy, {\n        format: this.format,\n        type: 'dateTime',\n        skeleton: 'yMd'\n      });\n    }\n\n    Input.setValue(inputVal, this.inputElement, this.floatLabelType, this.showClearButton);\n  };\n\n  DatePicker.prototype.setAriaAttributes = function () {\n    if (this.isCalendar()) {\n      Input.addAttributes({\n        'aria-expanded': 'true'\n      }, this.inputElement);\n      attributes(this.inputElement, {\n        'aria-activedescendant': '' + this.setActiveDescendant()\n      });\n    } else {\n      Input.addAttributes({\n        'aria-expanded': 'false'\n      }, this.inputElement);\n      attributes(this.inputElement, {\n        'aria-activedescendant': 'null'\n      });\n    }\n  };\n\n  DatePicker.prototype.errorClass = function () {\n    var dateIdString = '*[id^=\"/id\"]'.replace('/id', '' + +this.value);\n    var isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains('e-disabled');\n\n    if (!isNullOrUndefined(this.value) && !(+new Date(+this.value).setMilliseconds(0) >= +this.min && +new Date(+this.value).setMilliseconds(0) <= +this.max) || !this.strictMode && this.inputElement.value !== '' && isNullOrUndefined(this.value) || isDisabledDate) {\n      addClass([this.inputWrapper.container], ERROR);\n    } else {\n      removeClass([this.inputWrapper.container], ERROR);\n    }\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * returns void\n   * @private\n   */\n\n\n  DatePicker.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var options = {\n      format: this.format,\n      type: 'dateTime',\n      skeleton: 'yMd'\n    };\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'value':\n          if (typeof newProp.value === 'string') {\n            newProp.value = this.checkDateValue(new Date('' + newProp.value));\n            this.setProperties({\n              value: newProp.value\n            }, true);\n          }\n\n          this.previousElementValue = this.inputElement.value;\n\n          if (isNullOrUndefined(this.value)) {\n            Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n            this.currentDate = new Date(new Date().setHours(0, 0, 0, 0));\n          }\n\n          this.updateInput();\n          this.changeTrigger(null);\n          break;\n\n        case 'format':\n          this.updateInput();\n          break;\n\n        case 'allowEdit':\n          this.setAllowEdit();\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(this.placeholder, this.inputElement);\n          break;\n\n        case 'readonly':\n          Input.setReadonly(this.readonly, this.inputElement);\n          break;\n\n        case 'enabled':\n          Input.setEnabled(this.enabled, this.inputElement);\n\n          if (!this.enabled) {\n            this.inputElement.setAttribute('aria-disabled', 'true');\n          } else {\n            this.inputElement.setAttribute('aria-disabled', 'false');\n          }\n\n          this.bindEvents();\n          break;\n\n        case 'locale':\n          this.globalize = new Internationalization(this.locale);\n          this.l10n.setLocale(this.locale);\n          this.setProperties({\n            placeholder: this.l10n.getConstant('placeholder')\n          }, true);\n          Input.setPlaceholder(this.placeholder, this.inputElement);\n          this.updateInput();\n          break;\n\n        case 'enableRtl':\n          Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);\n          break;\n\n        case 'zIndex':\n          this.setProperties({\n            zIndex: newProp.zIndex\n          }, true);\n          break;\n\n        case 'cssClass':\n          Input.setCssClass(newProp.cssClass, [this.inputWrapper.container]);\n\n          if (this.popupWrapper) {\n            addClass([this.popupWrapper], [newProp.cssClass]);\n          }\n\n          break;\n\n        case 'showClearButton':\n          Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);\n          this.bindClearEvent();\n          break;\n\n        case 'strictMode':\n          this.updateInput();\n          break;\n\n        case 'width':\n          this.setWidth(newProp.width);\n          break;\n\n        case 'floatLabelType':\n          this.floatLabelType = newProp.floatLabelType;\n          Input.removeFloating(this.inputWrapper);\n          Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);\n          break;\n\n        default:\n          if (this.calendarElement) {\n            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n          }\n\n          break;\n      }\n\n      this.hide(null);\n    }\n  };\n\n  __decorate([Property(null)], DatePicker.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], DatePicker.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], DatePicker.prototype, \"strictMode\", void 0);\n\n  __decorate([Property(null)], DatePicker.prototype, \"format\", void 0);\n\n  __decorate([Property(true)], DatePicker.prototype, \"enabled\", void 0);\n\n  __decorate([Property(true)], DatePicker.prototype, \"showClearButton\", void 0);\n\n  __decorate([Property(true)], DatePicker.prototype, \"allowEdit\", void 0);\n\n  __decorate([Property(false)], DatePicker.prototype, \"enableRtl\", void 0);\n\n  __decorate([Property(false)], DatePicker.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property(1000)], DatePicker.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(false)], DatePicker.prototype, \"readonly\", void 0);\n\n  __decorate([Property(null)], DatePicker.prototype, \"placeholder\", void 0);\n\n  __decorate([Property('Never')], DatePicker.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Event()], DatePicker.prototype, \"open\", void 0);\n\n  __decorate([Event()], DatePicker.prototype, \"close\", void 0);\n\n  __decorate([Event()], DatePicker.prototype, \"blur\", void 0);\n\n  __decorate([Event()], DatePicker.prototype, \"focus\", void 0);\n\n  __decorate([Event()], DatePicker.prototype, \"created\", void 0);\n\n  __decorate([Event()], DatePicker.prototype, \"destroyed\", void 0);\n\n  DatePicker = __decorate([NotifyPropertyChanges], DatePicker);\n  return DatePicker;\n}(Calendar);\n\nexport { DatePicker };","map":null,"metadata":{},"sourceType":"module"}