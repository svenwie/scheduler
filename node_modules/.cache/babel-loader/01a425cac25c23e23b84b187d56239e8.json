{"ast":null,"code":"import { isNullOrUndefined, getValue } from './util';\n\nvar Observer =\n/** @class */\nfunction () {\n  function Observer(context) {\n    this.ranArray = [];\n    this.boundedEvents = {};\n\n    if (isNullOrUndefined(context)) {\n      return;\n    }\n\n    this.context = context;\n  }\n\n  ;\n  /**\n   * To attach handler for given property in current context.\n   * @param {string} property - specifies the name of the event.\n   * @param {Function} handler - Specifies the handler function to be called while event notified.\n   * @param {Object} context - Specifies the context binded to the handler.\n   * @param {string} id - specifies the random generated id.\n   * @return {void}\n   */\n\n  Observer.prototype.on = function (property, handler, context, id) {\n    if (isNullOrUndefined(handler)) {\n      return;\n    }\n\n    var cntxt = context || this.context;\n\n    if (this.notExist(property)) {\n      this.boundedEvents[property] = [{\n        handler: handler,\n        context: cntxt\n      }];\n      return;\n    }\n\n    if (!isNullOrUndefined(id)) {\n      if (this.ranArray.indexOf(id) === -1) {\n        this.ranArray.push(id);\n        this.boundedEvents[property].push({\n          handler: handler,\n          context: cntxt,\n          id: id\n        });\n      }\n    } else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {\n      this.boundedEvents[property].push({\n        handler: handler,\n        context: cntxt\n      });\n    }\n  };\n  /**\n   * To remove handlers from a event attached using on() function.\n   * @param {string} eventName - specifies the name of the event.\n   * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.\n   * @param {string} id - specifies the random generated id.\n   * @return {void}\n   */\n\n\n  Observer.prototype.off = function (property, handler, id) {\n    if (this.notExist(property)) {\n      return;\n    }\n\n    var curObject = getValue(property, this.boundedEvents);\n\n    if (handler) {\n      for (var i = 0; i < curObject.length; i++) {\n        if (id) {\n          if (curObject[i].id === id) {\n            curObject.splice(i, 1);\n            var indexLocation = this.ranArray.indexOf(id);\n\n            if (indexLocation !== -1) {\n              this.ranArray.splice(indexLocation, 1);\n            }\n\n            break;\n          }\n        } else if (handler === curObject[i].handler) {\n          curObject.splice(i, 1);\n          break;\n        }\n      }\n    } else {\n      delete this.boundedEvents[property];\n    }\n  };\n  /**\n   * To notify the handlers in the specified event.\n   * @param {string} property - Specifies the event to be notify.\n   *  @param {Object} args - Additional parameters to pass while calling the handler.\n   * @return {void}\n   */\n\n\n  Observer.prototype.notify = function (property, argument) {\n    if (this.notExist(property)) {\n      return;\n    }\n\n    if (argument) {\n      argument.name = property;\n    }\n\n    var curObject = getValue(property, this.boundedEvents).slice(0);\n\n    for (var _i = 0, curObject_1 = curObject; _i < curObject_1.length; _i++) {\n      var cur = curObject_1[_i];\n      cur.handler.call(cur.context, argument);\n    }\n  };\n  /**\n   * To destroy handlers in the event\n   */\n\n\n  Observer.prototype.destroy = function () {\n    this.boundedEvents = this.context = undefined;\n  };\n  /**\n   * Returns if the property exists.\n   */\n\n\n  Observer.prototype.notExist = function (prop) {\n    return this.boundedEvents.hasOwnProperty(prop) === false;\n  };\n  /**\n   * Returns if the handler is present.\n   */\n\n\n  Observer.prototype.isHandlerPresent = function (boundedEvents, handler) {\n    for (var _i = 0, boundedEvents_1 = boundedEvents; _i < boundedEvents_1.length; _i++) {\n      var cur = boundedEvents_1[_i];\n\n      if (cur.handler === handler) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return Observer;\n}();\n\nexport { Observer };","map":null,"metadata":{},"sourceType":"module"}