{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Query, DataManager, Predicate } from '@syncfusion/ej2-data';\nimport { getRecurrenceStringFromDate } from '../../recurrence-editor/date-generator';\nimport * as events from '../base/constant';\nimport { Timezone } from '../timezone/timezone';\n/**\n * Schedule CRUD operations\n */\n\nvar Crud =\n/** @class */\nfunction () {\n  function Crud(parent) {\n    this.parent = parent;\n    this.timezone = new Timezone();\n  }\n\n  Crud.prototype.getQuery = function () {\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    return this.parent.dataModule.generateQuery(start, end);\n  };\n\n  Crud.prototype.refreshData = function (args) {\n    var _this = this;\n\n    var actionArgs = {\n      requestType: args.requestType,\n      cancel: false,\n      data: args.data\n    };\n\n    if (this.parent.dataModule.dataManager.dataSource.offline) {\n      this.parent.trigger(events.actionComplete, actionArgs);\n      this.parent.renderModule.refreshDataManager();\n      return;\n    } else {\n      args.promise.then(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(events.actionComplete, actionArgs);\n\n        if (actionArgs.cancel) {\n          return;\n        }\n\n        _this.parent.renderModule.refreshDataManager();\n      }).catch(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(events.actionFailure, {\n          error: e\n        });\n      });\n    }\n  };\n\n  Crud.prototype.addEvent = function (eventData) {\n    var fields = this.parent.eventFields;\n    var promise = null;\n    var editParms = {\n      addedRecords: [],\n      changedRecords: [],\n      deletedRecords: []\n    };\n    var args = {\n      cancel: false,\n      data: eventData instanceof Array ? eventData : [eventData],\n      requestType: 'eventCreate'\n    };\n    this.parent.trigger(events.actionBegin, args);\n\n    if (args.cancel) {\n      return;\n    }\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, _a = eventData; _i < _a.length; _i++) {\n        var event_1 = _a[_i];\n        this.processCrudTimezone(event_1);\n        editParms.addedRecords.push(event_1);\n      }\n\n      promise = this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, null, this.getQuery());\n    } else {\n      this.processCrudTimezone(eventData);\n      promise = this.parent.dataModule.dataManager.insert(eventData, null, this.getQuery());\n    }\n\n    var crudArgs = {\n      requestType: 'eventCreated',\n      cancel: false,\n      data: eventData,\n      promise: promise\n    };\n    this.refreshData(crudArgs);\n  };\n\n  Crud.prototype.saveEvent = function (event, action) {\n    var fields = this.parent.eventFields;\n    var promise = null;\n    var editParms = {\n      addedRecords: [],\n      changedRecords: [],\n      deletedRecords: []\n    };\n    var args = {\n      requestType: 'eventChange',\n      cancel: false\n    };\n    var dataObj = [];\n    event instanceof Array ? dataObj = event : dataObj.push(event);\n    var data = event;\n\n    if (isNullOrUndefined(action)) {\n      args.data = data;\n      this.parent.trigger(events.actionBegin, args);\n\n      if (args.cancel) {\n        return;\n      }\n\n      this.processCrudTimezone(data);\n      promise = this.parent.dataModule.dataManager.update(fields.id, event, null, this.getQuery());\n    } else {\n      var parentEvent = this.parent.eventBase.getRecurrenceEvent(data);\n\n      switch (action) {\n        case 'EditOccurrence':\n          args.data = {\n            occurrence: event,\n            parent: parentEvent\n          };\n          this.parent.trigger(events.actionBegin, args);\n\n          if (args.cancel) {\n            return;\n          }\n\n          var query = new Query().where('Guid', 'equal', data.Guid);\n          var edited = new DataManager(this.parent.eventsProcessed).executeLocal(query);\n          var exDate = this.excludeDateCheck(edited[0][fields.startTime], parentEvent[fields.recurrenceException]);\n\n          if (exDate !== parentEvent[fields.recurrenceException]) {\n            parentEvent[fields.recurrenceException] = exDate;\n            data[fields.recurrenceID] = parentEvent[fields.id];\n            this.processCrudTimezone(parentEvent);\n            editParms.changedRecords.push(parentEvent);\n            this.processCrudTimezone(data);\n            editParms.addedRecords.push(data);\n          } else {\n            this.processCrudTimezone(data);\n            editParms.changedRecords.push(data);\n          }\n\n          break;\n\n        case 'EditSeries':\n          args.data = data;\n          this.parent.trigger(events.actionBegin, args);\n\n          if (args.cancel) {\n            return;\n          }\n\n          var delApp = new DataManager(this.parent.eventsData).executeLocal(new Query().where(fields.recurrenceID, 'equal', parentEvent[fields.id]));\n          data[fields.id] = parentEvent[fields.id];\n          data[fields.recurrenceException] = null;\n          data[fields.recurrenceID] = null;\n          this.processCrudTimezone(data);\n          editParms.changedRecords.push(data);\n\n          for (var _i = 0, delApp_1 = delApp; _i < delApp_1.length; _i++) {\n            var event_2 = delApp_1[_i];\n            editParms.deletedRecords.push(event_2);\n          }\n\n          break;\n      }\n\n      promise = this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, null, this.getQuery());\n    } // if (!this.parent.activeView.isTimelineView()) {\n    //     this.parent.eventBase.selectWorkCellByTime(dataObj);\n    // }\n\n\n    var crudArgs = {\n      requestType: 'eventChanged',\n      cancel: false,\n      data: args.data,\n      promise: promise\n    };\n    this.refreshData(crudArgs);\n  };\n\n  Crud.prototype.deleteEvent = function (id, action) {\n    var fields = this.parent.eventFields;\n    var editParms = {\n      addedRecords: [],\n      changedRecords: [],\n      deletedRecords: []\n    };\n    var dataObj = [];\n    var normalEvent = [];\n    var recEvent = [];\n\n    switch (typeof id) {\n      case 'string':\n      case 'number':\n        dataObj = new DataManager(this.parent.eventsData).executeLocal(new Query().where(fields.id, 'equal', id));\n        break;\n\n      case 'object':\n        id instanceof Array ? dataObj = id : dataObj.push(id);\n        break;\n    }\n\n    for (var _i = 0, dataObj_1 = dataObj; _i < dataObj_1.length; _i++) {\n      var event_3 = dataObj_1[_i];\n      !isNullOrUndefined(event_3[fields.recurrenceRule]) ? recEvent.push(event_3) : normalEvent.push(event_3);\n    }\n\n    var args = {\n      requestType: 'eventRemove',\n      cancel: false\n    };\n\n    if (action !== 'DeleteOccurrence') {\n      args.data = dataObj;\n      this.parent.trigger(events.actionBegin, args);\n\n      if (args.cancel) {\n        return;\n      }\n    }\n\n    if (isNullOrUndefined(action) || normalEvent.length > 0) {\n      for (var _a = 0, normalEvent_1 = normalEvent; _a < normalEvent_1.length; _a++) {\n        var event_4 = normalEvent_1[_a];\n        editParms.deletedRecords.push(event_4);\n      }\n    }\n\n    if (recEvent.length > 0) {\n      switch (action) {\n        case 'Delete':\n        case 'DeleteOccurrence':\n          for (var i = 0; i < recEvent.length; i++) {\n            var parentEvent = this.parent.eventBase.getRecurrenceEvent(recEvent[i]);\n            args.data = {\n              occurrence: recEvent[i],\n              parent: parentEvent\n            };\n            this.parent.trigger(events.actionBegin, args);\n\n            if (args.cancel) {\n              return;\n            }\n\n            parentEvent[fields.recurrenceException] = this.excludeDateCheck(recEvent[i][fields.startTime], parentEvent[fields.recurrenceException]);\n            this.processCrudTimezone(parentEvent);\n            editParms.changedRecords.push(parentEvent);\n\n            if (recEvent[i][fields.id] !== parentEvent[fields.id]) {\n              editParms.deletedRecords.push(recEvent[i]);\n            }\n          }\n\n          break;\n\n        case 'DeleteSeries':\n          for (var _b = 0, recEvent_1 = recEvent; _b < recEvent_1.length; _b++) {\n            var app = recEvent_1[_b];\n            var predicate = new Predicate(fields.id, 'equal', app[fields.recurrenceID] || id).or(new Predicate(fields.recurrenceID, 'equal', app[fields.recurrenceID] || id));\n            var delApp = new DataManager(this.parent.eventsData).executeLocal(new Query().where(predicate));\n\n            for (var _c = 0, delApp_2 = delApp; _c < delApp_2.length; _c++) {\n              var event_5 = delApp_2[_c];\n              editParms.deletedRecords.push(event_5);\n            }\n          }\n\n          break;\n      }\n    }\n\n    var promise;\n    promise = this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, null, this.getQuery());\n    this.parent.eventBase.selectWorkCellByTime(dataObj);\n    var crudArgs = {\n      requestType: 'eventRemoved',\n      cancel: false,\n      data: args.data,\n      promise: promise\n    };\n    this.refreshData(crudArgs);\n  };\n\n  Crud.prototype.processCrudTimezone = function (events) {\n    var fields = this.parent.eventFields;\n\n    if (events[fields.startTimezone] || events[fields.endTimezone]) {\n      var startTimezone = events[fields.startTimezone] || events[fields.endTimezone];\n      var endTimezone = events[fields.endTimezone] || events[fields.startTimezone];\n\n      if (this.parent.timezone) {\n        var zone = this.parent.timezone;\n        events[fields.startTime] = this.timezone.convert(events[fields.startTime], startTimezone, zone);\n        events[fields.endTime] = this.timezone.convert(events[fields.endTime], endTimezone, zone);\n        events[fields.startTime] = this.timezone.remove(events[fields.startTime], zone);\n        events[fields.endTime] = this.timezone.remove(events[fields.endTime], zone);\n      } else {\n        events[fields.startTime] = this.timezone.remove(events[fields.startTime], startTimezone);\n        events[fields.endTime] = this.timezone.remove(events[fields.endTime], endTimezone);\n      }\n    } else if (this.parent.timezone) {\n      events[fields.startTime] = this.timezone.remove(events[fields.startTime], this.parent.timezone);\n      events[fields.endTime] = this.timezone.remove(events[fields.endTime], this.parent.timezone);\n    }\n  };\n\n  Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n    var exDate = getRecurrenceStringFromDate(eventStartTime);\n\n    if (!isNullOrUndefined(exceptionDateList)) {\n      if (exceptionDateList.indexOf(exDate) === -1) {\n        exceptionDateList = !isNullOrUndefined(exceptionDateList) ? exceptionDateList + ',' + exDate : exDate;\n      }\n    } else {\n      exceptionDateList = exDate;\n    }\n\n    return exceptionDateList;\n  };\n\n  return Crud;\n}();\n\nexport { Crud };","map":null,"metadata":{},"sourceType":"module"}