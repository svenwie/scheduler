{"ast":null,"code":"import { closest, EventHandler, isNullOrUndefined, formatUnit, append } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, createElement, remove, extend } from '@syncfusion/ej2-base';\nimport { Dialog, Popup, isCollide } from '@syncfusion/ej2-popups';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { Crud } from '../actions/crud';\nimport { FieldValidator } from './form-validator';\nimport * as event from '../base/constant';\nimport * as cls from '../base/css-constant';\nimport * as util from '../base/util';\nvar EVENT_FIELD = 'e-field';\n/**\n * Quick Popups interactions\n */\n\nvar QuickPopups =\n/** @class */\nfunction () {\n  /**\n   * Constructor for QuickPopups\n   */\n  function QuickPopups(parent) {\n    this.isMultipleEventSelect = false;\n    this.parent = parent;\n    this.l10n = this.parent.localeObj;\n    this.crudAction = new Crud(parent);\n    this.fieldValidator = new FieldValidator();\n    this.render();\n    this.addEventListener();\n  }\n\n  QuickPopups.prototype.render = function () {\n    this.renderQuickPopup();\n    this.renderMorePopup();\n    this.renderQuickDialog();\n  };\n\n  QuickPopups.prototype.renderQuickPopup = function () {\n    var quickPopupWrapper = createElement('div', {\n      className: cls.POPUP_WRAPPER_CLASS + ' e-popup-close'\n    });\n\n    if (this.parent.isAdaptive) {\n      document.body.appendChild(quickPopupWrapper);\n      addClass([quickPopupWrapper], cls.DEVICE_CLASS);\n    } else {\n      this.parent.element.appendChild(quickPopupWrapper);\n    }\n\n    this.quickPopup = new Popup(quickPopupWrapper, {\n      actionOnScroll: 'hide',\n      targetType: this.parent.isAdaptive ? 'container' : 'relative',\n      enableRtl: this.parent.enableRtl,\n      open: this.quickPopupOpen.bind(this),\n      close: this.quickPopupClose.bind(this),\n      hideAnimation: this.parent.isAdaptive ? {\n        name: 'ZoomOut'\n      } : {\n        name: 'FadeOut',\n        duration: 150\n      },\n      showAnimation: this.parent.isAdaptive ? {\n        name: 'ZoomIn'\n      } : {\n        name: 'FadeIn',\n        duration: 150\n      },\n      collision: this.parent.isAdaptive ? {\n        X: 'fit',\n        Y: 'fit'\n      } : {\n        X: 'none',\n        Y: 'fit'\n      },\n      position: this.parent.isAdaptive ? {\n        X: 'left',\n        Y: 'top'\n      } : {\n        X: 'right',\n        Y: 'top'\n      },\n      viewPortElement: this.parent.isAdaptive ? document.body : this.parent.element,\n      zIndex: this.parent.isAdaptive ? 1000 : 1\n    });\n  };\n\n  QuickPopups.prototype.renderMorePopup = function () {\n    var moreEventPopup = \"<div class=\\\"\" + cls.MORE_EVENT_POPUP_CLASS + \"\\\"><div class=\\\"\" + cls.MORE_EVENT_HEADER_CLASS + \"\\\">\" + (\"<div class=\\\"\" + cls.MORE_EVENT_CLOSE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('close') + \"\\\" tabindex=\\\"0\\\"></div>\") + (\"<div class=\\\"\" + cls.MORE_EVENT_DATE_HEADER_CLASS + \"\\\"><div class=\\\"\" + cls.MORE_EVENT_HEADER_DAY_CLASS + \"\\\"></div>\") + (\"<div class=\\\"\" + cls.MORE_EVENT_HEADER_DATE_CLASS + \" \" + cls.NAVIGATE_CLASS + \"\\\" tabindex=\\\"0\\\"></div></div></div></div>\");\n    var moreEventWrapper = createElement('div', {\n      className: cls.MORE_POPUP_WRAPPER_CLASS + ' e-popup-close',\n      innerHTML: moreEventPopup\n    });\n    this.parent.element.appendChild(moreEventWrapper);\n    this.morePopup = new Popup(moreEventWrapper, {\n      targetType: 'relative',\n      enableRtl: this.parent.enableRtl,\n      hideAnimation: {\n        name: 'ZoomOut',\n        duration: 300\n      },\n      showAnimation: {\n        name: 'ZoomIn',\n        duration: 300\n      },\n      open: this.morePopupOpen.bind(this),\n      close: this.morePopupClose.bind(this),\n      collision: {\n        X: 'flip',\n        Y: 'flip'\n      },\n      viewPortElement: this.parent.element.querySelector('.' + cls.TABLE_CONTAINER_CLASS),\n      zIndex: 0\n    });\n    var closeButton = this.morePopup.element.querySelector('.' + cls.MORE_EVENT_CLOSE_CLASS);\n    this.renderButton('e-round', cls.ICON + ' ' + cls.CLOSE_ICON_CLASS, false, closeButton, this.closeClick);\n    EventHandler.add(this.morePopup.element.querySelector('.' + cls.MORE_EVENT_HEADER_DATE_CLASS), 'click', this.navigationClick, this);\n  };\n\n  QuickPopups.prototype.renderQuickDialog = function () {\n    this.quickDialog = new Dialog({\n      animationSettings: {\n        effect: 'Zoom'\n      },\n      buttons: [{\n        buttonModel: {\n          cssClass: 'e-quick-alertok e-flat',\n          isPrimary: true\n        },\n        click: this.dialogButtonClick.bind(this)\n      }, {\n        buttonModel: {\n          cssClass: 'e-quick-alertcancel e-flat',\n          isPrimary: false\n        },\n        click: this.dialogButtonClick.bind(this)\n      }],\n      cssClass: cls.QUICK_DIALOG_CLASS,\n      closeOnEscape: true,\n      enableRtl: this.parent.enableRtl,\n      beforeClose: this.beforeQuickDialogClose.bind(this),\n      isModal: true,\n      position: {\n        X: 'center',\n        Y: 'center'\n      },\n      showCloseIcon: true,\n      target: document.body,\n      visible: false,\n      width: 'auto'\n    });\n    var dialogElement = createElement('div', {\n      id: this.parent.element.id + 'QuickDialog'\n    });\n    this.parent.element.appendChild(dialogElement);\n    this.quickDialog.appendTo(dialogElement);\n    var okButton = this.quickDialog.element.querySelector('.e-quick-alertok');\n\n    if (okButton) {\n      okButton.setAttribute('aria-label', this.l10n.getConstant('occurrence'));\n    }\n\n    var cancelButton = this.quickDialog.element.querySelector('.e-quick-alertcancel');\n\n    if (cancelButton) {\n      cancelButton.setAttribute('aria-label', this.l10n.getConstant('series'));\n    }\n  };\n\n  QuickPopups.prototype.renderButton = function (className, iconName, isDisabled, element, clickEvent) {\n    new Button({\n      cssClass: className,\n      disabled: isDisabled,\n      enableRtl: this.parent.enableRtl,\n      iconCss: iconName\n    }, element);\n    EventHandler.add(element, 'click', clickEvent, this);\n  };\n\n  QuickPopups.prototype.quickDialogClass = function (action) {\n    var classList = [cls.QUICK_DIALOG_EDIT_EVENT_CLASS, cls.QUICK_DIALOG_EDIT_SERIES_CLASS, cls.QUICK_DIALOG_DELETE_CLASS, cls.QUICK_DIALOG_CANCEL_CLASS, cls.QUICK_DIALOG_ALERT_BTN_CLASS, cls.DISABLE_CLASS];\n    var okButton = this.quickDialog.element.querySelector('.e-quick-alertok');\n    var cancelButton = this.quickDialog.element.querySelector('.e-quick-alertcancel');\n    removeClass([okButton, cancelButton], classList);\n\n    switch (action) {\n      case 'Recurrence':\n        addClass([okButton], cls.QUICK_DIALOG_EDIT_EVENT_CLASS);\n        addClass([cancelButton], cls.QUICK_DIALOG_EDIT_SERIES_CLASS);\n        break;\n\n      case 'Delete':\n        addClass([okButton], cls.QUICK_DIALOG_DELETE_CLASS);\n        addClass([cancelButton], cls.QUICK_DIALOG_CANCEL_CLASS);\n        break;\n\n      case 'Alert':\n        addClass([okButton], cls.QUICK_DIALOG_ALERT_BTN_CLASS);\n        addClass([cancelButton], cls.DISABLE_CLASS);\n        break;\n    }\n  };\n\n  QuickPopups.prototype.applyFormValidation = function () {\n    var form = this.quickPopup.element.querySelector('.' + cls.FORM_CLASS);\n    var rules = {};\n    rules[this.parent.eventSettings.fields.subject.name] = this.parent.eventSettings.fields.subject.validation;\n    this.fieldValidator.renderFormValidator(form, rules, this.quickPopup.element);\n  };\n\n  QuickPopups.prototype.openRecurrenceAlert = function () {\n    var editDeleteOnly = this.quickDialog.element.querySelector('.e-quick-alertok');\n\n    if (editDeleteOnly) {\n      editDeleteOnly.innerHTML = this.l10n.getConstant(this.parent.currentAction === 'Delete' ? 'deleteEvent' : 'editEvent');\n    }\n\n    var editDeleteSeries = this.quickDialog.element.querySelector('.e-quick-alertcancel');\n\n    if (editDeleteSeries) {\n      editDeleteSeries.innerHTML = this.l10n.getConstant(this.parent.currentAction === 'Delete' ? 'deleteSeries' : 'editSeries');\n    }\n\n    this.quickDialog.content = this.l10n.getConstant(this.parent.currentAction === 'Delete' ? 'deleteRecurrenceContent' : 'editContent');\n    this.quickDialog.header = this.l10n.getConstant(this.parent.currentAction === 'Delete' ? 'deleteEvent' : 'editEvent');\n    this.quickDialogClass('Recurrence');\n    this.showQuickDialog('RecurrenceAlert');\n  };\n\n  QuickPopups.prototype.openRecurrenceValidationAlert = function (type) {\n    var okButton = this.quickDialog.element.querySelector('.e-quick-alertok');\n    removeClass([okButton], cls.QUICK_DIALOG_EDIT_EVENT_CLASS);\n    okButton.innerHTML = this.l10n.getConstant('ok');\n    var cancelButton = this.quickDialog.element.querySelector('.e-quick-alertcancel');\n    cancelButton.innerHTML = this.l10n.getConstant('cancel');\n    this.quickDialog.header = this.l10n.getConstant('alert');\n\n    switch (type) {\n      case 'wrongPattern':\n        addClass([cancelButton], cls.DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('wrongPattern');\n        break;\n\n      case 'dateValidation':\n        removeClass([cancelButton], cls.DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('recurrenceDateValidation');\n        break;\n\n      case 'createError':\n        addClass([cancelButton], cls.DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('createError');\n        break;\n\n      case 'sameDayAlert':\n        addClass([cancelButton], cls.DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('sameDayAlert');\n        break;\n\n      case 'seriesChangeAlert':\n        removeClass([cancelButton], cls.DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('seriesChangeAlert');\n        break;\n    }\n\n    if (!cancelButton.classList.contains(cls.DISABLE_CLASS)) {\n      addClass([cancelButton], 'e-quick-alert-cancelpresent');\n    }\n\n    this.showQuickDialog('RecurrenceValidationAlert');\n  };\n\n  QuickPopups.prototype.openDeleteAlert = function () {\n    if (this.parent.activeViewOptions.readonly) {\n      return;\n    }\n\n    var okButton = this.quickDialog.element.querySelector('.e-quick-alertok');\n\n    if (okButton) {\n      okButton.innerHTML = this.l10n.getConstant('delete');\n    }\n\n    var cancelButton = this.quickDialog.element.querySelector('.e-quick-alertcancel');\n\n    if (cancelButton) {\n      cancelButton.innerHTML = this.l10n.getConstant('cancel');\n    }\n\n    this.quickDialog.content = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant('deleteMultipleContent') : this.l10n.getConstant('deleteContent');\n    this.quickDialog.header = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant('deleteMultipleEvent') : this.l10n.getConstant('deleteEvent');\n    this.quickDialogClass('Delete');\n    this.showQuickDialog('DeleteAlert');\n  };\n\n  QuickPopups.prototype.openValidationError = function (type) {\n    this.quickDialog.header = this.l10n.getConstant('alert');\n    this.quickDialog.content = this.l10n.getConstant(type);\n    var okButton = this.quickDialog.element.querySelector('.e-quick-alertok');\n\n    if (okButton) {\n      okButton.innerHTML = this.l10n.getConstant('ok');\n    }\n\n    var cancelButton = this.quickDialog.element.querySelector('.e-quick-alertcancel');\n\n    if (cancelButton) {\n      cancelButton.innerHTML = this.l10n.getConstant('cancel');\n    }\n\n    this.quickDialogClass('Alert');\n    this.showQuickDialog('ValidationAlert');\n  };\n\n  QuickPopups.prototype.showQuickDialog = function (popupType) {\n    this.quickDialog.dataBind();\n    var eventProp = {\n      type: popupType,\n      cancel: false,\n      data: this.parent.activeEventData,\n      element: this.quickDialog.element\n    };\n    this.parent.trigger(event.popupOpen, eventProp);\n\n    if (eventProp.cancel) {\n      return;\n    }\n\n    this.quickDialog.show();\n  };\n\n  QuickPopups.prototype.createMoreEventList = function (eventCollection, groupOrder, groupIndex) {\n    var fields = this.parent.eventFields;\n    var moreEventContentEle = createElement('div', {\n      className: cls.MORE_EVENT_CONTENT_CLASS\n    });\n    var moreEventWrapperEle = createElement('div', {\n      className: cls.MORE_EVENT_WRAPPER_CLASS\n    });\n\n    if (eventCollection.length === 0) {\n      moreEventWrapperEle = createElement('div', {\n        className: cls.MORE_EVENT_CONTENT_CLASS,\n        innerHTML: this.l10n.getConstant('emptyContainer')\n      });\n    } else {\n      for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n        var eventData = eventCollection_1[_i];\n        var eventText = eventData[fields.subject] || this.parent.eventSettings.fields.subject.default;\n        var appointmentEle = createElement('div', {\n          className: cls.APPOINTMENT_CLASS,\n          attrs: {\n            'data-id': '' + eventData[fields.id],\n            'data-guid': eventData.Guid,\n            'role': 'button',\n            'tabindex': '0',\n            'aria-readonly': 'false',\n            'aria-selected': 'false',\n            'aria-grabbed': 'true',\n            'aria-label': eventText\n          }\n        });\n        appointmentEle.appendChild(createElement('div', {\n          className: cls.SUBJECT_CLASS,\n          innerHTML: eventText\n        }));\n\n        if (this.parent.activeViewOptions.group.resources.length > 0) {\n          appointmentEle.setAttribute('data-group-index', groupIndex);\n        }\n\n        if (!isNullOrUndefined(eventData[fields.recurrenceRule])) {\n          var iconClass = eventData[fields.id] === eventData[fields.recurrenceID] ? cls.EVENT_RECURRENCE_ICON_CLASS : cls.EVENT_RECURRENCE_EDIT_ICON_CLASS;\n          appointmentEle.appendChild(createElement('div', {\n            className: cls.ICON + ' ' + iconClass\n          }));\n        }\n\n        var args = {\n          data: eventData,\n          element: appointmentEle,\n          cancel: false\n        };\n        this.parent.trigger(event.eventRendered, args);\n\n        if (!args.cancel) {\n          moreEventWrapperEle.appendChild(appointmentEle);\n          this.parent.eventBase.wireAppointmentEvents(appointmentEle);\n          this.parent.eventBase.applyResourceColor(appointmentEle, eventData, 'backgroundColor', groupOrder);\n        }\n      }\n    }\n\n    moreEventContentEle.appendChild(moreEventWrapperEle);\n    return moreEventContentEle;\n  };\n\n  QuickPopups.prototype.tapHoldEventPopup = function (args) {\n    var target = closest(args.event.target, '.' + cls.APPOINTMENT_CLASS);\n    this.isMultipleEventSelect = false;\n    this.parent.selectedElements = [];\n    this.isMultipleEventSelect = true;\n    this.parent.eventBase.getSelectedEventElements(target);\n    this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();\n    var guid = target.getAttribute('data-guid');\n    var eventObj = this.parent.eventBase.getEventByGuid(guid);\n    var eventTitle = eventObj[this.parent.eventFields.subject] || this.l10n.getConstant('noTitle');\n    var eventTemplate = \"<div class=\\\"\" + cls.MULTIPLE_EVENT_POPUP_CLASS + \"\\\"><div class=\\\"\" + cls.POPUP_HEADER_CLASS + \"\\\">\" + (\"<button class=\\\"\" + cls.CLOSE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('close') + \"\\\"></button>\") + (\"<div class=\\\"\" + cls.SUBJECT_CLASS + \"\\\">\" + eventTitle + \"</div>\") + (\"<button class=\\\"\" + cls.EDIT_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('edit') + \"\\\"></button>\") + (\"<button class=\\\"\" + cls.DELETE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('delete') + \"\\\"></button></div></div>\");\n    this.quickPopup.element.innerHTML = eventTemplate;\n    var closeIcon = this.quickPopup.element.querySelector('.' + cls.CLOSE_CLASS);\n    this.renderButton('e-flat e-round e-small', cls.ICON + ' ' + cls.CLOSE_ICON_CLASS, false, closeIcon, this.closeClick);\n    var editIcon = this.quickPopup.element.querySelector('.' + cls.EDIT_CLASS);\n    this.renderButton('e-flat e-round e-small', cls.ICON + ' ' + cls.EDIT_ICON_CLASS, false, editIcon, this.editClick);\n    var deleteIcon = this.quickPopup.element.querySelector('.' + cls.DELETE_CLASS);\n    this.renderButton('e-flat e-round e-small', cls.ICON + ' ' + cls.DELETE_ICON_CLASS, false, deleteIcon, this.deleteClick);\n    this.beforeQuickPopupOpen(target);\n  };\n\n  QuickPopups.prototype.cellClick = function (args) {\n    if (!this.parent.showQuickInfo || this.parent.currentView === 'MonthAgenda' || this.parent.isAdaptive) {\n      this.quickPopupHide();\n      return;\n    }\n\n    var target = closest(args.event.target, '.' + cls.WORK_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' + cls.HEADER_CELLS_CLASS);\n\n    if (isNullOrUndefined(target) || args.event.target.classList.contains(cls.MORE_INDICATOR_CLASS)) {\n      return;\n    }\n\n    var isSameTarget = this.quickPopup.relateTo === target;\n\n    if (isSameTarget && this.quickPopup.element.classList.contains(cls.POPUP_OPEN)) {\n      var subjectElement_1 = this.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS);\n\n      if (subjectElement_1) {\n        subjectElement_1.focus();\n      }\n\n      return;\n    }\n\n    var temp = {};\n    temp[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;\n    temp[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;\n    temp[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;\n    var cellDetails = this.getFormattedString(temp);\n    var quickCellPopup = createElement('div', {\n      className: cls.CELL_POPUP_CLASS\n    });\n    var templateArgs = extend({}, temp, {\n      elementType: 'cell'\n    }, true);\n\n    if (this.parent.quickInfoTemplates.header) {\n      append(this.parent.getQuickInfoTemplatesHeader()(templateArgs), quickCellPopup);\n    } else {\n      var headerTemplate = createElement('div', {\n        className: cls.POPUP_HEADER_CLASS,\n        innerHTML: \"<div class=\\\"\" + cls.POPUP_HEADER_ICON_WRAPPER + \"\\\">\" + (\"<button class=\\\"\" + cls.CLOSE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('close') + \"\\\"></button></div>\")\n      });\n      quickCellPopup.appendChild(headerTemplate);\n    }\n\n    if (this.parent.quickInfoTemplates.content) {\n      append(this.parent.getQuickInfoTemplatesContent()(templateArgs), quickCellPopup);\n    } else {\n      var tempStr = \"<table class=\\\"\" + cls.POPUP_TABLE_CLASS + \"\\\"><tbody><tr><td>\" + (\"<form class=\\\"\" + cls.FORM_CLASS + \"\\\" onsubmit=\\\"return false;\\\"><input class=\\\"\" + cls.SUBJECT_CLASS + \" \" + EVENT_FIELD + \"\\\" type=\\\"text\\\" \") + (\"name=\\\"\" + this.parent.eventFields.subject + \"\\\" /></form></td></tr><tr><td><div class=\\\"\" + cls.DATE_TIME_CLASS + \"\\\">\") + (\"<div class=\\\"\" + cls.DATE_TIME_ICON_CLASS + \" \" + cls.ICON + \"\\\"></div><div class=\\\"\" + cls.DATE_TIME_DETAILS_CLASS + \" \") + (cls.TEXT_ELLIPSIS + \"\\\">\" + cellDetails.details + \"</div></div>\") + ((this.parent.activeViewOptions.group.resources.length > 0 ? \"<div class=\\\"\" + cls.RESOURCE_CLASS + \"\\\">\" + (\"<div class=\\\"\" + cls.RESOURCE_ICON_CLASS + \" \" + cls.ICON + \" \\\"></div><div class=\\\"\" + cls.RESOURCE_DETAILS_CLASS + \" \") + (cls.TEXT_ELLIPSIS + \"\\\">\" + this.getResourceText(args, 'cell') + \"</div></div>\") : '') + \"</td></tr></tbody></table>\");\n      var contentTemplate = createElement('div', {\n        className: cls.POPUP_CONTENT_CLASS,\n        innerHTML: tempStr\n      });\n      quickCellPopup.appendChild(contentTemplate);\n    }\n\n    if (this.parent.quickInfoTemplates.footer) {\n      append(this.parent.getQuickInfoTemplatesFooter()(templateArgs), quickCellPopup);\n    } else {\n      var footerTemplate = createElement('div', {\n        className: cls.POPUP_FOOTER_CLASS,\n        innerHTML: \"<button class=\\\"\" + (cls.QUICK_POPUP_EVENT_DETAILS_CLASS + ' ' + cls.TEXT_ELLIPSIS) + \"\\\" title=\\\"\" + this.l10n.getConstant('moreDetails') + \"\\\">\" + this.l10n.getConstant('moreDetails') + \"</button>\" + (\"<button class=\\\"\" + cls.EVENT_CREATE_CLASS + \" \" + cls.TEXT_ELLIPSIS + \"\\\" title=\\\"\" + this.l10n.getConstant('save') + \"\\\">\") + (this.l10n.getConstant('save') + \"</button>\")\n      });\n      quickCellPopup.appendChild(footerTemplate);\n    }\n\n    var subjectElement = quickCellPopup.querySelector('.' + cls.SUBJECT_CLASS);\n\n    if (subjectElement) {\n      Input.createInput({\n        element: subjectElement,\n        properties: {\n          placeholder: this.l10n.getConstant('addTitle')\n        }\n      });\n    }\n\n    var closeIcon = quickCellPopup.querySelector('.' + cls.CLOSE_CLASS);\n\n    if (closeIcon) {\n      this.renderButton('e-flat e-round e-small', cls.ICON + ' ' + cls.CLOSE_ICON_CLASS, false, closeIcon, this.quickPopupHide);\n    }\n\n    var moreButton = quickCellPopup.querySelector('.' + cls.QUICK_POPUP_EVENT_DETAILS_CLASS);\n\n    if (moreButton) {\n      this.renderButton('e-flat', '', false, moreButton, this.detailsClick);\n    }\n\n    var saveButton = quickCellPopup.querySelector('.' + cls.EVENT_CREATE_CLASS);\n\n    if (saveButton) {\n      this.renderButton('e-flat e-primary', '', this.parent.activeViewOptions.readonly, saveButton, this.saveClick);\n    }\n\n    this.quickPopup.content = quickCellPopup;\n    this.quickPopup.dataBind();\n    this.applyFormValidation();\n\n    if (this.morePopup) {\n      this.morePopup.hide();\n    }\n\n    this.quickPopup.relateTo = target;\n    this.beforeQuickPopupOpen(target);\n  };\n\n  QuickPopups.prototype.isSameEventClick = function (events) {\n    var isSameTarget = this.quickPopup.relateTo === closest(events.element, '.' + cls.APPOINTMENT_CLASS);\n\n    if (isSameTarget && this.quickPopup.element.classList.contains(cls.POPUP_OPEN)) {\n      var editIcon = this.quickPopup.element.querySelector('.' + cls.EDIT_CLASS);\n\n      if (editIcon) {\n        editIcon.focus();\n      }\n\n      if (!this.parent.isAdaptive) {\n        var editButton = this.quickPopup.element.querySelector('.' + cls.EDIT_EVENT_CLASS);\n\n        if (editButton) {\n          editButton.focus();\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  QuickPopups.prototype.eventClick = function (events) {\n    if (this.parent.eventTooltip) {\n      this.parent.eventTooltip.close();\n    }\n\n    if (!this.parent.showQuickInfo) {\n      return;\n    }\n\n    if (this.parent.isAdaptive && this.isMultipleEventSelect) {\n      this.updateTapHoldEventPopup(closest(events.element, '.' + cls.APPOINTMENT_CLASS));\n    } else {\n      var isSameTarget = this.isSameEventClick(events);\n\n      if (isSameTarget) {\n        return;\n      }\n\n      var eventData = events.event;\n      var args = this.getFormattedString(eventData);\n      var quickEventPopup = createElement('div', {\n        className: cls.EVENT_POPUP_CLASS\n      });\n      var templateArgs = extend({}, eventData, {\n        elementType: 'event'\n      }, true);\n\n      if (this.parent.quickInfoTemplates.header) {\n        append(this.parent.getQuickInfoTemplatesHeader()(templateArgs), quickEventPopup);\n      } else {\n        var headerTemplate = createElement('div', {\n          className: cls.POPUP_HEADER_CLASS,\n          innerHTML: \"<div class=\\\"\" + cls.POPUP_HEADER_ICON_WRAPPER + \"\\\">\" + (\"<button class=\\\"\" + (cls.EDIT_CLASS + ' ' + cls.ICON) + \"\\\" title=\\\"\" + this.l10n.getConstant('edit') + \"\\\"></button>\") + (\"<button class=\\\"\" + (cls.DELETE_CLASS + ' ' + cls.ICON) + \"\\\" title=\\\"\" + this.l10n.getConstant('delete') + \"\\\"></button>\") + (\"<button class=\\\"\" + cls.CLOSE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('close') + \"\\\"></button></div>\") + (\"<div class=\\\"\" + cls.SUBJECT_WRAP + \"\\\"><div class=\\\"\" + cls.SUBJECT_CLASS + \" \" + cls.TEXT_ELLIPSIS + \"\\\" \") + (\"title=\\\"\" + args.eventSubject + \"\\\">\" + args.eventSubject + \"</div></div >\")\n        });\n        quickEventPopup.appendChild(headerTemplate);\n      }\n\n      if (this.parent.quickInfoTemplates.content) {\n        append(this.parent.getQuickInfoTemplatesContent()(templateArgs), quickEventPopup);\n      } else {\n        var tempStr = \"<div class=\\\"\" + cls.DATE_TIME_CLASS + \"\\\">\" + (\"<div class=\\\"\" + cls.DATE_TIME_ICON_CLASS + \" \" + cls.ICON + \"\\\"></div><div class=\\\"\" + cls.DATE_TIME_WRAPPER_CLASS + \" \") + (cls.TEXT_ELLIPSIS + \"\\\"><div class=\\\"\" + cls.DATE_TIME_DETAILS_CLASS + \" \" + cls.TEXT_ELLIPSIS + \"\\\">\" + args.details + \"</div>\") + ((eventData[this.parent.eventFields.recurrenceRule] ? \"<div class=\\\"\" + cls.RECURRENCE_SUMMARY_CLASS + \" \" + (cls.TEXT_ELLIPSIS + \"\\\">\" + this.getRecurrenceSummary(eventData) + \"</div>\") : '') + \"</div></div>\") + (\"\" + (eventData[this.parent.eventFields.location] ? \"<div class=\\\"\" + cls.LOCATION_CLASS + \"\\\"><div class=\\\"\" + (cls.LOCATION_ICON_CLASS + \" \" + cls.ICON + \"\\\"></div><div class=\\\"\" + cls.LOCATION_DETAILS_CLASS + \" \" + cls.TEXT_ELLIPSIS + \"\\\">\") + (eventData[this.parent.eventFields.location] + \"</div></div>\") : '')) + (\"\" + (eventData[this.parent.eventFields.startTimezone] || eventData[this.parent.eventFields.endTimezone] ? \"<div class=\\\"\" + cls.TIME_ZONE_CLASS + \"\\\"><div class=\\\"\" + (cls.TIME_ZONE_ICON_CLASS + \" \" + cls.ICON + \"\\\"></div><div class=\\\"\" + cls.TIME_ZONE_DETAILS_CLASS + \" \" + cls.TEXT_ELLIPSIS + \"\\\">\") + (this.getTimezone(eventData) + \" </div></div>\") : '')) + (\"\" + (eventData[this.parent.eventFields.description] ? \"<div class=\\\"\" + cls.DESCRIPTION_CLASS + \"\\\"><div class=\\\"\" + (cls.DESCRIPTION_ICON_CLASS + \" \" + cls.ICON + \"\\\"></div><div class=\\\"\" + cls.DESCRIPTION_DETAILS_CLASS + \" \") + (cls.TEXT_ELLIPSIS + \"\\\">\" + eventData[this.parent.eventFields.description] + \"</div></div>\") : '')) + (\"\" + (this.parent.resources.length > 0 ? \"<div class=\\\"\" + cls.RESOURCE_CLASS + \"\\\"><div class=\\\"\" + (cls.RESOURCE_ICON_CLASS + \" \" + cls.ICON + \"\\\"></div><div class=\\\"\" + cls.RESOURCE_DETAILS_CLASS + \" \" + cls.TEXT_ELLIPSIS + \"\\\">\") + (this.getResourceText(events, 'event') + \"</div></div>\") : ''));\n        var contentTemplate = createElement('div', {\n          className: cls.POPUP_CONTENT_CLASS,\n          innerHTML: tempStr\n        });\n        quickEventPopup.appendChild(contentTemplate);\n      }\n\n      if (this.parent.quickInfoTemplates.footer) {\n        append(this.parent.getQuickInfoTemplatesFooter()(templateArgs), quickEventPopup);\n      } else {\n        var footerTemplate = createElement('div', {\n          className: cls.POPUP_FOOTER_CLASS,\n          innerHTML: \"\" + (this.parent.isAdaptive ? '' : \"<button class=\\\"\" + cls.EDIT_EVENT_CLASS + \" \" + (cls.TEXT_ELLIPSIS + \"\\\" title=\\\"\" + this.l10n.getConstant('edit') + \"\\\">\" + this.l10n.getConstant('edit') + \"</button>\") + (\"<button class=\\\"\" + cls.DELETE_EVENT_CLASS + \" \" + cls.TEXT_ELLIPSIS + \"\\\" title=\\\"\" + this.l10n.getConstant('delete') + \"\\\">\") + (this.l10n.getConstant('delete') + \"</button>\"))\n        });\n        quickEventPopup.appendChild(footerTemplate);\n      }\n\n      var readonly = this.parent.activeViewOptions.readonly;\n      var editIcon = quickEventPopup.querySelector('.' + cls.EDIT_CLASS);\n\n      if (editIcon) {\n        this.renderButton('e-flat e-round e-small', cls.ICON + ' ' + cls.EDIT_ICON_CLASS, false, editIcon, this.editClick);\n      }\n\n      var deleteIcon = quickEventPopup.querySelector('.' + cls.DELETE_CLASS);\n\n      if (deleteIcon) {\n        this.renderButton('e-flat e-round e-small', cls.ICON + ' ' + cls.DELETE_ICON_CLASS, readonly, deleteIcon, this.deleteClick);\n      }\n\n      var closeIcon = quickEventPopup.querySelector('.' + cls.CLOSE_CLASS);\n\n      if (closeIcon) {\n        this.renderButton('e-flat e-round e-small', cls.ICON + ' ' + cls.CLOSE_ICON_CLASS, false, closeIcon, this.quickPopupHide);\n      }\n\n      var editButton = quickEventPopup.querySelector('.' + cls.EDIT_EVENT_CLASS);\n\n      if (editButton) {\n        this.renderButton('e-flat e-primary', '', false, editButton, this.editClick);\n      }\n\n      var deleteButton = quickEventPopup.querySelector('.' + cls.DELETE_EVENT_CLASS);\n\n      if (deleteButton) {\n        this.renderButton('e-flat', '', readonly, deleteButton, this.deleteClick);\n      }\n\n      this.quickPopup.content = quickEventPopup;\n      this.quickPopup.dataBind();\n\n      if (this.morePopup && !closest(events.element, '.' + cls.MORE_EVENT_WRAPPER_CLASS)) {\n        this.morePopup.hide();\n      }\n\n      this.quickPopup.relateTo = this.parent.isAdaptive ? document.body : closest(events.element, '.' + cls.APPOINTMENT_CLASS);\n      this.beforeQuickPopupOpen(events.element);\n    }\n  };\n\n  QuickPopups.prototype.getResourceText = function (args, type) {\n    var resourceValue = '';\n\n    if (this.parent.activeViewOptions.group.resources.length === 0) {\n      var resourceCollection_1 = this.parent.resourceBase.resourceCollection.slice(-1)[0];\n      var resourceData = resourceCollection_1.dataSource;\n      var resourceIndex_1 = 0;\n      var eventData_1 = args.event;\n      resourceData.forEach(function (resource, index) {\n        if (resource[resourceCollection_1.idField] === eventData_1[resourceCollection_1.field]) {\n          resourceIndex_1 = index;\n        }\n      });\n      resourceValue = resourceData[resourceIndex_1][resourceCollection_1.textField];\n    } else {\n      if (type === 'event') {\n        var eventData = args.event;\n        var resourceData = void 0;\n        var lastResource_1;\n\n        for (var i = this.parent.resourceBase.resourceCollection.length - 1; i >= 0; i--) {\n          resourceData = eventData[this.parent.resourceBase.resourceCollection[i].field];\n\n          if (!isNullOrUndefined(resourceData)) {\n            lastResource_1 = this.parent.resourceBase.resourceCollection[i];\n            break;\n          }\n        }\n\n        if (!Array.isArray(resourceData)) {\n          resourceData = [resourceData];\n        }\n\n        var resNames_1 = [];\n        var lastResourceData_1 = lastResource_1.dataSource;\n        resourceData.map(function (value) {\n          var i = util.findIndexInData(lastResourceData_1, lastResource_1.idField, value);\n          var text = lastResourceData_1[i][lastResource_1.textField];\n\n          if (text) {\n            resNames_1.push(text);\n          }\n        });\n        resourceValue = resNames_1.join(', ');\n      } else {\n        var argsData = args;\n        var groupIndex = !isNullOrUndefined(argsData.groupIndex) ? argsData.groupIndex : 0;\n        var resourceDetails = this.parent.resourceBase.lastResourceLevel[groupIndex];\n        resourceValue = resourceDetails.resourceData[resourceDetails.resource.textField];\n      }\n    }\n\n    return resourceValue;\n  };\n\n  QuickPopups.prototype.getFormattedString = function (eventData) {\n    var fields = this.parent.eventFields;\n    var eventSubject = eventData[fields.subject] || this.l10n.getConstant('noTitle');\n    var startDate = eventData[fields.startTime];\n    var endDate = eventData[fields.endTime];\n    var startDateDetails = this.getDateFormat(startDate, 'long');\n    var endDateDetails = eventData[fields.isAllDay] && endDate.getHours() === 0 && endDate.getMinutes() === 0 ? this.getDateFormat(util.addDays(new Date(endDate.getTime()), -1), 'long') : this.getDateFormat(endDate, 'long');\n    var startTimeDetail = this.parent.getTimeString(startDate);\n    var endTimeDetail = this.parent.getTimeString(endDate);\n    var details;\n    var allDayLength = (endDate.getTime() - startDate.getTime()) / util.MS_PER_DAY;\n    var spanLength = endDate.getDate() !== startDate.getDate() && (endDate.getTime() - startDate.getTime()) / (60 * 60 * 1000) < 24 ? 1 : 0;\n\n    if (eventData[fields.isAllDay] || allDayLength >= 1 || spanLength > 0) {\n      details = startDateDetails + ' (' + (eventData[fields.isAllDay] ? this.l10n.getConstant('allDay') : startTimeDetail) + ')';\n\n      if (allDayLength > 1 || spanLength > 0) {\n        details += '&nbsp;-&nbsp;' + endDateDetails + ' (' + (eventData[fields.isAllDay] ? this.l10n.getConstant('allDay') : endTimeDetail) + ')';\n      }\n    } else {\n      details = startDateDetails + ' (' + (startTimeDetail + '&nbsp;-&nbsp;' + endTimeDetail) + ')';\n    }\n\n    return {\n      eventSubject: eventSubject,\n      details: details\n    };\n  };\n\n  QuickPopups.prototype.moreEventClick = function (data, endDate, groupIndex) {\n    this.quickPopupHide(true);\n    var moreEventContentEle = this.morePopup.element.querySelector('.' + cls.MORE_EVENT_CONTENT_CLASS);\n\n    if (moreEventContentEle) {\n      remove(moreEventContentEle);\n    }\n\n    var selectedDate = data.date.getTime().toString();\n    var target = closest(data.element, '.' + cls.MORE_INDICATOR_CLASS);\n    this.morePopup.element.querySelector('.' + cls.MORE_EVENT_HEADER_DAY_CLASS).innerHTML = this.getDateFormat(data.date, 'E');\n    var dateElement = this.morePopup.element.querySelector('.' + cls.MORE_EVENT_HEADER_DATE_CLASS);\n    dateElement.innerHTML = this.getDateFormat(data.date, 'd');\n    dateElement.setAttribute('data-date', selectedDate);\n    dateElement.setAttribute('data-end-date', endDate.getTime().toString());\n    var groupOrder;\n\n    if (!isNullOrUndefined(groupIndex)) {\n      dateElement.setAttribute('data-group-index', groupIndex);\n      groupOrder = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)].groupOrder;\n    }\n\n    var moreEventElements = this.createMoreEventList(data.event, groupOrder, groupIndex);\n    this.morePopup.element.querySelector('.' + cls.MORE_EVENT_POPUP_CLASS).appendChild(moreEventElements);\n    removeClass(this.morePopup.element.querySelector('.' + cls.MORE_EVENT_DATE_HEADER_CLASS).childNodes, cls.CURRENTDATE_CLASS);\n\n    if (util.resetTime(data.date).getTime() === util.resetTime(new Date()).getTime()) {\n      addClass(this.morePopup.element.querySelector('.' + cls.MORE_EVENT_DATE_HEADER_CLASS).childNodes, cls.CURRENTDATE_CLASS);\n    }\n\n    if (this.parent.currentView.indexOf('Timeline') !== -1) {\n      var gIndex = target.getAttribute('data-group-index');\n      var index = isNullOrUndefined(gIndex) ? 0 : parseInt(gIndex, 10);\n      this.morePopup.relateTo = this.parent.element.querySelector('.' + cls.CONTENT_WRAP_CLASS + ' tbody tr:nth-child(' + (index + 1) + ') td[data-date=\"' + target.getAttribute('data-start-date') + '\"]');\n    } else {\n      this.morePopup.relateTo = closest(target, '.' + cls.WORK_CELLS_CLASS);\n    }\n\n    var eventProp = {\n      type: 'EventContainer',\n      data: data,\n      cancel: false,\n      element: this.morePopup.element\n    };\n    this.parent.trigger(event.popupOpen, eventProp);\n\n    if (eventProp.cancel) {\n      return;\n    }\n\n    this.morePopup.show();\n  };\n\n  QuickPopups.prototype.saveClick = function () {\n    if (!this.quickPopup.element.querySelector('.' + cls.FORM_CLASS).ej2_instances[0].validate()) {\n      return;\n    }\n\n    var fields = this.parent.eventFields;\n    var saveObj = extend({}, this.parent.eventWindow.getObjectFromFormData(cls.POPUP_WRAPPER_CLASS));\n\n    if (!isNullOrUndefined(saveObj[fields.subject])) {\n      saveObj[fields.subject] = saveObj[fields.subject] !== '' ? saveObj[fields.subject] : this.parent.eventSettings.fields.subject.default;\n    }\n\n    saveObj[fields.id] = this.parent.eventBase.getEventMaxID();\n    saveObj[fields.startTime] = this.parent.activeCellsData.startTime;\n    saveObj[fields.endTime] = this.parent.activeCellsData.endTime;\n    saveObj[fields.isAllDay] = this.parent.activeCellsData.isAllDay;\n\n    if (this.parent.resourceBase) {\n      this.parent.resourceBase.setResourceValues(saveObj, true);\n    }\n\n    this.parent.currentAction = 'Add';\n    this.crudAction.addEvent(saveObj);\n    this.quickPopupHide();\n  };\n\n  QuickPopups.prototype.detailsClick = function () {\n    var subjectEle = this.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS);\n\n    if (subjectEle && subjectEle.value !== '') {\n      var args = extend(this.parent.activeCellsData, {\n        subject: subjectEle.value\n      });\n    }\n\n    this.fieldValidator.destroyToolTip();\n    this.quickPopupHide();\n    this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');\n  };\n\n  QuickPopups.prototype.editClick = function () {\n    this.quickPopupHide(true);\n    var data = this.parent.activeEventData.event;\n    this.parent.currentAction = 'EditSeries';\n\n    if (!isNullOrUndefined(data[this.parent.eventFields.recurrenceRule])) {\n      this.parent.currentAction = 'EditOccurrence';\n      this.openRecurrenceAlert();\n    } else {\n      this.parent.eventWindow.openEditor(data, this.parent.currentAction);\n    }\n  };\n\n  QuickPopups.prototype.deleteClick = function () {\n    this.quickPopupHide(true);\n    this.parent.currentAction = 'Delete';\n\n    if (this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule]) {\n      this.openRecurrenceAlert();\n    } else {\n      this.openDeleteAlert();\n    }\n  };\n\n  QuickPopups.prototype.updateMoreEventContent = function () {\n    if (this.morePopup.element.classList.contains('e-popup-close')) {\n      return;\n    }\n\n    var moreEventContentEle = this.morePopup.element.querySelector('.' + cls.MORE_EVENT_CONTENT_CLASS);\n\n    if (moreEventContentEle) {\n      remove(moreEventContentEle);\n    }\n\n    var dateElement = this.morePopup.element.querySelector('.' + cls.MORE_EVENT_HEADER_DATE_CLASS);\n    var startDate = this.parent.getDateFromElement(dateElement);\n    var endDate = new Date(parseInt(dateElement.getAttribute('data-end-date'), 10));\n    var groupIndex = dateElement.getAttribute('data-group-index');\n    var data;\n    var groupOrder;\n\n    if (!isNullOrUndefined(groupIndex)) {\n      data = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)];\n      groupOrder = data.groupOrder;\n    }\n\n    var filteredEvents = this.parent.eventBase.filterEvents(startDate, endDate, this.parent.eventsProcessed, data);\n    var moreElement = this.createMoreEventList(filteredEvents, groupOrder, groupIndex);\n    this.morePopup.element.querySelector('.' + cls.MORE_EVENT_POPUP_CLASS).appendChild(moreElement);\n  };\n\n  QuickPopups.prototype.closeClick = function () {\n    this.quickPopupHide();\n    this.morePopup.hide();\n  };\n\n  QuickPopups.prototype.dialogButtonClick = function (event) {\n    var cancelButton = this.quickDialog.element.querySelector('.e-quick-alertcancel');\n\n    if (event.target.classList.contains('e-quick-alertok') && cancelButton.classList.contains('e-quick-alert-cancelpresent')) {\n      removeClass([cancelButton], 'e-quick-alert-cancelpresent');\n      this.parent.eventWindow.eventSave(this.l10n.getConstant('ok'));\n      return;\n    }\n\n    this.quickDialog.hide();\n\n    if (event.target.classList.contains(cls.QUICK_DIALOG_EDIT_EVENT_CLASS)) {\n      this.parent.currentAction = this.parent.currentAction === 'Delete' ? 'DeleteOccurrence' : 'EditOccurrence';\n\n      switch (this.parent.currentAction) {\n        case 'EditOccurrence':\n          this.parent.eventWindow.openEditor(this.parent.activeEventData.event, this.parent.currentAction);\n          break;\n\n        case 'DeleteOccurrence':\n          this.crudAction.deleteEvent(this.parent.activeEventData.event, this.parent.currentAction);\n          break;\n      }\n    } else if (event.target.classList.contains(cls.QUICK_DIALOG_EDIT_SERIES_CLASS)) {\n      this.parent.currentAction = this.parent.currentAction === 'Delete' ? 'DeleteSeries' : 'EditSeries';\n\n      switch (this.parent.currentAction) {\n        case 'EditSeries':\n          var parentEvent = this.parent.eventBase.getRecurrenceEvent(this.parent.activeEventData.event);\n          this.parent.eventWindow.openEditor(parentEvent, this.parent.currentAction);\n          break;\n\n        case 'DeleteSeries':\n          this.crudAction.deleteEvent(this.parent.activeEventData.event, this.parent.currentAction);\n          break;\n      }\n    } else if (event.target.classList.contains(cls.QUICK_DIALOG_DELETE_CLASS)) {\n      this.crudAction.deleteEvent(this.parent.activeEventData.event, this.parent.currentAction);\n    }\n  };\n\n  QuickPopups.prototype.updateTapHoldEventPopup = function (target) {\n    var selectedElements = this.parent.eventBase.getSelectedEventElements(target);\n    this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();\n\n    if (selectedElements.length > 0) {\n      var eventObj = this.parent.eventBase.getEventByGuid(selectedElements[0].getAttribute('data-guid'));\n      var titleContent = selectedElements.length === 1 ? eventObj[this.parent.eventFields.subject] || this.l10n.getConstant('noTitle') : '(' + selectedElements.length + ')' + '&nbsp;' + this.l10n.getConstant('selectedItems');\n      this.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS).innerHTML = titleContent;\n\n      if (selectedElements.length > 1) {\n        addClass([this.quickPopup.element.querySelector('.' + cls.EDIT_ICON_CLASS)], cls.HIDDEN_CLASS);\n      } else {\n        removeClass([this.quickPopup.element.querySelector('.' + cls.EDIT_ICON_CLASS)], cls.HIDDEN_CLASS);\n      }\n    } else {\n      this.parent.selectedElements = [];\n      this.quickPopupHide();\n    }\n  };\n\n  QuickPopups.prototype.getTimezone = function (event) {\n    var zoneDetails = '';\n    zoneDetails += event[this.parent.eventFields.startTimezone] || '';\n    zoneDetails += zoneDetails === '' ? '' : ' - ';\n    zoneDetails += event[this.parent.eventFields.endTimezone] || '';\n    return zoneDetails;\n  };\n\n  QuickPopups.prototype.getRecurrenceSummary = function (event) {\n    var recurrenceEditor = this.parent.eventWindow.getRecurrenceEditorInstance();\n    var ruleSummary = recurrenceEditor.getRuleSummary(event[this.parent.eventFields.recurrenceRule]);\n    return ruleSummary.charAt(0).toUpperCase() + ruleSummary.slice(1);\n  };\n\n  QuickPopups.prototype.getDateFormat = function (date, formatString) {\n    return this.parent.globalize.formatDate(date, {\n      skeleton: formatString\n    });\n  };\n\n  QuickPopups.prototype.getDataFromTarget = function (target) {\n    if (target.classList.contains(cls.APPOINTMENT_CLASS)) {\n      return this.parent.activeEventData.event;\n    }\n\n    return this.parent.activeCellsData;\n  };\n\n  QuickPopups.prototype.beforeQuickDialogClose = function () {\n    this.parent.eventBase.focusElement();\n  };\n\n  QuickPopups.prototype.beforeQuickPopupOpen = function (target) {\n    var isEventPopup = this.quickPopup.element.querySelector('.' + cls.EVENT_POPUP_CLASS);\n    var popupType = this.parent.isAdaptive ? isEventPopup ? 'ViewEventInfo' : 'EditEventInfo' : 'QuickInfo';\n    var eventProp = {\n      type: popupType,\n      cancel: false,\n      data: this.getDataFromTarget(target),\n      target: target,\n      element: this.quickPopup.element\n    };\n    this.parent.trigger(event.popupOpen, eventProp);\n\n    if (eventProp.cancel) {\n      this.destroyButtons();\n\n      if (eventProp.element.classList.contains(cls.POPUP_OPEN)) {\n        this.quickPopupClose();\n      }\n\n      this.quickPopup.element.innerHTML = '';\n      return;\n    }\n\n    var display = this.quickPopup.element.style.display;\n    this.quickPopup.element.style.display = 'block';\n\n    if (this.parent.isAdaptive) {\n      this.quickPopup.element.removeAttribute('style');\n      this.quickPopup.element.style.display = 'block';\n      this.quickPopup.element.style.height = formatUnit(popupType === 'EditEventInfo' ? 65 : window.innerHeight);\n    } else {\n      this.quickPopup.offsetX = 10;\n      this.quickPopup.collision = {\n        X: 'none',\n        Y: 'fit'\n      };\n      this.quickPopup.position = {\n        X: 'right',\n        Y: 'top'\n      };\n      this.quickPopup.dataBind();\n      this.quickPopup.refreshPosition(null, true);\n      var collide = isCollide(this.quickPopup.element, this.parent.element);\n\n      if (collide.indexOf(this.parent.enableRtl ? 'left' : 'right') > -1) {\n        this.quickPopup.offsetX = -target.offsetWidth - 10 - this.quickPopup.element.offsetWidth;\n        this.quickPopup.dataBind();\n        var leftCollide = isCollide(this.quickPopup.element, this.parent.element);\n\n        if (leftCollide.indexOf('left') > -1) {\n          this.quickPopup.position = {\n            X: 'center',\n            Y: 'center'\n          };\n          this.quickPopup.collision = {\n            X: 'fit',\n            Y: 'fit'\n          };\n          this.quickPopup.offsetX = -(this.quickPopup.element.offsetWidth / 2);\n          this.quickPopup.dataBind();\n        }\n      }\n    }\n\n    if (isEventPopup) {\n      this.applyEventColor();\n    }\n\n    this.quickPopup.element.style.display = display;\n    this.quickPopup.dataBind();\n    this.quickPopup.show();\n  };\n\n  QuickPopups.prototype.applyEventColor = function () {\n    var color = this.parent.activeEventData.element.style.backgroundColor;\n\n    if (color === '') {\n      return;\n    }\n\n    var colorEle = this.quickPopup.element.querySelector('.' + cls.POPUP_HEADER_CLASS);\n    var footerEle = this.quickPopup.element.querySelector('.' + cls.POPUP_FOOTER_CLASS);\n\n    if (footerEle && footerEle.offsetParent) {\n      colorEle = this.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS);\n\n      if (colorEle) {\n        colorEle.style.borderLeftColor = color;\n        color = \"rgba(\" + color.match(/\\d+/g).join() + \",0.3)\";\n      }\n    }\n\n    if (colorEle) {\n      colorEle.style.backgroundColor = color;\n    }\n  };\n\n  QuickPopups.prototype.quickPopupOpen = function () {\n    if (this.parent.isAdaptive) {\n      return;\n    }\n\n    if (this.quickPopup.element.querySelector('.' + cls.CELL_POPUP_CLASS)) {\n      var subjectElement = this.quickPopup.element.querySelector('.' + cls.SUBJECT_CLASS);\n\n      if (subjectElement) {\n        subjectElement.focus();\n      }\n    } else {\n      var editElement = this.quickPopup.element.querySelector('.' + cls.EDIT_EVENT_CLASS);\n\n      if (editElement) {\n        editElement.focus();\n      }\n\n      var editIcon = this.quickPopup.element.querySelector('.' + cls.EDIT_CLASS);\n\n      if (editIcon) {\n        editIcon.focus();\n      }\n    }\n  };\n\n  QuickPopups.prototype.quickPopupClose = function () {\n    this.parent.eventBase.focusElement();\n    this.quickPopup.relateTo = cls.WORK_CELLS_CLASS;\n    this.fieldValidator.destroyToolTip();\n    this.destroyButtons();\n    this.quickPopup.element.innerHTML = '';\n  };\n\n  QuickPopups.prototype.morePopupOpen = function () {\n    this.morePopup.element.querySelector('.' + cls.MORE_EVENT_HEADER_DATE_CLASS).focus();\n    this.morePopup.refreshPosition();\n  };\n\n  QuickPopups.prototype.morePopupClose = function () {\n    var moreWrapper = this.parent.element.querySelector('.' + cls.MORE_EVENT_WRAPPER_CLASS);\n\n    if (moreWrapper) {\n      moreWrapper.remove();\n    }\n  };\n\n  QuickPopups.prototype.quickPopupHide = function (hideAnimation) {\n    if (this.quickPopup.element.classList.contains('e-popup-open')) {\n      if (hideAnimation) {\n        var animation = this.quickPopup.hideAnimation;\n        this.quickPopup.hideAnimation = null;\n        this.quickPopup.hide();\n        this.quickPopup.hideAnimation = animation;\n      } else {\n        this.quickPopup.hide();\n      }\n\n      this.isMultipleEventSelect = false;\n    }\n  };\n\n  QuickPopups.prototype.navigationClick = function (e) {\n    var navigateEle = closest(e.target, '.' + cls.NAVIGATE_CLASS);\n\n    if (!isNullOrUndefined(navigateEle)) {\n      var date = this.parent.getDateFromElement(e.currentTarget);\n\n      if (!isNullOrUndefined(date) && !this.parent.isAdaptive) {\n        this.closeClick();\n        this.parent.setProperties({\n          selectedDate: date\n        }, true);\n        this.parent.changeView(this.parent.getNavigateView());\n      }\n    }\n  };\n\n  QuickPopups.prototype.documentClick = function (e) {\n    var target = e.event.target;\n    var classNames = '.' + cls.POPUP_WRAPPER_CLASS + ',.' + cls.HEADER_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' + cls.WORK_CELLS_CLASS + ',.' + cls.APPOINTMENT_CLASS;\n\n    if (!closest(target, classNames)) {\n      this.quickPopupHide();\n    }\n\n    if (!closest(target, '.' + cls.MORE_POPUP_WRAPPER_CLASS) && !target.classList.contains(cls.MORE_INDICATOR_CLASS) && !closest(target, '.' + cls.POPUP_OPEN)) {\n      this.morePopup.hide();\n    }\n  };\n\n  QuickPopups.prototype.onClosePopup = function () {\n    this.quickPopupHide();\n    this.parent.eventBase.focusElement();\n  };\n\n  QuickPopups.prototype.addEventListener = function () {\n    this.parent.on(event.cellClick, this.cellClick, this);\n    this.parent.on(event.eventClick, this.eventClick, this);\n    this.parent.on(event.documentClick, this.documentClick, this);\n    this.parent.on(event.dataReady, this.updateMoreEventContent, this);\n    this.parent.on(event.tapHoldReady, this.tapHoldEventPopup, this);\n  };\n\n  QuickPopups.prototype.removeEventListner = function () {\n    this.parent.off(event.cellClick, this.cellClick);\n    this.parent.off(event.eventClick, this.eventClick);\n    this.parent.off(event.documentClick, this.documentClick);\n    this.parent.off(event.dataReady, this.updateMoreEventContent);\n    this.parent.off(event.tapHoldReady, this.tapHoldEventPopup);\n  };\n\n  QuickPopups.prototype.destroyButtons = function () {\n    var buttonCollections = [].slice.call(this.quickPopup.element.querySelectorAll('.e-control.e-btn'));\n    buttonCollections.forEach(function (button) {\n      var instance = button.ej2_instances[0];\n\n      if (instance) {\n        instance.destroy();\n      }\n    });\n  };\n\n  QuickPopups.prototype.destroy = function () {\n    this.fieldValidator.destroy();\n    this.removeEventListner();\n    this.destroyButtons();\n    this.quickPopup.destroy();\n    remove(this.quickPopup.element);\n    this.morePopup.destroy();\n\n    if (this.quickDialog.element) {\n      this.quickDialog.destroy();\n      remove(this.quickDialog.element);\n      this.quickDialog.element = null;\n    }\n  };\n\n  return QuickPopups;\n}();\n\nexport { QuickPopups };","map":null,"metadata":{},"sourceType":"module"}