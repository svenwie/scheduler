{"ast":null,"code":"import { isNullOrUndefined, append, createElement } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nimport * as cls from '../base/css-constant';\nimport * as util from '../base/util';\n/**\n * Tooltip on appointments in Schedule\n */\n\nvar EventTooltip =\n/** @class */\nfunction () {\n  function EventTooltip(parent) {\n    this.parent = parent;\n    this.tooltipObj = new Tooltip({\n      content: 'No title',\n      position: 'BottomRight',\n      offsetY: 10,\n      mouseTrail: this.parent.isAdaptive ? false : true,\n      showTipPointer: false,\n      cssClass: this.parent.cssClass + ' ' + cls.EVENT_TOOLTIP_ROOT_CLASS,\n      target: this.getTargets(),\n      beforeRender: this.onBeforeRender.bind(this),\n      enableRtl: this.parent.enableRtl\n    });\n    this.tooltipObj.appendTo(this.parent.element);\n  }\n\n  EventTooltip.prototype.getTargets = function () {\n    var targets;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.eventSettings.enableTooltip) {\n      targets = '.' + cls.APPOINTMENT_CLASS + ',' + '.' + cls.RESOURCE_CELLS_CLASS;\n    } else if (this.parent.eventSettings.enableTooltip) {\n      targets = '.' + cls.APPOINTMENT_CLASS;\n    } else {\n      targets = '.' + cls.RESOURCE_CELLS_CLASS;\n    }\n\n    return targets;\n  };\n\n  EventTooltip.prototype.onBeforeRender = function (args) {\n    if (!isNullOrUndefined(args.target.getAttribute('data-tooltip-id'))) {\n      return;\n    }\n\n    var content = '';\n\n    if (args.target.classList.contains(cls.RESOURCE_CELLS_CLASS) && this.parent.activeViewOptions.group.resources.length > 0) {\n      var index = parseInt(args.target.getAttribute('data-group-index'), 0);\n      var resCollection = this.parent.resourceBase.lastResourceLevel[index];\n      var data = {\n        resource: resCollection.resource,\n        resourceData: resCollection.resourceData\n      };\n      var ele = createElement('div');\n      append([].slice.call(this.parent.getHeaderTooltipTemplate()(data)), ele);\n      content = ele.innerHTML;\n      this.tooltipObj.content = content;\n      return;\n    }\n\n    var record = this.parent.eventBase.getEventByGuid(args.target.getAttribute('data-guid'));\n\n    if (!isNullOrUndefined(this.parent.eventSettings.tooltipTemplate)) {\n      var ele = createElement('div');\n      append([].slice.call(this.parent.getEventTooltipTemplate()(record)), ele);\n      content = ele.innerHTML;\n    } else {\n      var globalize = this.parent.globalize;\n      var fields = this.parent.eventFields;\n      var eventStart = new Date('' + record[fields.startTime]);\n      var eventEnd = new Date('' + record[fields.endTime]);\n      eventEnd = eventEnd.getHours() === 0 && eventEnd.getMinutes() === 0 ? new Date(eventEnd.setMilliseconds(-1000)) : eventEnd;\n      var startDate = util.resetTime(new Date('' + eventStart));\n      var endDate = util.resetTime(new Date('' + eventEnd));\n      var tooltipSubject = record[fields.subject] || this.parent.eventSettings.fields.subject.default;\n      var tooltipLocation = !isNullOrUndefined(record[fields.location]) ? record[fields.location] : '';\n      var startMonthDate = globalize.formatDate(eventStart, {\n        type: 'date',\n        skeleton: 'MMMd'\n      });\n      var startMonthYearDate = globalize.formatDate(eventStart, {\n        type: 'date',\n        skeleton: 'yMMMd'\n      });\n      var endMonthYearDate = globalize.formatDate(eventEnd, {\n        type: 'date',\n        skeleton: 'yMMMd'\n      });\n      var startTime = globalize.formatDate(eventStart, {\n        type: 'time',\n        skeleton: 'short'\n      });\n      var endTime = globalize.formatDate(eventEnd, {\n        type: 'time',\n        skeleton: 'short'\n      });\n      var tooltipDetails = void 0;\n\n      if (startDate.getTime() === endDate.getTime()) {\n        tooltipDetails = globalize.formatDate(eventStart, {\n          type: 'date',\n          skeleton: 'long'\n        });\n      } else {\n        tooltipDetails = startDate.getFullYear() === endDate.getFullYear() ? startMonthDate + ' - ' + endMonthYearDate : startMonthYearDate + ' - ' + endMonthYearDate;\n      }\n\n      var tooltipTime = record[fields.isAllDay] ? this.parent.localeObj.getConstant('allDay') : startTime + ' - ' + endTime;\n      content = '<div><div class=\"e-subject\">' + tooltipSubject + '</div>' + '<div class=\"e-location\">' + tooltipLocation + '</div>' + '<div class=\"e-details\">' + tooltipDetails + '</div>' + '<div class=\"e-all-day\">' + tooltipTime + '</div></div>';\n    }\n\n    this.tooltipObj.content = content;\n  };\n\n  EventTooltip.prototype.close = function () {\n    this.tooltipObj.close();\n  };\n  /**\n   * To destroy the event tooltip.\n   * @return {void}\n   * @private\n   */\n\n\n  EventTooltip.prototype.destroy = function () {\n    this.tooltipObj.destroy();\n    this.tooltipObj = null;\n  };\n\n  return EventTooltip;\n}();\n\nexport { EventTooltip };","map":null,"metadata":{},"sourceType":"module"}